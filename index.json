{"repository_name":"goban","body":"# Goban\n\nA fast and efficient QR Code encoder/decoder library written purely in Crystal. It is significantly faster (4-10×) and uses fewer heap allocations (-95%) compared to the other implementation in Crystal ([spider-gazelle/qr-code](https://github.com/spider-gazelle/qr-code)), and it supports wider QR Code standard features such as Kanji mode encoding. It also supports generating Micro QR Code and rMQR Code symbols.\n\nThe implementation aims compliance with following standards:\n\n- [ISO/IEC 18004:2015](https://www.iso.org/standard/62021.html)/[JIS X 0510:2018](https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS+X+0510%3A2018)\n- [ISO/IEC 23941:2022](https://www.iso.org/standard/77404.html)\n\nThe name comes from the board game [Go](<https://en.wikipedia.org/wiki/Go_(game)>), which inspired the QR Code inventor to come up with a fast and accurate canvas barcode to read. 碁盤(Goban) literally means [Go board](https://en.wikipedia.org/wiki/Go_equipment#Board) in Japanese.\n\n_\"QR Code\" is a registered trademark of Denso Wave Incorporated._\nhttps://www.qrcode.com/en/patent.html\n\n## Benchmarks\n\n### vs [spider-gazelle/qr-code](https://github.com/spider-gazelle/qr-code):\n\n```crystal\ntext = ARGV[0]\nBenchmark.ips do |x|\n  x.report(\"goban\") { Goban::QR.encode_string(text, Goban::ECC::Level::High) }\n  x.report(\"qr-code\") { QRCode.new(text, level: :h) }\nend\n```\n\n```\n❯ ./bin/qr_test \"Hello World\\!\"\n  goban  30.76k ( 32.51µs) (± 0.21%)  7.6kB/op        fastest\nqr-code   4.59k (217.64µs) (± 0.64%)  149kB/op   6.69× slower\n```\n\n```\n❯ ./bin/qr_test \"こんにちは\"\n  goban  30.99k ( 32.26µs) (± 0.31%)  7.56kB/op        fastest\nqr-code   3.08k (324.90µs) (± 0.59%)   198kB/op  10.07× slower\n```\n\nIt goes even faster with a larger data and multithreading:\n\n```\n❯ shards build --release -Dpreview_mt\nDependencies are satisfied\nBuilding: qr_test\n\n❯ CRYSTAL_WORKERS=4 ./bin/qr_test \"A fast and efficient QR Code encoder/decoder library written purely in Crystal. It is significantly faster (4-10×) and uses fewer heap allocations (-95%) compared to the other implementation in Crystal (spider-gazelle/qr-code), and it supports wider QR Code standard features such as Kanji mode encoding. It also supports generating Micro QR Code and rMQR Code symbols.\"\n  goban   2.45k (408.47µs) (± 6.31%)  95.3kB/op        fastest\nqr-code 168.07  (  5.95ms) (± 2.17%)  2.55MB/op  14.57× slower\n\n❯ CRYSTAL_WORKERS=8 ./bin/qr_test \"A fast and efficient QR Code encoder/decoder library written purely in Crystal. It is significantly faster (4-10×) and uses fewer heap allocations (-95%) compared to the other implementation in Crystal (spider-gazelle/qr-code), and it supports wider QR Code standard features such as Kanji mode encoding. It also supports generating Micro QR Code and rMQR Code symbols.\"\n  goban   3.41k (292.99µs) (± 2.03%)  95.3kB/op        fastest\nqr-code 173.34  (  5.77ms) (± 1.81%)  2.55MB/op  19.69× slower\n```\n\n### vs [woodruffw/qrencode.cr](https://github.com/woodruffw/qrencode.cr) (Crystal bindings to libqrencode):\n\n```crystal\ntext = ARGV[0]\nBenchmark.ips do |x|\n  x.report(\"goban\") { Goban::QR.encode_string(text, Goban::ECC::Level::High) }\n  x.report(\"qrencode\") { QRencode::QRcode.new(text, level: QRencode::ECLevel::HIGH) }\nend\n```\n\n```\n❯ ./bin/qr_test \"Hello World\\!\"\n   goban  30.31k ( 32.99µs) (± 0.20%)  7.6kB/op   1.46× slower\nqrencode  44.18k ( 22.63µs) (± 0.28%)   112B/op        fastest\n```\n\n```\n❯ ./bin/qr_test \"こんにちは\"\n   goban  31.45k ( 31.80µs) (± 0.22%)  7.56kB/op   1.03× slower\nqrencode  32.42k ( 30.84µs) (± 0.52%)    112B/op        fastest\n```\n\n\\* The heap allocation value reported for qrencode.cr is not accurate as it doesn't include memory allocations happened on the C library.\n\nWhen compared to the C library, Goban is usually a bit slower, but it should be noted that Goban uses [a more advanced algorithm](#about-the-encoding-modes-and-the-text-segmentation) for text segmentation and is more likely to produce a smaller QR Code symbol as a result.\n\n## Features\n\n| QR Code Type  | Encoding | Decoding |\n| ------------- | :------: | :------: |\n| QR Code\\*     |    ✓     |    ✓     |\n| Micro QR Code |    ✓     |    ✓     |\n| rMQR Code     |    ✓     |    ✓     |\n\n\\* QR Code Model 1 will not be supported as it is considered obsolete.\n\n## Roadmap\n\n- Add ECI mode encoding\n- Support structured append of symbols\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     goban:\n       github: soya-daizu/goban\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nA simple example to generate a QR Code for the given string and output to the console:\n\n```crystal\nrequire \"goban\"\n\nqr = Goban::QR.encode_string(\"Hello World!\", Goban::ECC::Level::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████\n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██\n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████\n#    ██          ██    ██████████  ██  ████\n#    ██  ██████  ██    ██  ██          ██████\n#    ██  ██████  ██  ██  ██  ██  ██    ██████\n#    ██  ██████  ██  ██████  ██    ██    ██\n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██\n```\n\n`Goban::ECC::Level` represents the ECC (Error Correction Coding) level to use when encoding the data. The available options are:\n\n| Level    | Error Correction Capability |\n| -------- | --------------------------- |\n| Low      | Approx 7%                   |\n| Medium   | Approx 15%                  |\n| Quartile | Approx 25%                  |\n| High     | Approx 30%                  |\n\nThe default ECC level is `Medium`. Use `Low` if you want your QR Code to be as compact as possible, or increase the level to `Quartile` or `High` if you want it to be more resistant to damage.\n\nHigher ECC levels are especially capable of interpolating a large chunk of loss in the symbol such as by tears and stains. Typically, it is not necessary to set the ECC level high for display purposes on the screen.\n\n### Using exporters to generate a PNG and SVG image\n\nTo generate a PNG image, add [stumpy_png](https://github.com/stumpycr/stumpy_png) as a dependency in your shard.yml, and `require \"goban/exporters/png\"` to use `Goban::PNGExporter`:\n\n```crystal\nrequire \"goban/exporters/png\"\n\nqr = Goban::QR.encode_string(\"Hello World!\")\nputs \"Exporting with targeted size: 500\"\nsize = Goban::PNGExporter.export(qr, \"output.png\", 500)\nputs \"Actual QR Code size: #{size}\"\n```\n\n`Goban::SVGExporter` requires no external dependency and can be used like below:\n\n```crystal\nrequire \"goban/exporters/svg\"\n\nqr = Goban::QR.encode_string(\"Hello World!\")\n# Get SVG string\nputs Goban::SVGExporter.svg_string(qr, 4)\n# or export as a file\nGoban::SVGExporter.export(qr, \"test.svg\")\n```\n\nAlternatively, you can write your own export logic by iterating over the canvas of the QR Code object.\n\n```crystal\nqr = Goban::QR.encode_string(\"Hello World!\")\nqr.canvas.each_row do |row, y|\n  row.each do |mod, x|\n    # mod is each module (pixel or dot in other words) included in the symbol\n    # and the value is either 0 (= light) or 1 (= dark)\n  end\nend\n```\n\n### About the encoding modes and the text segmentation\n\nThe `Goban::QR.encode_string` method under the hood encodes a string to an optimized sequence of text segments where each segment is encoded in one of the following encoding modes:\n\n| Mode         | Supported Characters        |\n| ------------ | --------------------------- |\n| Numeric      | 0-9                         |\n| Alphanumeric | 0-9 A-Z \\s $ % \\* + - . / : |\n| Byte         | Any UTF-8 characters        |\n| Kanji        | Any Shift-JIS characters    |\n\nThe `Byte` mode supports the widest range of characters but it is inefficient and produces longer data bits, meaning that when comparing the two QR Code symbols, one encoded entirely in the `Byte` mode and the other encoded in the appropriate mode for each character\\*, the former one can be more challenging to scan and decode than the other given that both symbols are printed in the same size.\n\n\\* Because each text segment includes additional header bits to indicate its encoding mode, simply encoding each character in the supported mode that has the smallest character set may not always produce the most optimal segments. Goban addresses this by using the technique of dynamic programming.\n\nFinding out the optimal segmentation requires some processing, so if you are generating thousands of QR Codes with all the same limited sets of characters, you may want to hard-code the text segments and apply the characters to those to generate the QR Codes.\n\nThis can be done by using the `Goban::QR.encode_segments` method, which is the lower-level method used by the `Goban::QR.encode_string` method.\n\n```crystal\nsegments = [\n  Goban::Segment.kanji(\"こんにち\"),\n  Goban::Segment.byte(\"wa\"),\n  Goban::Segment.kanji(\"、世界！\"),\n  Goban::Segment.alphanumeric(\" 123\"),\n]\n# Note that when using this method, you have to manually assign the version (= size) of the QR Code.\nqr = Goban::QR.encode_segments(segments, Goban::ECC::Level::Low, 2)\n```\n\nThe optimal segments and version to hard-code can be figured out by manually executing the `Goban::QR.determine_version_and_segments` method.\n\n### Generating Micro QR Codes\n\nMicro QR Codes can be generated just like regular QR Codes using the `Goban::MQR.encode_string` or `Goban::MQR.encode_segments` methods.\n\n```crystal\nmqr = Goban::MQR.encode_string(\"Hello World!\", Goban::ECC::Level::Low)\nmqr.print_to_console\n# => ██████████████  ██  ██  ██  ██  ██\n#    ██          ██  ██        ██\n#    ██  ██████  ██    ██    ████\n#    ██  ██████  ██  ██      ██████  ██\n#    ██  ██████  ██      ██  ██████  ██\n#    ██          ██  ██        ██  ██\n#    ██████████████  ██████    ██    ██\n#                            ██████  ██\n#    ██    ██  ██████  ████  ██      ██\n#      ██████████            ██\n#    ████    ████████  ██████████  ██\n#      ██      ██  ████    ████\n#    ████████  ██  ██  ████  ██████  ██\n#              ██████████████████\n#    ██████      ████████        ██\n#        ██      ██  ██████  ████\n#    ██████  ██    ██  ████  ██      ██\n```\n\nYou can learn more about the text segments and encoding modes [above](#about-the-encoding-modes-and-the-text-segmentation).\n\nNote that Micro QR Code has strong limitations in the data capacity, supported encoding modes, and error correction capabilities.\n\n| Version | Supported ECC Level         | Supported Modes                    |\n| ------- | --------------------------- | ---------------------------------- |\n| M1      | None (Error Detection Only) | Numeric                            |\n| M2      | Low, Medium                 | Numeric, Alphanumeric              |\n| M3      | Low, Medium                 | Numeric, Alphanumeric, Byte, Kanji |\n| M4      | Low, Medium, Quartile       | Numeric, Alphanumeric, Byte, Kanji |\n\nData capacity for each combination of the symbol version and ECC level can be found [here](https://www.qrcode.com/en/codes/microqr.html).\n\nSince the version M1 doesn't support error correction at all, the value passed as the ECC level will be ignored.\n\n### Generating rMQR Codes\n\nJust like regular QR Codes and Micro QR Codes, rMQR Codes can also be generated using the `Goban::RMQR.encode_string` and `Goban::RMQR::encode_segments` methods.\n\n```crystal\n# Note that rMQR Code only supports Medium and High ECC Level\nrmqr = Goban::RMQR.encode_string(\"Hello World!\", Goban::ECC::Level::Medium)\nputs rmqr.version.value\n# => R11x43\nrmqr.print_to_console\n# => ██████████████  ██  ██  ██  ██  ██  ██  ██████  ██  ██  ██  ██  ██  ██  ██  ██  ██████\n#    ██          ██          ██    ████████  ██  ██████████  ██████████  ██    ██        ██\n#    ██  ██████  ██    ██  ██████        ██████████    ██    ████  ██  ████  ██    ████  ██\n#    ██  ██████  ██  ██      ██    ██        ██            ████    ██████      ██      ██\n#    ██  ██████  ██    ██  ██████    ████  ██  ████  ████    ██      ████      ████  ██████\n#    ██          ██      ██  ██████                ████  ██  ██████    ██  ██    ██  ██\n#    ██████████████  ██        ██  ██          ████████    ██████████████        ██████████\n#                        ██  ██    ██████████    ████████      ████  ██    ████████      ██\n#    ████    ██    ██      ██████    ████    ████████  ████    ██    ██    ████████  ██  ██\n#    ██    ████    ██  ██    ██      ████    ██  ██  ██████  ██████  ██████      ██      ██\n#    ██████  ██  ██  ██  ██  ██  ██  ██  ██  ██████  ██  ██  ██  ██  ██  ██  ██  ██████████\n```\n\nHowever, unlike regular QR Codes and Micro QR Codes, rMQR Codes has different sizes in width and height, which means that there can be multiple versions that are optimal in terms of capacity. rMQR Code versions are represented in the format of `R{height}x{width}` with the following available combinations.\n\n|     | 27  | 43  | 59  | 77  | 99  | 139 |\n| --- | :-: | :-: | :-: | :-: | :-: | :-: |\n| R7  |  -  |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |\n| R9  |  -  |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |\n| R11 |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |\n| R13 |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |\n| R15 |  -  |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |\n| R17 |  -  |  ✓  |  ✓  |  ✓  |  ✓  |  ✓  |\n\n`SizingStrategy` is used to prioritize one version than the other based on whether you want the symbol to be smaller in total area, width, or height. By default, it tries to balance the width and height, keeping the total area as small as possible.\n\nFor example, if you want to encode the same text but prioritizing smaller height rather than area:\n\n```crystal\nrmqr = Goban::RMQR.encode_string(\"Hello World!\", Goban::ECC::Level::Medium, Goban::RMQR::SizingStrategy::MinimizeHeight)\nputs rmqr.version.value\n# => R7x77\nrmqr.print_to_console\n# => ██████████████  ██  ██  ██  ██  ██  ██  ██  ██  ██████  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██████  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██████\n#    ██          ██  ██    ████████    ██████        ██  ██          ██  ████  ████  ██  ████        ██  ██  ████    ██        ██  ██    ██████          ██  ██\n#    ██  ██████  ██    ██████████      ██████    ██  ██████      ██████    ██████████████      ████  ████████████  ██    ████  ██  ██    ██  ██    ████████████\n#    ██  ██████  ██  ██████  ██  ██    ████        ████  ██  ██████████  ████  ██  ██  ██████  ██████    ██    ██████      ██        ████  ██████    ██      ██\n#    ██  ██████  ██  ████    ██          ████    ██████████          ██  ██      ██  ██████  ██        ████████    ██  ██  ██          ████████  ██████  ██  ██\n#    ██          ██  ██████  ██████  ██████    ████████  ██    ██  ██        ████  ██  ██    ██  ██  ██  ██  ██      ████████  ██  ██  ████    ████  ██      ██\n#    ██████████████  ██  ██  ██  ██  ██  ██  ██  ██  ██████  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██████  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██████████\n```\n\n## API Documentations\n\nThe API docs for the current master branch are available from the link below:\n\n[API docs](https://soya-daizu.github.io/goban/)\n\nYou might want to first look at the `Goban::QR` or one of the exporters (`Goban::PNGExporter` and `Goban::SVGExporters`) to understand how to use this library.\n\n## Contributing\n\n1. Fork it (<https://github.com/soya-daizu/goban/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [soya_daizu](https://github.com/soya-daizu) - creator and maintainer\n\n## Credits\n\n- [Optimal text segmentation for QR Codes](https://www.nayuki.io/page/optimal-text-segmentation-for-qr-codes)\n- [zxing/zxing](https://github.com/zxing/zxing)\n- [OUDON/rmqrcode-python](https://github.com/OUDON/rmqrcode-python)\n","program":{"html_id":"goban/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"goban","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"goban/Goban","path":"Goban.html","kind":"module","full_name":"Goban","name":"Goban","abstract":false,"locations":[{"filename":"src/goban.cr","line_number":3,"url":null},{"filename":"src/goban/abstract.cr","line_number":3,"url":null},{"filename":"src/goban/abstract/mask.cr","line_number":1,"url":null},{"filename":"src/goban/bitstream.cr","line_number":1,"url":null},{"filename":"src/goban/canvas.cr","line_number":1,"url":null},{"filename":"src/goban/exporters/png.cr","line_number":3,"url":null},{"filename":"src/goban/exporters/svg.cr","line_number":1,"url":null},{"filename":"src/goban/mqr.cr","line_number":5,"url":null},{"filename":"src/goban/qr.cr","line_number":5,"url":null},{"filename":"src/goban/rmqr.cr","line_number":5,"url":null},{"filename":"src/goban/segment.cr","line_number":3,"url":null},{"filename":"src/goban/shiftjis_table.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"UNICODE_SHIFTJIS_TABLE","name":"UNICODE_SHIFTJIS_TABLE","value":"{12288 => 33088, 12289 => 33089, 12290 => 33090, 65292 => 33091, 65294 => 33092, 12539 => 33093, 65306 => 33094, 65307 => 33095, 65311 => 33096, 65281 => 33097, 12443 => 33098, 12444 => 33099, 180 => 33100, 65344 => 33101, 168 => 33102, 65342 => 33103, 65507 => 33104, 65343 => 33105, 12541 => 33106, 12542 => 33107, 12445 => 33108, 12446 => 33109, 12291 => 33110, 20189 => 33111, 12293 => 33112, 12294 => 33113, 12295 => 33114, 12540 => 33115, 8213 => 33116, 8208 => 33117, 65295 => 33118, 92 => 33119, 12316 => 33120, 8214 => 33121, 65372 => 33122, 8230 => 33123, 8229 => 33124, 8216 => 33125, 8217 => 33126, 8220 => 33127, 8221 => 33128, 65288 => 33129, 65289 => 33130, 12308 => 33131, 12309 => 33132, 65339 => 33133, 65341 => 33134, 65371 => 33135, 65373 => 33136, 12296 => 33137, 12297 => 33138, 12298 => 33139, 12299 => 33140, 12300 => 33141, 12301 => 33142, 12302 => 33143, 12303 => 33144, 12304 => 33145, 12305 => 33146, 65291 => 33147, 8722 => 33148, 177 => 33149, 215 => 33150, 247 => 33152, 65309 => 33153, 8800 => 33154, 65308 => 33155, 65310 => 33156, 8806 => 33157, 8807 => 33158, 8734 => 33159, 8756 => 33160, 9794 => 33161, 9792 => 33162, 176 => 33163, 8242 => 33164, 8243 => 33165, 8451 => 33166, 65509 => 33167, 65284 => 33168, 162 => 33169, 163 => 33170, 65285 => 33171, 65283 => 33172, 65286 => 33173, 65290 => 33174, 65312 => 33175, 167 => 33176, 9734 => 33177, 9733 => 33178, 9675 => 33179, 9679 => 33180, 9678 => 33181, 9671 => 33182, 9670 => 33183, 9633 => 33184, 9632 => 33185, 9651 => 33186, 9650 => 33187, 9661 => 33188, 9660 => 33189, 8251 => 33190, 12306 => 33191, 8594 => 33192, 8592 => 33193, 8593 => 33194, 8595 => 33195, 12307 => 33196, 8712 => 33208, 8715 => 33209, 8838 => 33210, 8839 => 33211, 8834 => 33212, 8835 => 33213, 8746 => 33214, 8745 => 33215, 8743 => 33224, 8744 => 33225, 172 => 33226, 8658 => 33227, 8660 => 33228, 8704 => 33229, 8707 => 33230, 8736 => 33242, 8869 => 33243, 8978 => 33244, 8706 => 33245, 8711 => 33246, 8801 => 33247, 8786 => 33248, 8810 => 33249, 8811 => 33250, 8730 => 33251, 8765 => 33252, 8733 => 33253, 8757 => 33254, 8747 => 33255, 8748 => 33256, 8491 => 33264, 8240 => 33265, 9839 => 33266, 9837 => 33267, 9834 => 33268, 8224 => 33269, 8225 => 33270, 182 => 33271, 9711 => 33276, 65296 => 33359, 65297 => 33360, 65298 => 33361, 65299 => 33362, 65300 => 33363, 65301 => 33364, 65302 => 33365, 65303 => 33366, 65304 => 33367, 65305 => 33368, 65313 => 33376, 65314 => 33377, 65315 => 33378, 65316 => 33379, 65317 => 33380, 65318 => 33381, 65319 => 33382, 65320 => 33383, 65321 => 33384, 65322 => 33385, 65323 => 33386, 65324 => 33387, 65325 => 33388, 65326 => 33389, 65327 => 33390, 65328 => 33391, 65329 => 33392, 65330 => 33393, 65331 => 33394, 65332 => 33395, 65333 => 33396, 65334 => 33397, 65335 => 33398, 65336 => 33399, 65337 => 33400, 65338 => 33401, 65345 => 33409, 65346 => 33410, 65347 => 33411, 65348 => 33412, 65349 => 33413, 65350 => 33414, 65351 => 33415, 65352 => 33416, 65353 => 33417, 65354 => 33418, 65355 => 33419, 65356 => 33420, 65357 => 33421, 65358 => 33422, 65359 => 33423, 65360 => 33424, 65361 => 33425, 65362 => 33426, 65363 => 33427, 65364 => 33428, 65365 => 33429, 65366 => 33430, 65367 => 33431, 65368 => 33432, 65369 => 33433, 65370 => 33434, 12353 => 33439, 12354 => 33440, 12355 => 33441, 12356 => 33442, 12357 => 33443, 12358 => 33444, 12359 => 33445, 12360 => 33446, 12361 => 33447, 12362 => 33448, 12363 => 33449, 12364 => 33450, 12365 => 33451, 12366 => 33452, 12367 => 33453, 12368 => 33454, 12369 => 33455, 12370 => 33456, 12371 => 33457, 12372 => 33458, 12373 => 33459, 12374 => 33460, 12375 => 33461, 12376 => 33462, 12377 => 33463, 12378 => 33464, 12379 => 33465, 12380 => 33466, 12381 => 33467, 12382 => 33468, 12383 => 33469, 12384 => 33470, 12385 => 33471, 12386 => 33472, 12387 => 33473, 12388 => 33474, 12389 => 33475, 12390 => 33476, 12391 => 33477, 12392 => 33478, 12393 => 33479, 12394 => 33480, 12395 => 33481, 12396 => 33482, 12397 => 33483, 12398 => 33484, 12399 => 33485, 12400 => 33486, 12401 => 33487, 12402 => 33488, 12403 => 33489, 12404 => 33490, 12405 => 33491, 12406 => 33492, 12407 => 33493, 12408 => 33494, 12409 => 33495, 12410 => 33496, 12411 => 33497, 12412 => 33498, 12413 => 33499, 12414 => 33500, 12415 => 33501, 12416 => 33502, 12417 => 33503, 12418 => 33504, 12419 => 33505, 12420 => 33506, 12421 => 33507, 12422 => 33508, 12423 => 33509, 12424 => 33510, 12425 => 33511, 12426 => 33512, 12427 => 33513, 12428 => 33514, 12429 => 33515, 12430 => 33516, 12431 => 33517, 12432 => 33518, 12433 => 33519, 12434 => 33520, 12435 => 33521, 12449 => 33600, 12450 => 33601, 12451 => 33602, 12452 => 33603, 12453 => 33604, 12454 => 33605, 12455 => 33606, 12456 => 33607, 12457 => 33608, 12458 => 33609, 12459 => 33610, 12460 => 33611, 12461 => 33612, 12462 => 33613, 12463 => 33614, 12464 => 33615, 12465 => 33616, 12466 => 33617, 12467 => 33618, 12468 => 33619, 12469 => 33620, 12470 => 33621, 12471 => 33622, 12472 => 33623, 12473 => 33624, 12474 => 33625, 12475 => 33626, 12476 => 33627, 12477 => 33628, 12478 => 33629, 12479 => 33630, 12480 => 33631, 12481 => 33632, 12482 => 33633, 12483 => 33634, 12484 => 33635, 12485 => 33636, 12486 => 33637, 12487 => 33638, 12488 => 33639, 12489 => 33640, 12490 => 33641, 12491 => 33642, 12492 => 33643, 12493 => 33644, 12494 => 33645, 12495 => 33646, 12496 => 33647, 12497 => 33648, 12498 => 33649, 12499 => 33650, 12500 => 33651, 12501 => 33652, 12502 => 33653, 12503 => 33654, 12504 => 33655, 12505 => 33656, 12506 => 33657, 12507 => 33658, 12508 => 33659, 12509 => 33660, 12510 => 33661, 12511 => 33662, 12512 => 33664, 12513 => 33665, 12514 => 33666, 12515 => 33667, 12516 => 33668, 12517 => 33669, 12518 => 33670, 12519 => 33671, 12520 => 33672, 12521 => 33673, 12522 => 33674, 12523 => 33675, 12524 => 33676, 12525 => 33677, 12526 => 33678, 12527 => 33679, 12528 => 33680, 12529 => 33681, 12530 => 33682, 12531 => 33683, 12532 => 33684, 12533 => 33685, 12534 => 33686, 913 => 33695, 914 => 33696, 915 => 33697, 916 => 33698, 917 => 33699, 918 => 33700, 919 => 33701, 920 => 33702, 921 => 33703, 922 => 33704, 923 => 33705, 924 => 33706, 925 => 33707, 926 => 33708, 927 => 33709, 928 => 33710, 929 => 33711, 931 => 33712, 932 => 33713, 933 => 33714, 934 => 33715, 935 => 33716, 936 => 33717, 937 => 33718, 945 => 33727, 946 => 33728, 947 => 33729, 948 => 33730, 949 => 33731, 950 => 33732, 951 => 33733, 952 => 33734, 953 => 33735, 954 => 33736, 955 => 33737, 956 => 33738, 957 => 33739, 958 => 33740, 959 => 33741, 960 => 33742, 961 => 33743, 963 => 33744, 964 => 33745, 965 => 33746, 966 => 33747, 967 => 33748, 968 => 33749, 969 => 33750, 1040 => 33856, 1041 => 33857, 1042 => 33858, 1043 => 33859, 1044 => 33860, 1045 => 33861, 1025 => 33862, 1046 => 33863, 1047 => 33864, 1048 => 33865, 1049 => 33866, 1050 => 33867, 1051 => 33868, 1052 => 33869, 1053 => 33870, 1054 => 33871, 1055 => 33872, 1056 => 33873, 1057 => 33874, 1058 => 33875, 1059 => 33876, 1060 => 33877, 1061 => 33878, 1062 => 33879, 1063 => 33880, 1064 => 33881, 1065 => 33882, 1066 => 33883, 1067 => 33884, 1068 => 33885, 1069 => 33886, 1070 => 33887, 1071 => 33888, 1072 => 33904, 1073 => 33905, 1074 => 33906, 1075 => 33907, 1076 => 33908, 1077 => 33909, 1105 => 33910, 1078 => 33911, 1079 => 33912, 1080 => 33913, 1081 => 33914, 1082 => 33915, 1083 => 33916, 1084 => 33917, 1085 => 33918, 1086 => 33920, 1087 => 33921, 1088 => 33922, 1089 => 33923, 1090 => 33924, 1091 => 33925, 1092 => 33926, 1093 => 33927, 1094 => 33928, 1095 => 33929, 1096 => 33930, 1097 => 33931, 1098 => 33932, 1099 => 33933, 1100 => 33934, 1101 => 33935, 1102 => 33936, 1103 => 33937, 9472 => 33951, 9474 => 33952, 9484 => 33953, 9488 => 33954, 9496 => 33955, 9492 => 33956, 9500 => 33957, 9516 => 33958, 9508 => 33959, 9524 => 33960, 9532 => 33961, 9473 => 33962, 9475 => 33963, 9487 => 33964, 9491 => 33965, 9499 => 33966, 9495 => 33967, 9507 => 33968, 9523 => 33969, 9515 => 33970, 9531 => 33971, 9547 => 33972, 9504 => 33973, 9519 => 33974, 9512 => 33975, 9527 => 33976, 9535 => 33977, 9501 => 33978, 9520 => 33979, 9509 => 33980, 9528 => 33981, 9538 => 33982, 20124 => 34975, 21782 => 34976, 23043 => 34977, 38463 => 34978, 21696 => 34979, 24859 => 34980, 25384 => 34981, 23030 => 34982, 36898 => 34983, 33909 => 34984, 33564 => 34985, 31312 => 34986, 24746 => 34987, 25569 => 34988, 28197 => 34989, 26093 => 34990, 33894 => 34991, 33446 => 34992, 39925 => 34993, 26771 => 34994, 22311 => 34995, 26017 => 34996, 25201 => 34997, 23451 => 34998, 22992 => 34999, 34427 => 35000, 39156 => 35001, 32098 => 35002, 32190 => 35003, 39822 => 35004, 25110 => 35005, 31903 => 35006, 34999 => 35007, 23433 => 35008, 24245 => 35009, 25353 => 35010, 26263 => 35011, 26696 => 35012, 38343 => 35013, 38797 => 35014, 26447 => 35015, 20197 => 35016, 20234 => 35017, 20301 => 35018, 20381 => 35019, 20553 => 35020, 22258 => 35021, 22839 => 35022, 22996 => 35023, 23041 => 35024, 23561 => 35025, 24799 => 35026, 24847 => 35027, 24944 => 35028, 26131 => 35029, 26885 => 35030, 28858 => 35031, 30031 => 35032, 30064 => 35033, 31227 => 35034, 32173 => 35035, 32239 => 35036, 32963 => 35037, 33806 => 35038, 34915 => 35039, 35586 => 35040, 36949 => 35041, 36986 => 35042, 21307 => 35043, 20117 => 35044, 20133 => 35045, 22495 => 35046, 32946 => 35047, 37057 => 35048, 30959 => 35049, 19968 => 35050, 22769 => 35051, 28322 => 35052, 36920 => 35053, 31282 => 35054, 33576 => 35055, 33419 => 35056, 39983 => 35057, 20801 => 35058, 21360 => 35059, 21693 => 35060, 21729 => 35061, 22240 => 35062, 23035 => 35063, 24341 => 35064, 39154 => 35065, 28139 => 35066, 32996 => 35067, 34093 => 35068, 38498 => 35136, 38512 => 35137, 38560 => 35138, 38907 => 35139, 21515 => 35140, 21491 => 35141, 23431 => 35142, 28879 => 35143, 32701 => 35144, 36802 => 35145, 38632 => 35146, 21359 => 35147, 40284 => 35148, 31418 => 35149, 19985 => 35150, 30867 => 35151, 33276 => 35152, 28198 => 35153, 22040 => 35154, 21764 => 35155, 27421 => 35156, 34074 => 35157, 39995 => 35158, 23013 => 35159, 21417 => 35160, 28006 => 35161, 29916 => 35162, 38287 => 35163, 22082 => 35164, 20113 => 35165, 36939 => 35166, 38642 => 35167, 33615 => 35168, 39180 => 35169, 21473 => 35170, 21942 => 35171, 23344 => 35172, 24433 => 35173, 26144 => 35174, 26355 => 35175, 26628 => 35176, 27704 => 35177, 27891 => 35178, 27945 => 35179, 29787 => 35180, 30408 => 35181, 31310 => 35182, 38964 => 35183, 33521 => 35184, 34907 => 35185, 35424 => 35186, 37613 => 35187, 28082 => 35188, 30123 => 35189, 30410 => 35190, 39365 => 35191, 24742 => 35192, 35585 => 35193, 36234 => 35194, 38322 => 35195, 27022 => 35196, 21421 => 35197, 20870 => 35198, 22290 => 35200, 22576 => 35201, 22852 => 35202, 23476 => 35203, 24310 => 35204, 24616 => 35205, 25513 => 35206, 25588 => 35207, 27839 => 35208, 28436 => 35209, 28814 => 35210, 28948 => 35211, 29017 => 35212, 29141 => 35213, 29503 => 35214, 32257 => 35215, 33398 => 35216, 33489 => 35217, 34199 => 35218, 36960 => 35219, 37467 => 35220, 40219 => 35221, 22633 => 35222, 26044 => 35223, 27738 => 35224, 29989 => 35225, 20985 => 35226, 22830 => 35227, 22885 => 35228, 24448 => 35229, 24540 => 35230, 25276 => 35231, 26106 => 35232, 27178 => 35233, 27431 => 35234, 27572 => 35235, 29579 => 35236, 32705 => 35237, 35158 => 35238, 40236 => 35239, 40206 => 35240, 40644 => 35241, 23713 => 35242, 27798 => 35243, 33659 => 35244, 20740 => 35245, 23627 => 35246, 25014 => 35247, 33222 => 35248, 26742 => 35249, 29281 => 35250, 20057 => 35251, 20474 => 35252, 21368 => 35253, 24681 => 35254, 28201 => 35255, 31311 => 35256, 38899 => 35257, 19979 => 35258, 21270 => 35259, 20206 => 35260, 20309 => 35261, 20285 => 35262, 20385 => 35263, 20339 => 35264, 21152 => 35265, 21487 => 35266, 22025 => 35267, 22799 => 35268, 23233 => 35269, 23478 => 35270, 23521 => 35271, 31185 => 35272, 26247 => 35273, 26524 => 35274, 26550 => 35275, 27468 => 35276, 27827 => 35277, 28779 => 35278, 29634 => 35279, 31117 => 35280, 31166 => 35281, 31292 => 35282, 31623 => 35283, 33457 => 35284, 33499 => 35285, 33540 => 35286, 33655 => 35287, 33775 => 35288, 33747 => 35289, 34662 => 35290, 35506 => 35291, 22057 => 35292, 36008 => 35293, 36838 => 35294, 36942 => 35295, 38686 => 35296, 34442 => 35297, 20420 => 35298, 23784 => 35299, 25105 => 35300, 29273 => 35301, 30011 => 35302, 33253 => 35303, 33469 => 35304, 34558 => 35305, 36032 => 35306, 38597 => 35307, 39187 => 35308, 39381 => 35309, 20171 => 35310, 20250 => 35311, 35299 => 35312, 22238 => 35313, 22602 => 35314, 22730 => 35315, 24315 => 35316, 24555 => 35317, 24618 => 35318, 24724 => 35319, 24674 => 35320, 25040 => 35321, 25106 => 35322, 25296 => 35323, 25913 => 35324, 39745 => 35392, 26214 => 35393, 26800 => 35394, 28023 => 35395, 28784 => 35396, 30028 => 35397, 30342 => 35398, 32117 => 35399, 33445 => 35400, 34809 => 35401, 38283 => 35402, 38542 => 35403, 35997 => 35404, 20977 => 35405, 21182 => 35406, 22806 => 35407, 21683 => 35408, 23475 => 35409, 23830 => 35410, 24936 => 35411, 27010 => 35412, 28079 => 35413, 30861 => 35414, 33995 => 35415, 34903 => 35416, 35442 => 35417, 37799 => 35418, 39608 => 35419, 28012 => 35420, 39336 => 35421, 34521 => 35422, 22435 => 35423, 26623 => 35424, 34510 => 35425, 37390 => 35426, 21123 => 35427, 22151 => 35428, 21508 => 35429, 24275 => 35430, 25313 => 35431, 25785 => 35432, 26684 => 35433, 26680 => 35434, 27579 => 35435, 29554 => 35436, 30906 => 35437, 31339 => 35438, 35226 => 35439, 35282 => 35440, 36203 => 35441, 36611 => 35442, 37101 => 35443, 38307 => 35444, 38548 => 35445, 38761 => 35446, 23398 => 35447, 23731 => 35448, 27005 => 35449, 38989 => 35450, 38990 => 35451, 25499 => 35452, 31520 => 35453, 27179 => 35454, 27263 => 35456, 26806 => 35457, 39949 => 35458, 28511 => 35459, 21106 => 35460, 21917 => 35461, 24688 => 35462, 25324 => 35463, 27963 => 35464, 28167 => 35465, 28369 => 35466, 33883 => 35467, 35088 => 35468, 36676 => 35469, 19988 => 35470, 39993 => 35471, 21494 => 35472, 26907 => 35473, 27194 => 35474, 38788 => 35475, 26666 => 35476, 20828 => 35477, 31427 => 35478, 33970 => 35479, 37340 => 35480, 37772 => 35481, 22107 => 35482, 40232 => 35483, 26658 => 35484, 33541 => 35485, 33841 => 35486, 31909 => 35487, 21000 => 35488, 33477 => 35489, 29926 => 35490, 20094 => 35491, 20355 => 35492, 20896 => 35493, 23506 => 35494, 21002 => 35495, 21208 => 35496, 21223 => 35497, 24059 => 35498, 21914 => 35499, 22570 => 35500, 23014 => 35501, 23436 => 35502, 23448 => 35503, 23515 => 35504, 24178 => 35505, 24185 => 35506, 24739 => 35507, 24863 => 35508, 24931 => 35509, 25022 => 35510, 25563 => 35511, 25954 => 35512, 26577 => 35513, 26707 => 35514, 26874 => 35515, 27454 => 35516, 27475 => 35517, 27735 => 35518, 28450 => 35519, 28567 => 35520, 28485 => 35521, 29872 => 35522, 29976 => 35523, 30435 => 35524, 30475 => 35525, 31487 => 35526, 31649 => 35527, 31777 => 35528, 32233 => 35529, 32566 => 35530, 32752 => 35531, 32925 => 35532, 33382 => 35533, 33694 => 35534, 35251 => 35535, 35532 => 35536, 36011 => 35537, 36996 => 35538, 37969 => 35539, 38291 => 35540, 38289 => 35541, 38306 => 35542, 38501 => 35543, 38867 => 35544, 39208 => 35545, 33304 => 35546, 20024 => 35547, 21547 => 35548, 23736 => 35549, 24012 => 35550, 29609 => 35551, 30284 => 35552, 30524 => 35553, 23721 => 35554, 32747 => 35555, 36107 => 35556, 38593 => 35557, 38929 => 35558, 38996 => 35559, 39000 => 35560, 20225 => 35561, 20238 => 35562, 21361 => 35563, 21916 => 35564, 22120 => 35565, 22522 => 35566, 22855 => 35567, 23305 => 35568, 23492 => 35569, 23696 => 35570, 24076 => 35571, 24190 => 35572, 24524 => 35573, 25582 => 35574, 26426 => 35575, 26071 => 35576, 26082 => 35577, 26399 => 35578, 26827 => 35579, 26820 => 35580, 27231 => 35648, 24112 => 35649, 27589 => 35650, 27671 => 35651, 27773 => 35652, 30079 => 35653, 31048 => 35654, 23395 => 35655, 31232 => 35656, 32000 => 35657, 24509 => 35658, 35215 => 35659, 35352 => 35660, 36020 => 35661, 36215 => 35662, 36556 => 35663, 36637 => 35664, 39138 => 35665, 39438 => 35666, 39740 => 35667, 20096 => 35668, 20605 => 35669, 20736 => 35670, 22931 => 35671, 23452 => 35672, 25135 => 35673, 25216 => 35674, 25836 => 35675, 27450 => 35676, 29344 => 35677, 30097 => 35678, 31047 => 35679, 32681 => 35680, 34811 => 35681, 35516 => 35682, 35696 => 35683, 25516 => 35684, 33738 => 35685, 38816 => 35686, 21513 => 35687, 21507 => 35688, 21931 => 35689, 26708 => 35690, 27224 => 35691, 35440 => 35692, 30759 => 35693, 26485 => 35694, 40653 => 35695, 21364 => 35696, 23458 => 35697, 33050 => 35698, 34384 => 35699, 36870 => 35700, 19992 => 35701, 20037 => 35702, 20167 => 35703, 20241 => 35704, 21450 => 35705, 21560 => 35706, 23470 => 35707, 24339 => 35708, 24613 => 35709, 25937 => 35710, 26429 => 35712, 27714 => 35713, 27762 => 35714, 27875 => 35715, 28792 => 35716, 29699 => 35717, 31350 => 35718, 31406 => 35719, 31496 => 35720, 32026 => 35721, 31998 => 35722, 32102 => 35723, 26087 => 35724, 29275 => 35725, 21435 => 35726, 23621 => 35727, 24040 => 35728, 25298 => 35729, 25312 => 35730, 25369 => 35731, 28192 => 35732, 34394 => 35733, 35377 => 35734, 36317 => 35735, 37624 => 35736, 28417 => 35737, 31142 => 35738, 39770 => 35739, 20136 => 35740, 20139 => 35741, 20140 => 35742, 20379 => 35743, 20384 => 35744, 20689 => 35745, 20807 => 35746, 31478 => 35747, 20849 => 35748, 20982 => 35749, 21332 => 35750, 21281 => 35751, 21375 => 35752, 21483 => 35753, 21932 => 35754, 22659 => 35755, 23777 => 35756, 24375 => 35757, 24394 => 35758, 24623 => 35759, 24656 => 35760, 24685 => 35761, 25375 => 35762, 25945 => 35763, 27211 => 35764, 27841 => 35765, 29378 => 35766, 29421 => 35767, 30703 => 35768, 33016 => 35769, 33029 => 35770, 33288 => 35771, 34126 => 35772, 37111 => 35773, 37857 => 35774, 38911 => 35775, 39255 => 35776, 39514 => 35777, 20208 => 35778, 20957 => 35779, 23597 => 35780, 26241 => 35781, 26989 => 35782, 23616 => 35783, 26354 => 35784, 26997 => 35785, 29577 => 35786, 26704 => 35787, 31873 => 35788, 20677 => 35789, 21220 => 35790, 22343 => 35791, 24062 => 35792, 37670 => 35793, 26020 => 35794, 27427 => 35795, 27453 => 35796, 29748 => 35797, 31105 => 35798, 31165 => 35799, 31563 => 35800, 32202 => 35801, 33465 => 35802, 33740 => 35803, 34943 => 35804, 35167 => 35805, 35641 => 35806, 36817 => 35807, 37329 => 35808, 21535 => 35809, 37504 => 35810, 20061 => 35811, 20534 => 35812, 21477 => 35813, 21306 => 35814, 29399 => 35815, 29590 => 35816, 30697 => 35817, 33510 => 35818, 36527 => 35819, 39366 => 35820, 39368 => 35821, 39378 => 35822, 20855 => 35823, 24858 => 35824, 34398 => 35825, 21936 => 35826, 31354 => 35827, 20598 => 35828, 23507 => 35829, 36935 => 35830, 38533 => 35831, 20018 => 35832, 27355 => 35833, 37351 => 35834, 23633 => 35835, 23624 => 35836, 25496 => 35904, 31391 => 35905, 27795 => 35906, 38772 => 35907, 36705 => 35908, 31402 => 35909, 29066 => 35910, 38536 => 35911, 31874 => 35912, 26647 => 35913, 32368 => 35914, 26705 => 35915, 37740 => 35916, 21234 => 35917, 21531 => 35918, 34219 => 35919, 35347 => 35920, 32676 => 35921, 36557 => 35922, 37089 => 35923, 21350 => 35924, 34952 => 35925, 31041 => 35926, 20418 => 35927, 20670 => 35928, 21009 => 35929, 20804 => 35930, 21843 => 35931, 22317 => 35932, 29674 => 35933, 22411 => 35934, 22865 => 35935, 24418 => 35936, 24452 => 35937, 24693 => 35938, 24950 => 35939, 24935 => 35940, 25001 => 35941, 25522 => 35942, 25658 => 35943, 25964 => 35944, 26223 => 35945, 26690 => 35946, 28179 => 35947, 30054 => 35948, 31293 => 35949, 31995 => 35950, 32076 => 35951, 32153 => 35952, 32331 => 35953, 32619 => 35954, 33550 => 35955, 33610 => 35956, 34509 => 35957, 35336 => 35958, 35427 => 35959, 35686 => 35960, 36605 => 35961, 38938 => 35962, 40335 => 35963, 33464 => 35964, 36814 => 35965, 39912 => 35966, 21127 => 35968, 25119 => 35969, 25731 => 35970, 28608 => 35971, 38553 => 35972, 26689 => 35973, 20625 => 35974, 27424 => 35975, 27770 => 35976, 28500 => 35977, 31348 => 35978, 32080 => 35979, 34880 => 35980, 35363 => 35981, 26376 => 35982, 20214 => 35983, 20537 => 35984, 20518 => 35985, 20581 => 35986, 20860 => 35987, 21048 => 35988, 21091 => 35989, 21927 => 35990, 22287 => 35991, 22533 => 35992, 23244 => 35993, 24314 => 35994, 25010 => 35995, 25080 => 35996, 25331 => 35997, 25458 => 35998, 26908 => 35999, 27177 => 36000, 29309 => 36001, 29356 => 36002, 29486 => 36003, 30740 => 36004, 30831 => 36005, 32121 => 36006, 30476 => 36007, 32937 => 36008, 35211 => 36009, 35609 => 36010, 36066 => 36011, 36562 => 36012, 36963 => 36013, 37749 => 36014, 38522 => 36015, 38997 => 36016, 39443 => 36017, 40568 => 36018, 20803 => 36019, 21407 => 36020, 21427 => 36021, 24187 => 36022, 24358 => 36023, 28187 => 36024, 28304 => 36025, 29572 => 36026, 29694 => 36027, 32067 => 36028, 33335 => 36029, 35328 => 36030, 35578 => 36031, 38480 => 36032, 20046 => 36033, 20491 => 36034, 21476 => 36035, 21628 => 36036, 22266 => 36037, 22993 => 36038, 23396 => 36039, 24049 => 36040, 24235 => 36041, 24359 => 36042, 25144 => 36043, 25925 => 36044, 26543 => 36045, 28246 => 36046, 29392 => 36047, 31946 => 36048, 34996 => 36049, 32929 => 36050, 32993 => 36051, 33776 => 36052, 34382 => 36053, 35463 => 36054, 36328 => 36055, 37431 => 36056, 38599 => 36057, 39015 => 36058, 40723 => 36059, 20116 => 36060, 20114 => 36061, 20237 => 36062, 21320 => 36063, 21577 => 36064, 21566 => 36065, 23087 => 36066, 24460 => 36067, 24481 => 36068, 24735 => 36069, 26791 => 36070, 27278 => 36071, 29786 => 36072, 30849 => 36073, 35486 => 36074, 35492 => 36075, 35703 => 36076, 37264 => 36077, 20062 => 36078, 39881 => 36079, 20132 => 36080, 20348 => 36081, 20399 => 36082, 20505 => 36083, 20502 => 36084, 20809 => 36085, 20844 => 36086, 21151 => 36087, 21177 => 36088, 21246 => 36089, 21402 => 36090, 21475 => 36091, 21521 => 36092, 21518 => 36160, 21897 => 36161, 22353 => 36162, 22434 => 36163, 22909 => 36164, 23380 => 36165, 23389 => 36166, 23439 => 36167, 24037 => 36168, 24039 => 36169, 24055 => 36170, 24184 => 36171, 24195 => 36172, 24218 => 36173, 24247 => 36174, 24344 => 36175, 24658 => 36176, 24908 => 36177, 25239 => 36178, 25304 => 36179, 25511 => 36180, 25915 => 36181, 26114 => 36182, 26179 => 36183, 26356 => 36184, 26477 => 36185, 26657 => 36186, 26775 => 36187, 27083 => 36188, 27743 => 36189, 27946 => 36190, 28009 => 36191, 28207 => 36192, 28317 => 36193, 30002 => 36194, 30343 => 36195, 30828 => 36196, 31295 => 36197, 31968 => 36198, 32005 => 36199, 32024 => 36200, 32094 => 36201, 32177 => 36202, 32789 => 36203, 32771 => 36204, 32943 => 36205, 32945 => 36206, 33108 => 36207, 33167 => 36208, 33322 => 36209, 33618 => 36210, 34892 => 36211, 34913 => 36212, 35611 => 36213, 36002 => 36214, 36092 => 36215, 37066 => 36216, 37237 => 36217, 37489 => 36218, 30783 => 36219, 37628 => 36220, 38308 => 36221, 38477 => 36222, 38917 => 36224, 39321 => 36225, 39640 => 36226, 40251 => 36227, 21083 => 36228, 21163 => 36229, 21495 => 36230, 21512 => 36231, 22741 => 36232, 25335 => 36233, 28640 => 36234, 35946 => 36235, 36703 => 36236, 40633 => 36237, 20811 => 36238, 21051 => 36239, 21578 => 36240, 22269 => 36241, 31296 => 36242, 37239 => 36243, 40288 => 36244, 40658 => 36245, 29508 => 36246, 28425 => 36247, 33136 => 36248, 29969 => 36249, 24573 => 36250, 24794 => 36251, 39592 => 36252, 29403 => 36253, 36796 => 36254, 27492 => 36255, 38915 => 36256, 20170 => 36257, 22256 => 36258, 22372 => 36259, 22718 => 36260, 23130 => 36261, 24680 => 36262, 25031 => 36263, 26127 => 36264, 26118 => 36265, 26681 => 36266, 26801 => 36267, 28151 => 36268, 30165 => 36269, 32058 => 36270, 33390 => 36271, 39746 => 36272, 20123 => 36273, 20304 => 36274, 21449 => 36275, 21766 => 36276, 23919 => 36277, 24038 => 36278, 24046 => 36279, 26619 => 36280, 27801 => 36281, 29811 => 36282, 30722 => 36283, 35408 => 36284, 37782 => 36285, 35039 => 36286, 22352 => 36287, 24231 => 36288, 25387 => 36289, 20661 => 36290, 20652 => 36291, 20877 => 36292, 26368 => 36293, 21705 => 36294, 22622 => 36295, 22971 => 36296, 23472 => 36297, 24425 => 36298, 25165 => 36299, 25505 => 36300, 26685 => 36301, 27507 => 36302, 28168 => 36303, 28797 => 36304, 37319 => 36305, 29312 => 36306, 30741 => 36307, 30758 => 36308, 31085 => 36309, 25998 => 36310, 32048 => 36311, 33756 => 36312, 35009 => 36313, 36617 => 36314, 38555 => 36315, 21092 => 36316, 22312 => 36317, 26448 => 36318, 32618 => 36319, 36001 => 36320, 20916 => 36321, 22338 => 36322, 38442 => 36323, 22586 => 36324, 27018 => 36325, 32948 => 36326, 21682 => 36327, 23822 => 36328, 22524 => 36329, 30869 => 36330, 40442 => 36331, 20316 => 36332, 21066 => 36333, 21643 => 36334, 25662 => 36335, 26152 => 36336, 26388 => 36337, 26613 => 36338, 31364 => 36339, 31574 => 36340, 32034 => 36341, 37679 => 36342, 26716 => 36343, 39853 => 36344, 31545 => 36345, 21273 => 36346, 20874 => 36347, 21047 => 36348, 23519 => 36416, 25334 => 36417, 25774 => 36418, 25830 => 36419, 26413 => 36420, 27578 => 36421, 34217 => 36422, 38609 => 36423, 30352 => 36424, 39894 => 36425, 25420 => 36426, 37638 => 36427, 39851 => 36428, 30399 => 36429, 26194 => 36430, 19977 => 36431, 20632 => 36432, 21442 => 36433, 23665 => 36434, 24808 => 36435, 25746 => 36436, 25955 => 36437, 26719 => 36438, 29158 => 36439, 29642 => 36440, 29987 => 36441, 31639 => 36442, 32386 => 36443, 34453 => 36444, 35715 => 36445, 36059 => 36446, 37240 => 36447, 39184 => 36448, 26028 => 36449, 26283 => 36450, 27531 => 36451, 20181 => 36452, 20180 => 36453, 20282 => 36454, 20351 => 36455, 21050 => 36456, 21496 => 36457, 21490 => 36458, 21987 => 36459, 22235 => 36460, 22763 => 36461, 22987 => 36462, 22985 => 36463, 23039 => 36464, 23376 => 36465, 23629 => 36466, 24066 => 36467, 24107 => 36468, 24535 => 36469, 24605 => 36470, 25351 => 36471, 25903 => 36472, 23388 => 36473, 26031 => 36474, 26045 => 36475, 26088 => 36476, 26525 => 36477, 27490 => 36478, 27515 => 36480, 27663 => 36481, 29509 => 36482, 31049 => 36483, 31169 => 36484, 31992 => 36485, 32025 => 36486, 32043 => 36487, 32930 => 36488, 33026 => 36489, 33267 => 36490, 35222 => 36491, 35422 => 36492, 35433 => 36493, 35430 => 36494, 35468 => 36495, 35566 => 36496, 36039 => 36497, 36060 => 36498, 38604 => 36499, 39164 => 36500, 27503 => 36501, 20107 => 36502, 20284 => 36503, 20365 => 36504, 20816 => 36505, 23383 => 36506, 23546 => 36507, 24904 => 36508, 25345 => 36509, 26178 => 36510, 27425 => 36511, 28363 => 36512, 27835 => 36513, 29246 => 36514, 29885 => 36515, 30164 => 36516, 30913 => 36517, 31034 => 36518, 32780 => 36519, 32819 => 36520, 33258 => 36521, 33940 => 36522, 36766 => 36523, 27728 => 36524, 40575 => 36525, 24335 => 36526, 35672 => 36527, 40235 => 36528, 31482 => 36529, 36600 => 36530, 23437 => 36531, 38635 => 36532, 19971 => 36533, 21489 => 36534, 22519 => 36535, 22833 => 36536, 23241 => 36537, 23460 => 36538, 24713 => 36539, 28287 => 36540, 28422 => 36541, 30142 => 36542, 36074 => 36543, 23455 => 36544, 34048 => 36545, 31712 => 36546, 20594 => 36547, 26612 => 36548, 33437 => 36549, 23649 => 36550, 34122 => 36551, 32286 => 36552, 33294 => 36553, 20889 => 36554, 23556 => 36555, 25448 => 36556, 36198 => 36557, 26012 => 36558, 29038 => 36559, 31038 => 36560, 32023 => 36561, 32773 => 36562, 35613 => 36563, 36554 => 36564, 36974 => 36565, 34503 => 36566, 37034 => 36567, 20511 => 36568, 21242 => 36569, 23610 => 36570, 26451 => 36571, 28796 => 36572, 29237 => 36573, 37196 => 36574, 37320 => 36575, 37675 => 36576, 33509 => 36577, 23490 => 36578, 24369 => 36579, 24825 => 36580, 20027 => 36581, 21462 => 36582, 23432 => 36583, 25163 => 36584, 26417 => 36585, 27530 => 36586, 29417 => 36587, 29664 => 36588, 31278 => 36589, 33131 => 36590, 36259 => 36591, 37202 => 36592, 39318 => 36593, 20754 => 36594, 21463 => 36595, 21610 => 36596, 23551 => 36597, 25480 => 36598, 27193 => 36599, 32172 => 36600, 38656 => 36601, 22234 => 36602, 21454 => 36603, 21608 => 36604, 23447 => 36672, 23601 => 36673, 24030 => 36674, 20462 => 36675, 24833 => 36676, 25342 => 36677, 27954 => 36678, 31168 => 36679, 31179 => 36680, 32066 => 36681, 32333 => 36682, 32722 => 36683, 33261 => 36684, 33311 => 36685, 33936 => 36686, 34886 => 36687, 35186 => 36688, 35728 => 36689, 36468 => 36690, 36655 => 36691, 36913 => 36692, 37195 => 36693, 37228 => 36694, 38598 => 36695, 37276 => 36696, 20160 => 36697, 20303 => 36698, 20805 => 36699, 21313 => 36700, 24467 => 36701, 25102 => 36702, 26580 => 36703, 27713 => 36704, 28171 => 36705, 29539 => 36706, 32294 => 36707, 37325 => 36708, 37507 => 36709, 21460 => 36710, 22809 => 36711, 23487 => 36712, 28113 => 36713, 31069 => 36714, 32302 => 36715, 31899 => 36716, 22654 => 36717, 29087 => 36718, 20986 => 36719, 34899 => 36720, 36848 => 36721, 20426 => 36722, 23803 => 36723, 26149 => 36724, 30636 => 36725, 31459 => 36726, 33308 => 36727, 39423 => 36728, 20934 => 36729, 24490 => 36730, 26092 => 36731, 26991 => 36732, 27529 => 36733, 28147 => 36734, 28310 => 36736, 28516 => 36737, 30462 => 36738, 32020 => 36739, 24033 => 36740, 36981 => 36741, 37255 => 36742, 38918 => 36743, 20966 => 36744, 21021 => 36745, 25152 => 36746, 26257 => 36747, 26329 => 36748, 28186 => 36749, 24246 => 36750, 32210 => 36751, 32626 => 36752, 26360 => 36753, 34223 => 36754, 34295 => 36755, 35576 => 36756, 21161 => 36757, 21465 => 36758, 22899 => 36759, 24207 => 36760, 24464 => 36761, 24661 => 36762, 37604 => 36763, 38500 => 36764, 20663 => 36765, 20767 => 36766, 21213 => 36767, 21280 => 36768, 21319 => 36769, 21484 => 36770, 21736 => 36771, 21830 => 36772, 21809 => 36773, 22039 => 36774, 22888 => 36775, 22974 => 36776, 23100 => 36777, 23477 => 36778, 23558 => 36779, 23567 => 36780, 23569 => 36781, 23578 => 36782, 24196 => 36783, 24202 => 36784, 24288 => 36785, 24432 => 36786, 25215 => 36787, 25220 => 36788, 25307 => 36789, 25484 => 36790, 25463 => 36791, 26119 => 36792, 26124 => 36793, 26157 => 36794, 26230 => 36795, 26494 => 36796, 26786 => 36797, 27167 => 36798, 27189 => 36799, 27836 => 36800, 28040 => 36801, 28169 => 36802, 28248 => 36803, 28988 => 36804, 28966 => 36805, 29031 => 36806, 30151 => 36807, 30465 => 36808, 30813 => 36809, 30977 => 36810, 31077 => 36811, 31216 => 36812, 31456 => 36813, 31505 => 36814, 31911 => 36815, 32057 => 36816, 32918 => 36817, 33750 => 36818, 33931 => 36819, 34121 => 36820, 34909 => 36821, 35059 => 36822, 35359 => 36823, 35388 => 36824, 35412 => 36825, 35443 => 36826, 35937 => 36827, 36062 => 36828, 37284 => 36829, 37478 => 36830, 37758 => 36831, 37912 => 36832, 38556 => 36833, 38808 => 36834, 19978 => 36835, 19976 => 36836, 19998 => 36837, 20055 => 36838, 20887 => 36839, 21104 => 36840, 22478 => 36841, 22580 => 36842, 22732 => 36843, 23330 => 36844, 24120 => 36845, 24773 => 36846, 25854 => 36847, 26465 => 36848, 26454 => 36849, 27972 => 36850, 29366 => 36851, 30067 => 36852, 31331 => 36853, 33976 => 36854, 35698 => 36855, 37304 => 36856, 37664 => 36857, 22065 => 36858, 22516 => 36859, 39166 => 36860, 25325 => 36928, 26893 => 36929, 27542 => 36930, 29165 => 36931, 32340 => 36932, 32887 => 36933, 33394 => 36934, 35302 => 36935, 39135 => 36936, 34645 => 36937, 36785 => 36938, 23611 => 36939, 20280 => 36940, 20449 => 36941, 20405 => 36942, 21767 => 36943, 23072 => 36944, 23517 => 36945, 23529 => 36946, 24515 => 36947, 24910 => 36948, 25391 => 36949, 26032 => 36950, 26187 => 36951, 26862 => 36952, 27035 => 36953, 28024 => 36954, 28145 => 36955, 30003 => 36956, 30137 => 36957, 30495 => 36958, 31070 => 36959, 31206 => 36960, 32051 => 36961, 33251 => 36962, 33455 => 36963, 34218 => 36964, 35242 => 36965, 35386 => 36966, 36523 => 36967, 36763 => 36968, 36914 => 36969, 37341 => 36970, 38663 => 36971, 20154 => 36972, 20161 => 36973, 20995 => 36974, 22645 => 36975, 22764 => 36976, 23563 => 36977, 29978 => 36978, 23613 => 36979, 33102 => 36980, 35338 => 36981, 36805 => 36982, 38499 => 36983, 38765 => 36984, 31525 => 36985, 35535 => 36986, 38920 => 36987, 37218 => 36988, 22259 => 36989, 21416 => 36990, 36887 => 36992, 21561 => 36993, 22402 => 36994, 24101 => 36995, 25512 => 36996, 27700 => 36997, 28810 => 36998, 30561 => 36999, 31883 => 37000, 32736 => 37001, 34928 => 37002, 36930 => 37003, 37204 => 37004, 37648 => 37005, 37656 => 37006, 38543 => 37007, 29790 => 37008, 39620 => 37009, 23815 => 37010, 23913 => 37011, 25968 => 37012, 26530 => 37013, 36264 => 37014, 38619 => 37015, 25454 => 37016, 26441 => 37017, 26905 => 37018, 33733 => 37019, 38935 => 37020, 38592 => 37021, 35070 => 37022, 28548 => 37023, 25722 => 37024, 23544 => 37025, 19990 => 37026, 28716 => 37027, 30045 => 37028, 26159 => 37029, 20932 => 37030, 21046 => 37031, 21218 => 37032, 22995 => 37033, 24449 => 37034, 24615 => 37035, 25104 => 37036, 25919 => 37037, 25972 => 37038, 26143 => 37039, 26228 => 37040, 26866 => 37041, 26646 => 37042, 27491 => 37043, 28165 => 37044, 29298 => 37045, 29983 => 37046, 30427 => 37047, 31934 => 37048, 32854 => 37049, 22768 => 37050, 35069 => 37051, 35199 => 37052, 35488 => 37053, 35475 => 37054, 35531 => 37055, 36893 => 37056, 37266 => 37057, 38738 => 37058, 38745 => 37059, 25993 => 37060, 31246 => 37061, 33030 => 37062, 38587 => 37063, 24109 => 37064, 24796 => 37065, 25114 => 37066, 26021 => 37067, 26132 => 37068, 26512 => 37069, 30707 => 37070, 31309 => 37071, 31821 => 37072, 32318 => 37073, 33034 => 37074, 36012 => 37075, 36196 => 37076, 36321 => 37077, 36447 => 37078, 30889 => 37079, 20999 => 37080, 25305 => 37081, 25509 => 37082, 25666 => 37083, 25240 => 37084, 35373 => 37085, 31363 => 37086, 31680 => 37087, 35500 => 37088, 38634 => 37089, 32118 => 37090, 33292 => 37091, 34633 => 37092, 20185 => 37093, 20808 => 37094, 21315 => 37095, 21344 => 37096, 23459 => 37097, 23554 => 37098, 23574 => 37099, 24029 => 37100, 25126 => 37101, 25159 => 37102, 25776 => 37103, 26643 => 37104, 26676 => 37105, 27849 => 37106, 27973 => 37107, 27927 => 37108, 26579 => 37109, 28508 => 37110, 29006 => 37111, 29053 => 37112, 26059 => 37113, 31359 => 37114, 31661 => 37115, 32218 => 37116, 32330 => 37184, 32680 => 37185, 33146 => 37186, 33307 => 37187, 33337 => 37188, 34214 => 37189, 35438 => 37190, 36046 => 37191, 36341 => 37192, 36984 => 37193, 36983 => 37194, 37549 => 37195, 37521 => 37196, 38275 => 37197, 39854 => 37198, 21069 => 37199, 21892 => 37200, 28472 => 37201, 28982 => 37202, 20840 => 37203, 31109 => 37204, 32341 => 37205, 33203 => 37206, 31950 => 37207, 22092 => 37208, 22609 => 37209, 23720 => 37210, 25514 => 37211, 26366 => 37212, 26365 => 37213, 26970 => 37214, 29401 => 37215, 30095 => 37216, 30094 => 37217, 30990 => 37218, 31062 => 37219, 31199 => 37220, 31895 => 37221, 32032 => 37222, 32068 => 37223, 34311 => 37224, 35380 => 37225, 38459 => 37226, 36961 => 37227, 40736 => 37228, 20711 => 37229, 21109 => 37230, 21452 => 37231, 21474 => 37232, 20489 => 37233, 21930 => 37234, 22766 => 37235, 22863 => 37236, 29245 => 37237, 23435 => 37238, 23652 => 37239, 21277 => 37240, 24803 => 37241, 24819 => 37242, 25436 => 37243, 25475 => 37244, 25407 => 37245, 25531 => 37246, 25805 => 37248, 26089 => 37249, 26361 => 37250, 24035 => 37251, 27085 => 37252, 27133 => 37253, 28437 => 37254, 29157 => 37255, 20105 => 37256, 30185 => 37257, 30456 => 37258, 31379 => 37259, 31967 => 37260, 32207 => 37261, 32156 => 37262, 32865 => 37263, 33609 => 37264, 33624 => 37265, 33900 => 37266, 33980 => 37267, 34299 => 37268, 35013 => 37269, 36208 => 37270, 36865 => 37271, 36973 => 37272, 37783 => 37273, 38684 => 37274, 39442 => 37275, 20687 => 37276, 22679 => 37277, 24974 => 37278, 33235 => 37279, 34101 => 37280, 36104 => 37281, 36896 => 37282, 20419 => 37283, 20596 => 37284, 21063 => 37285, 21363 => 37286, 24687 => 37287, 25417 => 37288, 26463 => 37289, 28204 => 37290, 36275 => 37291, 36895 => 37292, 20439 => 37293, 23646 => 37294, 36042 => 37295, 26063 => 37296, 32154 => 37297, 21330 => 37298, 34966 => 37299, 20854 => 37300, 25539 => 37301, 23384 => 37302, 23403 => 37303, 23562 => 37304, 25613 => 37305, 26449 => 37306, 36956 => 37307, 20182 => 37308, 22810 => 37309, 22826 => 37310, 27760 => 37311, 35409 => 37312, 21822 => 37313, 22549 => 37314, 22949 => 37315, 24816 => 37316, 25171 => 37317, 26561 => 37318, 33333 => 37319, 26965 => 37320, 38464 => 37321, 39364 => 37322, 39464 => 37323, 20307 => 37324, 22534 => 37325, 23550 => 37326, 32784 => 37327, 23729 => 37328, 24111 => 37329, 24453 => 37330, 24608 => 37331, 24907 => 37332, 25140 => 37333, 26367 => 37334, 27888 => 37335, 28382 => 37336, 32974 => 37337, 33151 => 37338, 33492 => 37339, 34955 => 37340, 36024 => 37341, 36864 => 37342, 36910 => 37343, 38538 => 37344, 40667 => 37345, 39899 => 37346, 20195 => 37347, 21488 => 37348, 22823 => 37349, 31532 => 37350, 37261 => 37351, 38988 => 37352, 40441 => 37353, 28381 => 37354, 28711 => 37355, 21331 => 37356, 21828 => 37357, 23429 => 37358, 25176 => 37359, 25246 => 37360, 25299 => 37361, 27810 => 37362, 28655 => 37363, 29730 => 37364, 35351 => 37365, 37944 => 37366, 28609 => 37367, 35582 => 37368, 33592 => 37369, 20967 => 37370, 34552 => 37371, 21482 => 37372, 21481 => 37440, 20294 => 37441, 36948 => 37442, 36784 => 37443, 22890 => 37444, 33073 => 37445, 24061 => 37446, 31466 => 37447, 36799 => 37448, 26842 => 37449, 35895 => 37450, 29432 => 37451, 40008 => 37452, 27197 => 37453, 35504 => 37454, 20025 => 37455, 21336 => 37456, 22022 => 37457, 22374 => 37458, 25285 => 37459, 25506 => 37460, 26086 => 37461, 27470 => 37462, 28129 => 37463, 28251 => 37464, 28845 => 37465, 30701 => 37466, 31471 => 37467, 31658 => 37468, 32187 => 37469, 32829 => 37470, 32966 => 37471, 34507 => 37472, 35477 => 37473, 37723 => 37474, 22243 => 37475, 22727 => 37476, 24382 => 37477, 26029 => 37478, 26262 => 37479, 27264 => 37480, 27573 => 37481, 30007 => 37482, 35527 => 37483, 20516 => 37484, 30693 => 37485, 22320 => 37486, 24347 => 37487, 24677 => 37488, 26234 => 37489, 27744 => 37490, 30196 => 37491, 31258 => 37492, 32622 => 37493, 33268 => 37494, 34584 => 37495, 36933 => 37496, 39347 => 37497, 31689 => 37498, 30044 => 37499, 31481 => 37500, 31569 => 37501, 33988 => 37502, 36880 => 37504, 31209 => 37505, 31378 => 37506, 33590 => 37507, 23265 => 37508, 30528 => 37509, 20013 => 37510, 20210 => 37511, 23449 => 37512, 24544 => 37513, 25277 => 37514, 26172 => 37515, 26609 => 37516, 27880 => 37517, 34411 => 37518, 34935 => 37519, 35387 => 37520, 37198 => 37521, 37619 => 37522, 39376 => 37523, 27159 => 37524, 28710 => 37525, 29482 => 37526, 33511 => 37527, 33879 => 37528, 36015 => 37529, 19969 => 37530, 20806 => 37531, 20939 => 37532, 21899 => 37533, 23541 => 37534, 24086 => 37535, 24115 => 37536, 24193 => 37537, 24340 => 37538, 24373 => 37539, 24427 => 37540, 24500 => 37541, 25074 => 37542, 25361 => 37543, 26274 => 37544, 26397 => 37545, 28526 => 37546, 29266 => 37547, 30010 => 37548, 30522 => 37549, 32884 => 37550, 33081 => 37551, 33144 => 37552, 34678 => 37553, 35519 => 37554, 35548 => 37555, 36229 => 37556, 36339 => 37557, 37530 => 37558, 38263 => 37559, 38914 => 37560, 40165 => 37561, 21189 => 37562, 25431 => 37563, 30452 => 37564, 26389 => 37565, 27784 => 37566, 29645 => 37567, 36035 => 37568, 37806 => 37569, 38515 => 37570, 27941 => 37571, 22684 => 37572, 26894 => 37573, 27084 => 37574, 36861 => 37575, 37786 => 37576, 30171 => 37577, 36890 => 37578, 22618 => 37579, 26626 => 37580, 25524 => 37581, 27131 => 37582, 20291 => 37583, 28460 => 37584, 26584 => 37585, 36795 => 37586, 34086 => 37587, 32180 => 37588, 37716 => 37589, 26943 => 37590, 28528 => 37591, 22378 => 37592, 22775 => 37593, 23340 => 37594, 32044 => 37595, 29226 => 37596, 21514 => 37597, 37347 => 37598, 40372 => 37599, 20141 => 37600, 20302 => 37601, 20572 => 37602, 20597 => 37603, 21059 => 37604, 35998 => 37605, 21576 => 37606, 22564 => 37607, 23450 => 37608, 24093 => 37609, 24213 => 37610, 24237 => 37611, 24311 => 37612, 24351 => 37613, 24716 => 37614, 25269 => 37615, 25402 => 37616, 25552 => 37617, 26799 => 37618, 27712 => 37619, 30855 => 37620, 31118 => 37621, 31243 => 37622, 32224 => 37623, 33351 => 37624, 35330 => 37625, 35558 => 37626, 36420 => 37627, 36883 => 37628, 37048 => 37696, 37165 => 37697, 37336 => 37698, 40718 => 37699, 27877 => 37700, 25688 => 37701, 25826 => 37702, 25973 => 37703, 28404 => 37704, 30340 => 37705, 31515 => 37706, 36969 => 37707, 37841 => 37708, 28346 => 37709, 21746 => 37710, 24505 => 37711, 25764 => 37712, 36685 => 37713, 36845 => 37714, 37444 => 37715, 20856 => 37716, 22635 => 37717, 22825 => 37718, 23637 => 37719, 24215 => 37720, 28155 => 37721, 32399 => 37722, 29980 => 37723, 36028 => 37724, 36578 => 37725, 39003 => 37726, 28857 => 37727, 20253 => 37728, 27583 => 37729, 28593 => 37730, 30000 => 37731, 38651 => 37732, 20814 => 37733, 21520 => 37734, 22581 => 37735, 22615 => 37736, 22956 => 37737, 23648 => 37738, 24466 => 37739, 26007 => 37740, 26460 => 37741, 28193 => 37742, 30331 => 37743, 33759 => 37744, 36077 => 37745, 36884 => 37746, 37117 => 37747, 37709 => 37748, 30757 => 37749, 30778 => 37750, 21162 => 37751, 24230 => 37752, 22303 => 37753, 22900 => 37754, 24594 => 37755, 20498 => 37756, 20826 => 37757, 20908 => 37758, 20941 => 37760, 20992 => 37761, 21776 => 37762, 22612 => 37763, 22616 => 37764, 22871 => 37765, 23445 => 37766, 23798 => 37767, 23947 => 37768, 24764 => 37769, 25237 => 37770, 25645 => 37771, 26481 => 37772, 26691 => 37773, 26812 => 37774, 26847 => 37775, 30423 => 37776, 28120 => 37777, 28271 => 37778, 28059 => 37779, 28783 => 37780, 29128 => 37781, 24403 => 37782, 30168 => 37783, 31095 => 37784, 31561 => 37785, 31572 => 37786, 31570 => 37787, 31958 => 37788, 32113 => 37789, 21040 => 37790, 33891 => 37791, 34153 => 37792, 34276 => 37793, 35342 => 37794, 35588 => 37795, 35910 => 37796, 36367 => 37797, 36867 => 37798, 36879 => 37799, 37913 => 37800, 38518 => 37801, 38957 => 37802, 39472 => 37803, 38360 => 37804, 20685 => 37805, 21205 => 37806, 21516 => 37807, 22530 => 37808, 23566 => 37809, 24999 => 37810, 25758 => 37811, 27934 => 37812, 30643 => 37813, 31461 => 37814, 33012 => 37815, 33796 => 37816, 36947 => 37817, 37509 => 37818, 23776 => 37819, 40199 => 37820, 21311 => 37821, 24471 => 37822, 24499 => 37823, 28060 => 37824, 29305 => 37825, 30563 => 37826, 31167 => 37827, 31716 => 37828, 27602 => 37829, 29420 => 37830, 35501 => 37831, 26627 => 37832, 27233 => 37833, 20984 => 37834, 31361 => 37835, 26932 => 37836, 23626 => 37837, 40182 => 37838, 33515 => 37839, 23493 => 37840, 37193 => 37841, 28702 => 37842, 22136 => 37843, 23663 => 37844, 24775 => 37845, 25958 => 37846, 27788 => 37847, 35930 => 37848, 36929 => 37849, 38931 => 37850, 21585 => 37851, 26311 => 37852, 37389 => 37853, 22856 => 37854, 37027 => 37855, 20869 => 37856, 20045 => 37857, 20970 => 37858, 34201 => 37859, 35598 => 37860, 28760 => 37861, 25466 => 37862, 37707 => 37863, 26978 => 37864, 39348 => 37865, 32260 => 37866, 30071 => 37867, 21335 => 37868, 26976 => 37869, 36575 => 37870, 38627 => 37871, 27741 => 37872, 20108 => 37873, 23612 => 37874, 24336 => 37875, 36841 => 37876, 21250 => 37877, 36049 => 37878, 32905 => 37879, 34425 => 37880, 24319 => 37881, 26085 => 37882, 20083 => 37883, 20837 => 37884, 22914 => 37952, 23615 => 37953, 38894 => 37954, 20219 => 37955, 22922 => 37956, 24525 => 37957, 35469 => 37958, 28641 => 37959, 31152 => 37960, 31074 => 37961, 23527 => 37962, 33905 => 37963, 29483 => 37964, 29105 => 37965, 24180 => 37966, 24565 => 37967, 25467 => 37968, 25754 => 37969, 29123 => 37970, 31896 => 37971, 20035 => 37972, 24316 => 37973, 20043 => 37974, 22492 => 37975, 22178 => 37976, 24745 => 37977, 28611 => 37978, 32013 => 37979, 33021 => 37980, 33075 => 37981, 33215 => 37982, 36786 => 37983, 35223 => 37984, 34468 => 37985, 24052 => 37986, 25226 => 37987, 25773 => 37988, 35207 => 37989, 26487 => 37990, 27874 => 37991, 27966 => 37992, 29750 => 37993, 30772 => 37994, 23110 => 37995, 32629 => 37996, 33453 => 37997, 39340 => 37998, 20467 => 37999, 24259 => 38000, 25309 => 38001, 25490 => 38002, 25943 => 38003, 26479 => 38004, 30403 => 38005, 29260 => 38006, 32972 => 38007, 32954 => 38008, 36649 => 38009, 37197 => 38010, 20493 => 38011, 22521 => 38012, 23186 => 38013, 26757 => 38014, 26995 => 38016, 29028 => 38017, 29437 => 38018, 36023 => 38019, 22770 => 38020, 36064 => 38021, 38506 => 38022, 36889 => 38023, 34687 => 38024, 31204 => 38025, 30695 => 38026, 33833 => 38027, 20271 => 38028, 21093 => 38029, 21338 => 38030, 25293 => 38031, 26575 => 38032, 27850 => 38033, 30333 => 38034, 31636 => 38035, 31893 => 38036, 33334 => 38037, 34180 => 38038, 36843 => 38039, 26333 => 38040, 28448 => 38041, 29190 => 38042, 32283 => 38043, 33707 => 38044, 39361 => 38045, 40614 => 38046, 20989 => 38047, 31665 => 38048, 30834 => 38049, 31672 => 38050, 32903 => 38051, 31560 => 38052, 27368 => 38053, 24161 => 38054, 32908 => 38055, 30033 => 38056, 30048 => 38057, 20843 => 38058, 37474 => 38059, 28300 => 38060, 30330 => 38061, 37271 => 38062, 39658 => 38063, 20240 => 38064, 32624 => 38065, 25244 => 38066, 31567 => 38067, 38309 => 38068, 40169 => 38069, 22138 => 38070, 22617 => 38071, 34532 => 38072, 38588 => 38073, 20276 => 38074, 21028 => 38075, 21322 => 38076, 21453 => 38077, 21467 => 38078, 24070 => 38079, 25644 => 38080, 26001 => 38081, 26495 => 38082, 27710 => 38083, 27726 => 38084, 29256 => 38085, 29359 => 38086, 29677 => 38087, 30036 => 38088, 32321 => 38089, 33324 => 38090, 34281 => 38091, 36009 => 38092, 31684 => 38093, 37318 => 38094, 29033 => 38095, 38930 => 38096, 39151 => 38097, 25405 => 38098, 26217 => 38099, 30058 => 38100, 30436 => 38101, 30928 => 38102, 34115 => 38103, 34542 => 38104, 21290 => 38105, 21329 => 38106, 21542 => 38107, 22915 => 38108, 24199 => 38109, 24444 => 38110, 24754 => 38111, 25161 => 38112, 25209 => 38113, 25259 => 38114, 26000 => 38115, 27604 => 38116, 27852 => 38117, 30130 => 38118, 30382 => 38119, 30865 => 38120, 31192 => 38121, 32203 => 38122, 32631 => 38123, 32933 => 38124, 34987 => 38125, 35513 => 38126, 36027 => 38127, 36991 => 38128, 38750 => 38129, 39131 => 38130, 27147 => 38131, 31800 => 38132, 20633 => 38133, 23614 => 38134, 24494 => 38135, 26503 => 38136, 27608 => 38137, 29749 => 38138, 30473 => 38139, 32654 => 38140, 40763 => 38208, 26570 => 38209, 31255 => 38210, 21305 => 38211, 30091 => 38212, 39661 => 38213, 24422 => 38214, 33181 => 38215, 33777 => 38216, 32920 => 38217, 24380 => 38218, 24517 => 38219, 30050 => 38220, 31558 => 38221, 36924 => 38222, 26727 => 38223, 23019 => 38224, 23195 => 38225, 32016 => 38226, 30334 => 38227, 35628 => 38228, 20469 => 38229, 24426 => 38230, 27161 => 38231, 27703 => 38232, 28418 => 38233, 29922 => 38234, 31080 => 38235, 34920 => 38236, 35413 => 38237, 35961 => 38238, 24287 => 38239, 25551 => 38240, 30149 => 38241, 31186 => 38242, 33495 => 38243, 37672 => 38244, 37618 => 38245, 33948 => 38246, 34541 => 38247, 39981 => 38248, 21697 => 38249, 24428 => 38250, 25996 => 38251, 27996 => 38252, 28693 => 38253, 36007 => 38254, 36051 => 38255, 38971 => 38256, 25935 => 38257, 29942 => 38258, 19981 => 38259, 20184 => 38260, 22496 => 38261, 22827 => 38262, 23142 => 38263, 23500 => 38264, 20904 => 38265, 24067 => 38266, 24220 => 38267, 24598 => 38268, 25206 => 38269, 25975 => 38270, 26023 => 38272, 26222 => 38273, 28014 => 38274, 29238 => 38275, 31526 => 38276, 33104 => 38277, 33178 => 38278, 33433 => 38279, 35676 => 38280, 36000 => 38281, 36070 => 38282, 36212 => 38283, 38428 => 38284, 38468 => 38285, 20398 => 38286, 25771 => 38287, 27494 => 38288, 33310 => 38289, 33889 => 38290, 34154 => 38291, 37096 => 38292, 23553 => 38293, 26963 => 38294, 39080 => 38295, 33914 => 38296, 34135 => 38297, 20239 => 38298, 21103 => 38299, 24489 => 38300, 24133 => 38301, 26381 => 38302, 31119 => 38303, 33145 => 38304, 35079 => 38305, 35206 => 38306, 28149 => 38307, 24343 => 38308, 25173 => 38309, 27832 => 38310, 20175 => 38311, 29289 => 38312, 39826 => 38313, 20998 => 38314, 21563 => 38315, 22132 => 38316, 22707 => 38317, 24996 => 38318, 25198 => 38319, 28954 => 38320, 22894 => 38321, 31881 => 38322, 31966 => 38323, 32027 => 38324, 38640 => 38325, 25991 => 38326, 32862 => 38327, 19993 => 38328, 20341 => 38329, 20853 => 38330, 22592 => 38331, 24163 => 38332, 24179 => 38333, 24330 => 38334, 26564 => 38335, 20006 => 38336, 34109 => 38337, 38281 => 38338, 38491 => 38339, 31859 => 38340, 38913 => 38341, 20731 => 38342, 22721 => 38343, 30294 => 38344, 30887 => 38345, 21029 => 38346, 30629 => 38347, 34065 => 38348, 31622 => 38349, 20559 => 38350, 22793 => 38351, 29255 => 38352, 31687 => 38353, 32232 => 38354, 36794 => 38355, 36820 => 38356, 36941 => 38357, 20415 => 38358, 21193 => 38359, 23081 => 38360, 24321 => 38361, 38829 => 38362, 20445 => 38363, 33303 => 38364, 37610 => 38365, 22275 => 38366, 25429 => 38367, 27497 => 38368, 29995 => 38369, 35036 => 38370, 36628 => 38371, 31298 => 38372, 21215 => 38373, 22675 => 38374, 24917 => 38375, 25098 => 38376, 26286 => 38377, 27597 => 38378, 31807 => 38379, 33769 => 38380, 20515 => 38381, 20472 => 38382, 21253 => 38383, 21574 => 38384, 22577 => 38385, 22857 => 38386, 23453 => 38387, 23792 => 38388, 23791 => 38389, 23849 => 38390, 24214 => 38391, 25265 => 38392, 25447 => 38393, 25918 => 38394, 26041 => 38395, 26379 => 38396, 27861 => 38464, 27873 => 38465, 28921 => 38466, 30770 => 38467, 32299 => 38468, 32990 => 38469, 33459 => 38470, 33804 => 38471, 34028 => 38472, 34562 => 38473, 35090 => 38474, 35370 => 38475, 35914 => 38476, 37030 => 38477, 37586 => 38478, 39165 => 38479, 40179 => 38480, 40300 => 38481, 20047 => 38482, 20129 => 38483, 20621 => 38484, 21078 => 38485, 22346 => 38486, 22952 => 38487, 24125 => 38488, 24536 => 38489, 24537 => 38490, 25151 => 38491, 26292 => 38492, 26395 => 38493, 26576 => 38494, 26834 => 38495, 20882 => 38496, 32033 => 38497, 32938 => 38498, 33192 => 38499, 35584 => 38500, 35980 => 38501, 36031 => 38502, 37502 => 38503, 38450 => 38504, 21536 => 38505, 38956 => 38506, 21271 => 38507, 20693 => 38508, 21340 => 38509, 22696 => 38510, 25778 => 38511, 26420 => 38512, 29287 => 38513, 30566 => 38514, 31302 => 38515, 37350 => 38516, 21187 => 38517, 27809 => 38518, 27526 => 38519, 22528 => 38520, 24140 => 38521, 22868 => 38522, 26412 => 38523, 32763 => 38524, 20961 => 38525, 30406 => 38526, 25705 => 38528, 30952 => 38529, 39764 => 38530, 40635 => 38531, 22475 => 38532, 22969 => 38533, 26151 => 38534, 26522 => 38535, 27598 => 38536, 21737 => 38537, 27097 => 38538, 24149 => 38539, 33180 => 38540, 26517 => 38541, 39850 => 38542, 26622 => 38543, 40018 => 38544, 26717 => 38545, 20134 => 38546, 20451 => 38547, 21448 => 38548, 25273 => 38549, 26411 => 38550, 27819 => 38551, 36804 => 38552, 20397 => 38553, 32365 => 38554, 40639 => 38555, 19975 => 38556, 24930 => 38557, 28288 => 38558, 28459 => 38559, 34067 => 38560, 21619 => 38561, 26410 => 38562, 39749 => 38563, 24051 => 38564, 31637 => 38565, 23724 => 38566, 23494 => 38567, 34588 => 38568, 28234 => 38569, 34001 => 38570, 31252 => 38571, 33032 => 38572, 22937 => 38573, 31885 => 38574, 27665 => 38575, 30496 => 38576, 21209 => 38577, 22818 => 38578, 28961 => 38579, 29279 => 38580, 30683 => 38581, 38695 => 38582, 40289 => 38583, 26891 => 38584, 23167 => 38585, 23064 => 38586, 20901 => 38587, 21517 => 38588, 21629 => 38589, 26126 => 38590, 30431 => 38591, 36855 => 38592, 37528 => 38593, 40180 => 38594, 23018 => 38595, 29277 => 38596, 28357 => 38597, 20813 => 38598, 26825 => 38599, 32191 => 38600, 32236 => 38601, 38754 => 38602, 40634 => 38603, 25720 => 38604, 27169 => 38605, 33538 => 38606, 22916 => 38607, 23391 => 38608, 27611 => 38609, 29467 => 38610, 30450 => 38611, 32178 => 38612, 32791 => 38613, 33945 => 38614, 20786 => 38615, 26408 => 38616, 40665 => 38617, 30446 => 38618, 26466 => 38619, 21247 => 38620, 39173 => 38621, 23588 => 38622, 25147 => 38623, 31870 => 38624, 36016 => 38625, 21839 => 38626, 24758 => 38627, 32011 => 38628, 38272 => 38629, 21249 => 38630, 20063 => 38631, 20918 => 38632, 22812 => 38633, 29242 => 38634, 32822 => 38635, 37326 => 38636, 24357 => 38637, 30690 => 38638, 21380 => 38639, 24441 => 38640, 32004 => 38641, 34220 => 38642, 35379 => 38643, 36493 => 38644, 38742 => 38645, 26611 => 38646, 34222 => 38647, 37971 => 38648, 24841 => 38649, 24840 => 38650, 27833 => 38651, 30290 => 38652, 35565 => 38720, 36664 => 38721, 21807 => 38722, 20305 => 38723, 20778 => 38724, 21191 => 38725, 21451 => 38726, 23461 => 38727, 24189 => 38728, 24736 => 38729, 24962 => 38730, 25558 => 38731, 26377 => 38732, 26586 => 38733, 28263 => 38734, 28044 => 38735, 29494 => 38736, 29495 => 38737, 30001 => 38738, 31056 => 38739, 35029 => 38740, 35480 => 38741, 36938 => 38742, 37009 => 38743, 37109 => 38744, 38596 => 38745, 34701 => 38746, 22805 => 38747, 20104 => 38748, 20313 => 38749, 19982 => 38750, 35465 => 38751, 36671 => 38752, 38928 => 38753, 20653 => 38754, 24188 => 38755, 22934 => 38756, 23481 => 38757, 24248 => 38758, 25562 => 38759, 25594 => 38760, 25793 => 38761, 26332 => 38762, 26954 => 38763, 27096 => 38764, 27915 => 38765, 28342 => 38766, 29076 => 38767, 29992 => 38768, 31407 => 38769, 32650 => 38770, 32768 => 38771, 33865 => 38772, 33993 => 38773, 35201 => 38774, 35617 => 38775, 36362 => 38776, 36965 => 38777, 38525 => 38778, 39178 => 38779, 24958 => 38780, 25233 => 38781, 27442 => 38782, 27779 => 38784, 28020 => 38785, 32716 => 38786, 32764 => 38787, 28096 => 38788, 32645 => 38789, 34746 => 38790, 35064 => 38791, 26469 => 38792, 33713 => 38793, 38972 => 38794, 38647 => 38795, 27931 => 38796, 32097 => 38797, 33853 => 38798, 37226 => 38799, 20081 => 38800, 21365 => 38801, 23888 => 38802, 27396 => 38803, 28651 => 38804, 34253 => 38805, 34349 => 38806, 35239 => 38807, 21033 => 38808, 21519 => 38809, 23653 => 38810, 26446 => 38811, 26792 => 38812, 29702 => 38813, 29827 => 38814, 30178 => 38815, 35023 => 38816, 35041 => 38817, 37324 => 38818, 38626 => 38819, 38520 => 38820, 24459 => 38821, 29575 => 38822, 31435 => 38823, 33870 => 38824, 25504 => 38825, 30053 => 38826, 21129 => 38827, 27969 => 38828, 28316 => 38829, 29705 => 38830, 30041 => 38831, 30827 => 38832, 31890 => 38833, 38534 => 38834, 31452 => 38835, 40845 => 38836, 20406 => 38837, 24942 => 38838, 26053 => 38839, 34396 => 38840, 20102 => 38841, 20142 => 38842, 20698 => 38843, 20001 => 38844, 20940 => 38845, 23534 => 38846, 26009 => 38847, 26753 => 38848, 28092 => 38849, 29471 => 38850, 30274 => 38851, 30637 => 38852, 31260 => 38853, 31975 => 38854, 33391 => 38855, 35538 => 38856, 36988 => 38857, 37327 => 38858, 38517 => 38859, 38936 => 38860, 21147 => 38861, 32209 => 38862, 20523 => 38863, 21400 => 38864, 26519 => 38865, 28107 => 38866, 29136 => 38867, 29747 => 38868, 33256 => 38869, 36650 => 38870, 38563 => 38871, 40023 => 38872, 40607 => 38873, 29792 => 38874, 22593 => 38875, 28057 => 38876, 32047 => 38877, 39006 => 38878, 20196 => 38879, 20278 => 38880, 20363 => 38881, 20919 => 38882, 21169 => 38883, 23994 => 38884, 24604 => 38885, 29618 => 38886, 31036 => 38887, 33491 => 38888, 37428 => 38889, 38583 => 38890, 38646 => 38891, 38666 => 38892, 40599 => 38893, 40802 => 38894, 26278 => 38895, 27508 => 38896, 21015 => 38897, 21155 => 38898, 28872 => 38899, 35010 => 38900, 24265 => 38901, 24651 => 38902, 24976 => 38903, 28451 => 38904, 29001 => 38905, 31806 => 38906, 32244 => 38907, 32879 => 38908, 34030 => 38976, 36899 => 38977, 37676 => 38978, 21570 => 38979, 39791 => 38980, 27347 => 38981, 28809 => 38982, 36034 => 38983, 36335 => 38984, 38706 => 38985, 21172 => 38986, 23105 => 38987, 24266 => 38988, 24324 => 38989, 26391 => 38990, 27004 => 38991, 27028 => 38992, 28010 => 38993, 28431 => 38994, 29282 => 38995, 29436 => 38996, 31725 => 38997, 32769 => 38998, 32894 => 38999, 34635 => 39000, 37070 => 39001, 20845 => 39002, 40595 => 39003, 31108 => 39004, 32907 => 39005, 37682 => 39006, 35542 => 39007, 20525 => 39008, 21644 => 39009, 35441 => 39010, 27498 => 39011, 36036 => 39012, 33031 => 39013, 24785 => 39014, 26528 => 39015, 40434 => 39016, 20121 => 39017, 20120 => 39018, 39952 => 39019, 35435 => 39020, 34241 => 39021, 34152 => 39022, 26880 => 39023, 28286 => 39024, 30871 => 39025, 33109 => 39026, 24332 => 39071, 19984 => 39072, 19989 => 39073, 20010 => 39074, 20017 => 39075, 20022 => 39076, 20028 => 39077, 20031 => 39078, 20034 => 39079, 20054 => 39080, 20056 => 39081, 20098 => 39082, 20101 => 39083, 35947 => 39084, 20106 => 39085, 33298 => 39086, 24333 => 39087, 20110 => 39088, 20126 => 39089, 20127 => 39090, 20128 => 39091, 20130 => 39092, 20144 => 39093, 20147 => 39094, 20150 => 39095, 20174 => 39096, 20173 => 39097, 20164 => 39098, 20166 => 39099, 20162 => 39100, 20183 => 39101, 20190 => 39102, 20205 => 39103, 20191 => 39104, 20215 => 39105, 20233 => 39106, 20314 => 39107, 20272 => 39108, 20315 => 39109, 20317 => 39110, 20311 => 39111, 20295 => 39112, 20342 => 39113, 20360 => 39114, 20367 => 39115, 20376 => 39116, 20347 => 39117, 20329 => 39118, 20336 => 39119, 20369 => 39120, 20335 => 39121, 20358 => 39122, 20374 => 39123, 20760 => 39124, 20436 => 39125, 20447 => 39126, 20430 => 39127, 20440 => 39128, 20443 => 39129, 20433 => 39130, 20442 => 39131, 20432 => 39132, 20452 => 39133, 20453 => 39134, 20506 => 39135, 20520 => 39136, 20500 => 39137, 20522 => 39138, 20517 => 39139, 20485 => 39140, 20252 => 39141, 20470 => 39142, 20513 => 39143, 20521 => 39144, 20524 => 39145, 20478 => 39146, 20463 => 39147, 20497 => 39148, 20486 => 39149, 20547 => 39150, 20551 => 39151, 26371 => 39152, 20565 => 39153, 20560 => 39154, 20552 => 39155, 20570 => 39156, 20566 => 39157, 20588 => 39158, 20600 => 39159, 20608 => 39160, 20634 => 39161, 20613 => 39162, 20660 => 39163, 20658 => 39164, 20681 => 39232, 20682 => 39233, 20659 => 39234, 20674 => 39235, 20694 => 39236, 20702 => 39237, 20709 => 39238, 20717 => 39239, 20707 => 39240, 20718 => 39241, 20729 => 39242, 20725 => 39243, 20745 => 39244, 20737 => 39245, 20738 => 39246, 20758 => 39247, 20757 => 39248, 20756 => 39249, 20762 => 39250, 20769 => 39251, 20794 => 39252, 20791 => 39253, 20796 => 39254, 20795 => 39255, 20799 => 39256, 20800 => 39257, 20818 => 39258, 20812 => 39259, 20820 => 39260, 20834 => 39261, 31480 => 39262, 20841 => 39263, 20842 => 39264, 20846 => 39265, 20864 => 39266, 20866 => 39267, 22232 => 39268, 20876 => 39269, 20873 => 39270, 20879 => 39271, 20881 => 39272, 20883 => 39273, 20885 => 39274, 20886 => 39275, 20900 => 39276, 20902 => 39277, 20898 => 39278, 20905 => 39279, 20906 => 39280, 20907 => 39281, 20915 => 39282, 20913 => 39283, 20914 => 39284, 20912 => 39285, 20917 => 39286, 20925 => 39287, 20933 => 39288, 20937 => 39289, 20955 => 39290, 20960 => 39291, 34389 => 39292, 20969 => 39293, 20973 => 39294, 20976 => 39296, 20981 => 39297, 20990 => 39298, 20996 => 39299, 21003 => 39300, 21012 => 39301, 21006 => 39302, 21031 => 39303, 21034 => 39304, 21038 => 39305, 21043 => 39306, 21049 => 39307, 21071 => 39308, 21060 => 39309, 21067 => 39310, 21068 => 39311, 21086 => 39312, 21076 => 39313, 21098 => 39314, 21108 => 39315, 21097 => 39316, 21107 => 39317, 21119 => 39318, 21117 => 39319, 21133 => 39320, 21140 => 39321, 21138 => 39322, 21105 => 39323, 21128 => 39324, 21137 => 39325, 36776 => 39326, 36775 => 39327, 21164 => 39328, 21165 => 39329, 21180 => 39330, 21173 => 39331, 21185 => 39332, 21197 => 39333, 21207 => 39334, 21214 => 39335, 21219 => 39336, 21222 => 39337, 39149 => 39338, 21216 => 39339, 21235 => 39340, 21237 => 39341, 21240 => 39342, 21241 => 39343, 21254 => 39344, 21256 => 39345, 30008 => 39346, 21261 => 39347, 21264 => 39348, 21263 => 39349, 21269 => 39350, 21274 => 39351, 21283 => 39352, 21295 => 39353, 21297 => 39354, 21299 => 39355, 21304 => 39356, 21312 => 39357, 21318 => 39358, 21317 => 39359, 19991 => 39360, 21321 => 39361, 21325 => 39362, 20950 => 39363, 21342 => 39364, 21353 => 39365, 21358 => 39366, 22808 => 39367, 21371 => 39368, 21367 => 39369, 21378 => 39370, 21398 => 39371, 21408 => 39372, 21414 => 39373, 21413 => 39374, 21422 => 39375, 21424 => 39376, 21430 => 39377, 21443 => 39378, 31762 => 39379, 38617 => 39380, 21471 => 39381, 26364 => 39382, 29166 => 39383, 21486 => 39384, 21480 => 39385, 21485 => 39386, 21498 => 39387, 21505 => 39388, 21565 => 39389, 21568 => 39390, 21548 => 39391, 21549 => 39392, 21564 => 39393, 21550 => 39394, 21558 => 39395, 21545 => 39396, 21533 => 39397, 21582 => 39398, 21647 => 39399, 21621 => 39400, 21646 => 39401, 21599 => 39402, 21617 => 39403, 21623 => 39404, 21616 => 39405, 21650 => 39406, 21627 => 39407, 21632 => 39408, 21622 => 39409, 21636 => 39410, 21648 => 39411, 21638 => 39412, 21703 => 39413, 21666 => 39414, 21688 => 39415, 21669 => 39416, 21676 => 39417, 21700 => 39418, 21704 => 39419, 21672 => 39420, 21675 => 39488, 21698 => 39489, 21668 => 39490, 21694 => 39491, 21692 => 39492, 21720 => 39493, 21733 => 39494, 21734 => 39495, 21775 => 39496, 21780 => 39497, 21757 => 39498, 21742 => 39499, 21741 => 39500, 21754 => 39501, 21730 => 39502, 21817 => 39503, 21824 => 39504, 21859 => 39505, 21836 => 39506, 21806 => 39507, 21852 => 39508, 21829 => 39509, 21846 => 39510, 21847 => 39511, 21816 => 39512, 21811 => 39513, 21853 => 39514, 21913 => 39515, 21888 => 39516, 21679 => 39517, 21898 => 39518, 21919 => 39519, 21883 => 39520, 21886 => 39521, 21912 => 39522, 21918 => 39523, 21934 => 39524, 21884 => 39525, 21891 => 39526, 21929 => 39527, 21895 => 39528, 21928 => 39529, 21978 => 39530, 21957 => 39531, 21983 => 39532, 21956 => 39533, 21980 => 39534, 21988 => 39535, 21972 => 39536, 22036 => 39537, 22007 => 39538, 22038 => 39539, 22014 => 39540, 22013 => 39541, 22043 => 39542, 22009 => 39543, 22094 => 39544, 22096 => 39545, 29151 => 39546, 22068 => 39547, 22070 => 39548, 22066 => 39549, 22072 => 39550, 22123 => 39552, 22116 => 39553, 22063 => 39554, 22124 => 39555, 22122 => 39556, 22150 => 39557, 22144 => 39558, 22154 => 39559, 22176 => 39560, 22164 => 39561, 22159 => 39562, 22181 => 39563, 22190 => 39564, 22198 => 39565, 22196 => 39566, 22210 => 39567, 22204 => 39568, 22209 => 39569, 22211 => 39570, 22208 => 39571, 22216 => 39572, 22222 => 39573, 22225 => 39574, 22227 => 39575, 22231 => 39576, 22254 => 39577, 22265 => 39578, 22272 => 39579, 22271 => 39580, 22276 => 39581, 22281 => 39582, 22280 => 39583, 22283 => 39584, 22285 => 39585, 22291 => 39586, 22296 => 39587, 22294 => 39588, 21959 => 39589, 22300 => 39590, 22310 => 39591, 22327 => 39592, 22328 => 39593, 22350 => 39594, 22331 => 39595, 22336 => 39596, 22351 => 39597, 22377 => 39598, 22464 => 39599, 22408 => 39600, 22369 => 39601, 22399 => 39602, 22409 => 39603, 22419 => 39604, 22432 => 39605, 22451 => 39606, 22436 => 39607, 22442 => 39608, 22448 => 39609, 22467 => 39610, 22470 => 39611, 22484 => 39612, 22482 => 39613, 22483 => 39614, 22538 => 39615, 22486 => 39616, 22499 => 39617, 22539 => 39618, 22553 => 39619, 22557 => 39620, 22642 => 39621, 22561 => 39622, 22626 => 39623, 22603 => 39624, 22640 => 39625, 27584 => 39626, 22610 => 39627, 22589 => 39628, 22649 => 39629, 22661 => 39630, 22713 => 39631, 22687 => 39632, 22699 => 39633, 22714 => 39634, 22750 => 39635, 22715 => 39636, 22712 => 39637, 22702 => 39638, 22725 => 39639, 22739 => 39640, 22737 => 39641, 22743 => 39642, 22745 => 39643, 22744 => 39644, 22757 => 39645, 22748 => 39646, 22756 => 39647, 22751 => 39648, 22767 => 39649, 22778 => 39650, 22777 => 39651, 22779 => 39652, 22780 => 39653, 22781 => 39654, 22786 => 39655, 22794 => 39656, 22800 => 39657, 22811 => 39658, 26790 => 39659, 22821 => 39660, 22828 => 39661, 22829 => 39662, 22834 => 39663, 22840 => 39664, 22846 => 39665, 31442 => 39666, 22869 => 39667, 22864 => 39668, 22862 => 39669, 22874 => 39670, 22872 => 39671, 22882 => 39672, 22880 => 39673, 22887 => 39674, 22892 => 39675, 22889 => 39676, 22904 => 39744, 22913 => 39745, 22941 => 39746, 20318 => 39747, 20395 => 39748, 22947 => 39749, 22962 => 39750, 22982 => 39751, 23016 => 39752, 23004 => 39753, 22925 => 39754, 23001 => 39755, 23002 => 39756, 23077 => 39757, 23071 => 39758, 23057 => 39759, 23068 => 39760, 23049 => 39761, 23066 => 39762, 23104 => 39763, 23148 => 39764, 23113 => 39765, 23093 => 39766, 23094 => 39767, 23138 => 39768, 23146 => 39769, 23194 => 39770, 23228 => 39771, 23230 => 39772, 23243 => 39773, 23234 => 39774, 23229 => 39775, 23267 => 39776, 23255 => 39777, 23270 => 39778, 23273 => 39779, 23254 => 39780, 23290 => 39781, 23291 => 39782, 23308 => 39783, 23307 => 39784, 23318 => 39785, 23346 => 39786, 23248 => 39787, 23338 => 39788, 23350 => 39789, 23358 => 39790, 23363 => 39791, 23365 => 39792, 23360 => 39793, 23377 => 39794, 23381 => 39795, 23386 => 39796, 23387 => 39797, 23397 => 39798, 23401 => 39799, 23408 => 39800, 23411 => 39801, 23413 => 39802, 23416 => 39803, 25992 => 39804, 23418 => 39805, 23424 => 39806, 23427 => 39808, 23462 => 39809, 23480 => 39810, 23491 => 39811, 23495 => 39812, 23497 => 39813, 23508 => 39814, 23504 => 39815, 23524 => 39816, 23526 => 39817, 23522 => 39818, 23518 => 39819, 23525 => 39820, 23531 => 39821, 23536 => 39822, 23542 => 39823, 23539 => 39824, 23557 => 39825, 23559 => 39826, 23560 => 39827, 23565 => 39828, 23571 => 39829, 23584 => 39830, 23586 => 39831, 23592 => 39832, 23608 => 39833, 23609 => 39834, 23617 => 39835, 23622 => 39836, 23630 => 39837, 23635 => 39838, 23632 => 39839, 23631 => 39840, 23409 => 39841, 23660 => 39842, 23662 => 39843, 20066 => 39844, 23670 => 39845, 23673 => 39846, 23692 => 39847, 23697 => 39848, 23700 => 39849, 22939 => 39850, 23723 => 39851, 23739 => 39852, 23734 => 39853, 23740 => 39854, 23735 => 39855, 23749 => 39856, 23742 => 39857, 23751 => 39858, 23769 => 39859, 23785 => 39860, 23805 => 39861, 23802 => 39862, 23789 => 39863, 23948 => 39864, 23786 => 39865, 23819 => 39866, 23829 => 39867, 23831 => 39868, 23900 => 39869, 23839 => 39870, 23835 => 39871, 23825 => 39872, 23828 => 39873, 23842 => 39874, 23834 => 39875, 23833 => 39876, 23832 => 39877, 23884 => 39878, 23890 => 39879, 23886 => 39880, 23883 => 39881, 23916 => 39882, 23923 => 39883, 23926 => 39884, 23943 => 39885, 23940 => 39886, 23938 => 39887, 23970 => 39888, 23965 => 39889, 23980 => 39890, 23982 => 39891, 23997 => 39892, 23952 => 39893, 23991 => 39894, 23996 => 39895, 24009 => 39896, 24013 => 39897, 24019 => 39898, 24018 => 39899, 24022 => 39900, 24027 => 39901, 24043 => 39902, 24050 => 39903, 24053 => 39904, 24075 => 39905, 24090 => 39906, 24089 => 39907, 24081 => 39908, 24091 => 39909, 24118 => 39910, 24119 => 39911, 24132 => 39912, 24131 => 39913, 24128 => 39914, 24142 => 39915, 24151 => 39916, 24148 => 39917, 24159 => 39918, 24162 => 39919, 24164 => 39920, 24135 => 39921, 24181 => 39922, 24182 => 39923, 24186 => 39924, 40636 => 39925, 24191 => 39926, 24224 => 39927, 24257 => 39928, 24258 => 39929, 24264 => 39930, 24272 => 39931, 24271 => 39932, 24278 => 40000, 24291 => 40001, 24285 => 40002, 24282 => 40003, 24283 => 40004, 24290 => 40005, 24289 => 40006, 24296 => 40007, 24297 => 40008, 24300 => 40009, 24305 => 40010, 24307 => 40011, 24304 => 40012, 24308 => 40013, 24312 => 40014, 24318 => 40015, 24323 => 40016, 24329 => 40017, 24413 => 40018, 24412 => 40019, 24331 => 40020, 24337 => 40021, 24342 => 40022, 24361 => 40023, 24365 => 40024, 24376 => 40025, 24385 => 40026, 24392 => 40027, 24396 => 40028, 24398 => 40029, 24367 => 40030, 24401 => 40031, 24406 => 40032, 24407 => 40033, 24409 => 40034, 24417 => 40035, 24429 => 40036, 24435 => 40037, 24439 => 40038, 24451 => 40039, 24450 => 40040, 24447 => 40041, 24458 => 40042, 24456 => 40043, 24465 => 40044, 24455 => 40045, 24478 => 40046, 24473 => 40047, 24472 => 40048, 24480 => 40049, 24488 => 40050, 24493 => 40051, 24508 => 40052, 24534 => 40053, 24571 => 40054, 24548 => 40055, 24568 => 40056, 24561 => 40057, 24541 => 40058, 24755 => 40059, 24575 => 40060, 24609 => 40061, 24672 => 40062, 24601 => 40064, 24592 => 40065, 24617 => 40066, 24590 => 40067, 24625 => 40068, 24603 => 40069, 24597 => 40070, 24619 => 40071, 24614 => 40072, 24591 => 40073, 24634 => 40074, 24666 => 40075, 24641 => 40076, 24682 => 40077, 24695 => 40078, 24671 => 40079, 24650 => 40080, 24646 => 40081, 24653 => 40082, 24675 => 40083, 24643 => 40084, 24676 => 40085, 24642 => 40086, 24684 => 40087, 24683 => 40088, 24665 => 40089, 24705 => 40090, 24717 => 40091, 24807 => 40092, 24707 => 40093, 24730 => 40094, 24708 => 40095, 24731 => 40096, 24726 => 40097, 24727 => 40098, 24722 => 40099, 24743 => 40100, 24715 => 40101, 24801 => 40102, 24760 => 40103, 24800 => 40104, 24787 => 40105, 24756 => 40106, 24560 => 40107, 24765 => 40108, 24774 => 40109, 24757 => 40110, 24792 => 40111, 24909 => 40112, 24853 => 40113, 24838 => 40114, 24822 => 40115, 24823 => 40116, 24832 => 40117, 24820 => 40118, 24826 => 40119, 24835 => 40120, 24865 => 40121, 24827 => 40122, 24817 => 40123, 24845 => 40124, 24846 => 40125, 24903 => 40126, 24894 => 40127, 24872 => 40128, 24871 => 40129, 24906 => 40130, 24895 => 40131, 24892 => 40132, 24876 => 40133, 24884 => 40134, 24893 => 40135, 24898 => 40136, 24900 => 40137, 24947 => 40138, 24951 => 40139, 24920 => 40140, 24921 => 40141, 24922 => 40142, 24939 => 40143, 24948 => 40144, 24943 => 40145, 24933 => 40146, 24945 => 40147, 24927 => 40148, 24925 => 40149, 24915 => 40150, 24949 => 40151, 24985 => 40152, 24982 => 40153, 24967 => 40154, 25004 => 40155, 24980 => 40156, 24986 => 40157, 24970 => 40158, 24977 => 40159, 25003 => 40160, 25006 => 40161, 25036 => 40162, 25034 => 40163, 25033 => 40164, 25079 => 40165, 25032 => 40166, 25027 => 40167, 25030 => 40168, 25018 => 40169, 25035 => 40170, 32633 => 40171, 25037 => 40172, 25062 => 40173, 25059 => 40174, 25078 => 40175, 25082 => 40176, 25076 => 40177, 25087 => 40178, 25085 => 40179, 25084 => 40180, 25086 => 40181, 25088 => 40182, 25096 => 40183, 25097 => 40184, 25101 => 40185, 25100 => 40186, 25108 => 40187, 25115 => 40188, 25118 => 40256, 25121 => 40257, 25130 => 40258, 25134 => 40259, 25136 => 40260, 25138 => 40261, 25139 => 40262, 25153 => 40263, 25166 => 40264, 25182 => 40265, 25187 => 40266, 25179 => 40267, 25184 => 40268, 25192 => 40269, 25212 => 40270, 25218 => 40271, 25225 => 40272, 25214 => 40273, 25234 => 40274, 25235 => 40275, 25238 => 40276, 25300 => 40277, 25219 => 40278, 25236 => 40279, 25303 => 40280, 25297 => 40281, 25275 => 40282, 25295 => 40283, 25343 => 40284, 25286 => 40285, 25812 => 40286, 25288 => 40287, 25308 => 40288, 25292 => 40289, 25290 => 40290, 25282 => 40291, 25287 => 40292, 25243 => 40293, 25289 => 40294, 25356 => 40295, 25326 => 40296, 25329 => 40297, 25383 => 40298, 25346 => 40299, 25352 => 40300, 25327 => 40301, 25333 => 40302, 25424 => 40303, 25406 => 40304, 25421 => 40305, 25628 => 40306, 25423 => 40307, 25494 => 40308, 25486 => 40309, 25472 => 40310, 25515 => 40311, 25462 => 40312, 25507 => 40313, 25487 => 40314, 25481 => 40315, 25503 => 40316, 25525 => 40317, 25451 => 40318, 25449 => 40320, 25534 => 40321, 25577 => 40322, 25536 => 40323, 25542 => 40324, 25571 => 40325, 25545 => 40326, 25554 => 40327, 25590 => 40328, 25540 => 40329, 25622 => 40330, 25652 => 40331, 25606 => 40332, 25619 => 40333, 25638 => 40334, 25654 => 40335, 25885 => 40336, 25623 => 40337, 25640 => 40338, 25615 => 40339, 25703 => 40340, 25711 => 40341, 25718 => 40342, 25678 => 40343, 25898 => 40344, 25749 => 40345, 25747 => 40346, 25765 => 40347, 25769 => 40348, 25736 => 40349, 25788 => 40350, 25818 => 40351, 25810 => 40352, 25797 => 40353, 25799 => 40354, 25787 => 40355, 25816 => 40356, 25794 => 40357, 25841 => 40358, 25831 => 40359, 33289 => 40360, 25824 => 40361, 25825 => 40362, 25260 => 40363, 25827 => 40364, 25839 => 40365, 25900 => 40366, 25846 => 40367, 25844 => 40368, 25842 => 40369, 25850 => 40370, 25856 => 40371, 25853 => 40372, 25880 => 40373, 25884 => 40374, 25861 => 40375, 25892 => 40376, 25891 => 40377, 25899 => 40378, 25908 => 40379, 25909 => 40380, 25911 => 40381, 25910 => 40382, 25912 => 40383, 30027 => 40384, 25928 => 40385, 25942 => 40386, 25941 => 40387, 25933 => 40388, 25944 => 40389, 25950 => 40390, 25949 => 40391, 25970 => 40392, 25976 => 40393, 25986 => 40394, 25987 => 40395, 35722 => 40396, 26011 => 40397, 26015 => 40398, 26027 => 40399, 26039 => 40400, 26051 => 40401, 26054 => 40402, 26049 => 40403, 26052 => 40404, 26060 => 40405, 26066 => 40406, 26075 => 40407, 26073 => 40408, 26080 => 40409, 26081 => 40410, 26097 => 40411, 26482 => 40412, 26122 => 40413, 26115 => 40414, 26107 => 40415, 26483 => 40416, 26165 => 40417, 26166 => 40418, 26164 => 40419, 26140 => 40420, 26191 => 40421, 26180 => 40422, 26185 => 40423, 26177 => 40424, 26206 => 40425, 26205 => 40426, 26212 => 40427, 26215 => 40428, 26216 => 40429, 26207 => 40430, 26210 => 40431, 26224 => 40432, 26243 => 40433, 26248 => 40434, 26254 => 40435, 26249 => 40436, 26244 => 40437, 26264 => 40438, 26269 => 40439, 26305 => 40440, 26297 => 40441, 26313 => 40442, 26302 => 40443, 26300 => 40444, 26308 => 40512, 26296 => 40513, 26326 => 40514, 26330 => 40515, 26336 => 40516, 26175 => 40517, 26342 => 40518, 26345 => 40519, 26352 => 40520, 26357 => 40521, 26359 => 40522, 26383 => 40523, 26390 => 40524, 26398 => 40525, 26406 => 40526, 26407 => 40527, 38712 => 40528, 26414 => 40529, 26431 => 40530, 26422 => 40531, 26433 => 40532, 26424 => 40533, 26423 => 40534, 26438 => 40535, 26462 => 40536, 26464 => 40537, 26457 => 40538, 26467 => 40539, 26468 => 40540, 26505 => 40541, 26480 => 40542, 26537 => 40543, 26492 => 40544, 26474 => 40545, 26508 => 40546, 26507 => 40547, 26534 => 40548, 26529 => 40549, 26501 => 40550, 26551 => 40551, 26607 => 40552, 26548 => 40553, 26604 => 40554, 26547 => 40555, 26601 => 40556, 26552 => 40557, 26596 => 40558, 26590 => 40559, 26589 => 40560, 26594 => 40561, 26606 => 40562, 26553 => 40563, 26574 => 40564, 26566 => 40565, 26599 => 40566, 27292 => 40567, 26654 => 40568, 26694 => 40569, 26665 => 40570, 26688 => 40571, 26701 => 40572, 26674 => 40573, 26702 => 40574, 26803 => 40576, 26667 => 40577, 26713 => 40578, 26723 => 40579, 26743 => 40580, 26751 => 40581, 26783 => 40582, 26767 => 40583, 26797 => 40584, 26772 => 40585, 26781 => 40586, 26779 => 40587, 26755 => 40588, 27310 => 40589, 26809 => 40590, 26740 => 40591, 26805 => 40592, 26784 => 40593, 26810 => 40594, 26895 => 40595, 26765 => 40596, 26750 => 40597, 26881 => 40598, 26826 => 40599, 26888 => 40600, 26840 => 40601, 26914 => 40602, 26918 => 40603, 26849 => 40604, 26892 => 40605, 26829 => 40606, 26836 => 40607, 26855 => 40608, 26837 => 40609, 26934 => 40610, 26898 => 40611, 26884 => 40612, 26839 => 40613, 26851 => 40614, 26917 => 40615, 26873 => 40616, 26848 => 40617, 26863 => 40618, 26920 => 40619, 26922 => 40620, 26906 => 40621, 26915 => 40622, 26913 => 40623, 26822 => 40624, 27001 => 40625, 26999 => 40626, 26972 => 40627, 27000 => 40628, 26987 => 40629, 26964 => 40630, 27006 => 40631, 26990 => 40632, 26937 => 40633, 26996 => 40634, 26941 => 40635, 26969 => 40636, 26928 => 40637, 26977 => 40638, 26974 => 40639, 26973 => 40640, 27009 => 40641, 26986 => 40642, 27058 => 40643, 27054 => 40644, 27088 => 40645, 27071 => 40646, 27073 => 40647, 27091 => 40648, 27070 => 40649, 27086 => 40650, 23528 => 40651, 27082 => 40652, 27101 => 40653, 27067 => 40654, 27075 => 40655, 27047 => 40656, 27182 => 40657, 27025 => 40658, 27040 => 40659, 27036 => 40660, 27029 => 40661, 27060 => 40662, 27102 => 40663, 27112 => 40664, 27138 => 40665, 27163 => 40666, 27135 => 40667, 27402 => 40668, 27129 => 40669, 27122 => 40670, 27111 => 40671, 27141 => 40672, 27057 => 40673, 27166 => 40674, 27117 => 40675, 27156 => 40676, 27115 => 40677, 27146 => 40678, 27154 => 40679, 27329 => 40680, 27171 => 40681, 27155 => 40682, 27204 => 40683, 27148 => 40684, 27250 => 40685, 27190 => 40686, 27256 => 40687, 27207 => 40688, 27234 => 40689, 27225 => 40690, 27238 => 40691, 27208 => 40692, 27192 => 40693, 27170 => 40694, 27280 => 40695, 27277 => 40696, 27296 => 40697, 27268 => 40698, 27298 => 40699, 27299 => 40700, 27287 => 40768, 34327 => 40769, 27323 => 40770, 27331 => 40771, 27330 => 40772, 27320 => 40773, 27315 => 40774, 27308 => 40775, 27358 => 40776, 27345 => 40777, 27359 => 40778, 27306 => 40779, 27354 => 40780, 27370 => 40781, 27387 => 40782, 27397 => 40783, 34326 => 40784, 27386 => 40785, 27410 => 40786, 27414 => 40787, 39729 => 40788, 27423 => 40789, 27448 => 40790, 27447 => 40791, 30428 => 40792, 27449 => 40793, 39150 => 40794, 27463 => 40795, 27459 => 40796, 27465 => 40797, 27472 => 40798, 27481 => 40799, 27476 => 40800, 27483 => 40801, 27487 => 40802, 27489 => 40803, 27512 => 40804, 27513 => 40805, 27519 => 40806, 27520 => 40807, 27524 => 40808, 27523 => 40809, 27533 => 40810, 27544 => 40811, 27541 => 40812, 27550 => 40813, 27556 => 40814, 27562 => 40815, 27563 => 40816, 27567 => 40817, 27570 => 40818, 27569 => 40819, 27571 => 40820, 27575 => 40821, 27580 => 40822, 27590 => 40823, 27595 => 40824, 27603 => 40825, 27615 => 40826, 27628 => 40827, 27627 => 40828, 27635 => 40829, 27631 => 40830, 40638 => 40832, 27656 => 40833, 27667 => 40834, 27668 => 40835, 27675 => 40836, 27684 => 40837, 27683 => 40838, 27742 => 40839, 27733 => 40840, 27746 => 40841, 27754 => 40842, 27778 => 40843, 27789 => 40844, 27802 => 40845, 27777 => 40846, 27803 => 40847, 27774 => 40848, 27752 => 40849, 27763 => 40850, 27794 => 40851, 27792 => 40852, 27844 => 40853, 27889 => 40854, 27859 => 40855, 27837 => 40856, 27863 => 40857, 27845 => 40858, 27869 => 40859, 27822 => 40860, 27825 => 40861, 27838 => 40862, 27834 => 40863, 27867 => 40864, 27887 => 40865, 27865 => 40866, 27882 => 40867, 27935 => 40868, 34893 => 40869, 27958 => 40870, 27947 => 40871, 27965 => 40872, 27960 => 40873, 27929 => 40874, 27957 => 40875, 27955 => 40876, 27922 => 40877, 27916 => 40878, 28003 => 40879, 28051 => 40880, 28004 => 40881, 27994 => 40882, 28025 => 40883, 27993 => 40884, 28046 => 40885, 28053 => 40886, 28644 => 40887, 28037 => 40888, 28153 => 40889, 28181 => 40890, 28170 => 40891, 28085 => 40892, 28103 => 40893, 28134 => 40894, 28088 => 40895, 28102 => 40896, 28140 => 40897, 28126 => 40898, 28108 => 40899, 28136 => 40900, 28114 => 40901, 28101 => 40902, 28154 => 40903, 28121 => 40904, 28132 => 40905, 28117 => 40906, 28138 => 40907, 28142 => 40908, 28205 => 40909, 28270 => 40910, 28206 => 40911, 28185 => 40912, 28274 => 40913, 28255 => 40914, 28222 => 40915, 28195 => 40916, 28267 => 40917, 28203 => 40918, 28278 => 40919, 28237 => 40920, 28191 => 40921, 28227 => 40922, 28218 => 40923, 28238 => 40924, 28196 => 40925, 28415 => 40926, 28189 => 40927, 28216 => 40928, 28290 => 40929, 28330 => 40930, 28312 => 40931, 28361 => 40932, 28343 => 40933, 28371 => 40934, 28349 => 40935, 28335 => 40936, 28356 => 40937, 28338 => 40938, 28372 => 40939, 28373 => 40940, 28303 => 40941, 28325 => 40942, 28354 => 40943, 28319 => 40944, 28481 => 40945, 28433 => 40946, 28748 => 40947, 28396 => 40948, 28408 => 40949, 28414 => 40950, 28479 => 40951, 28402 => 40952, 28465 => 40953, 28399 => 40954, 28466 => 40955, 28364 => 40956, 28478 => 57408, 28435 => 57409, 28407 => 57410, 28550 => 57411, 28538 => 57412, 28536 => 57413, 28545 => 57414, 28544 => 57415, 28527 => 57416, 28507 => 57417, 28659 => 57418, 28525 => 57419, 28546 => 57420, 28540 => 57421, 28504 => 57422, 28558 => 57423, 28561 => 57424, 28610 => 57425, 28518 => 57426, 28595 => 57427, 28579 => 57428, 28577 => 57429, 28580 => 57430, 28601 => 57431, 28614 => 57432, 28586 => 57433, 28639 => 57434, 28629 => 57435, 28652 => 57436, 28628 => 57437, 28632 => 57438, 28657 => 57439, 28654 => 57440, 28635 => 57441, 28681 => 57442, 28683 => 57443, 28666 => 57444, 28689 => 57445, 28673 => 57446, 28687 => 57447, 28670 => 57448, 28699 => 57449, 28698 => 57450, 28532 => 57451, 28701 => 57452, 28696 => 57453, 28703 => 57454, 28720 => 57455, 28734 => 57456, 28722 => 57457, 28753 => 57458, 28771 => 57459, 28825 => 57460, 28818 => 57461, 28847 => 57462, 28913 => 57463, 28844 => 57464, 28856 => 57465, 28851 => 57466, 28846 => 57467, 28895 => 57468, 28875 => 57469, 28893 => 57470, 28889 => 57472, 28937 => 57473, 28925 => 57474, 28956 => 57475, 28953 => 57476, 29029 => 57477, 29013 => 57478, 29064 => 57479, 29030 => 57480, 29026 => 57481, 29004 => 57482, 29014 => 57483, 29036 => 57484, 29071 => 57485, 29179 => 57486, 29060 => 57487, 29077 => 57488, 29096 => 57489, 29100 => 57490, 29143 => 57491, 29113 => 57492, 29118 => 57493, 29138 => 57494, 29129 => 57495, 29140 => 57496, 29134 => 57497, 29152 => 57498, 29164 => 57499, 29159 => 57500, 29173 => 57501, 29180 => 57502, 29177 => 57503, 29183 => 57504, 29197 => 57505, 29200 => 57506, 29211 => 57507, 29224 => 57508, 29229 => 57509, 29228 => 57510, 29232 => 57511, 29234 => 57512, 29243 => 57513, 29244 => 57514, 29247 => 57515, 29248 => 57516, 29254 => 57517, 29259 => 57518, 29272 => 57519, 29300 => 57520, 29310 => 57521, 29314 => 57522, 29313 => 57523, 29319 => 57524, 29330 => 57525, 29334 => 57526, 29346 => 57527, 29351 => 57528, 29369 => 57529, 29362 => 57530, 29379 => 57531, 29382 => 57532, 29380 => 57533, 29390 => 57534, 29394 => 57535, 29410 => 57536, 29408 => 57537, 29409 => 57538, 29433 => 57539, 29431 => 57540, 20495 => 57541, 29463 => 57542, 29450 => 57543, 29468 => 57544, 29462 => 57545, 29469 => 57546, 29492 => 57547, 29487 => 57548, 29481 => 57549, 29477 => 57550, 29502 => 57551, 29518 => 57552, 29519 => 57553, 40664 => 57554, 29527 => 57555, 29546 => 57556, 29544 => 57557, 29552 => 57558, 29560 => 57559, 29557 => 57560, 29563 => 57561, 29562 => 57562, 29640 => 57563, 29619 => 57564, 29646 => 57565, 29627 => 57566, 29632 => 57567, 29669 => 57568, 29678 => 57569, 29662 => 57570, 29858 => 57571, 29701 => 57572, 29807 => 57573, 29733 => 57574, 29688 => 57575, 29746 => 57576, 29754 => 57577, 29781 => 57578, 29759 => 57579, 29791 => 57580, 29785 => 57581, 29761 => 57582, 29788 => 57583, 29801 => 57584, 29808 => 57585, 29795 => 57586, 29802 => 57587, 29814 => 57588, 29822 => 57589, 29835 => 57590, 29854 => 57591, 29863 => 57592, 29898 => 57593, 29903 => 57594, 29908 => 57595, 29681 => 57596, 29920 => 57664, 29923 => 57665, 29927 => 57666, 29929 => 57667, 29934 => 57668, 29938 => 57669, 29936 => 57670, 29937 => 57671, 29944 => 57672, 29943 => 57673, 29956 => 57674, 29955 => 57675, 29957 => 57676, 29964 => 57677, 29966 => 57678, 29965 => 57679, 29973 => 57680, 29971 => 57681, 29982 => 57682, 29990 => 57683, 29996 => 57684, 30012 => 57685, 30020 => 57686, 30029 => 57687, 30026 => 57688, 30025 => 57689, 30043 => 57690, 30022 => 57691, 30042 => 57692, 30057 => 57693, 30052 => 57694, 30055 => 57695, 30059 => 57696, 30061 => 57697, 30072 => 57698, 30070 => 57699, 30086 => 57700, 30087 => 57701, 30068 => 57702, 30090 => 57703, 30089 => 57704, 30082 => 57705, 30100 => 57706, 30106 => 57707, 30109 => 57708, 30117 => 57709, 30115 => 57710, 30146 => 57711, 30131 => 57712, 30147 => 57713, 30133 => 57714, 30141 => 57715, 30136 => 57716, 30140 => 57717, 30129 => 57718, 30157 => 57719, 30154 => 57720, 30162 => 57721, 30169 => 57722, 30179 => 57723, 30174 => 57724, 30206 => 57725, 30207 => 57726, 30204 => 57728, 30209 => 57729, 30192 => 57730, 30202 => 57731, 30194 => 57732, 30195 => 57733, 30219 => 57734, 30221 => 57735, 30217 => 57736, 30239 => 57737, 30247 => 57738, 30240 => 57739, 30241 => 57740, 30242 => 57741, 30244 => 57742, 30260 => 57743, 30256 => 57744, 30267 => 57745, 30279 => 57746, 30280 => 57747, 30278 => 57748, 30300 => 57749, 30296 => 57750, 30305 => 57751, 30306 => 57752, 30312 => 57753, 30313 => 57754, 30314 => 57755, 30311 => 57756, 30316 => 57757, 30320 => 57758, 30322 => 57759, 30326 => 57760, 30328 => 57761, 30332 => 57762, 30336 => 57763, 30339 => 57764, 30344 => 57765, 30347 => 57766, 30350 => 57767, 30358 => 57768, 30355 => 57769, 30361 => 57770, 30362 => 57771, 30384 => 57772, 30388 => 57773, 30392 => 57774, 30393 => 57775, 30394 => 57776, 30402 => 57777, 30413 => 57778, 30422 => 57779, 30418 => 57780, 30430 => 57781, 30433 => 57782, 30437 => 57783, 30439 => 57784, 30442 => 57785, 34351 => 57786, 30459 => 57787, 30472 => 57788, 30471 => 57789, 30468 => 57790, 30505 => 57791, 30500 => 57792, 30494 => 57793, 30501 => 57794, 30502 => 57795, 30491 => 57796, 30519 => 57797, 30520 => 57798, 30535 => 57799, 30554 => 57800, 30568 => 57801, 30571 => 57802, 30555 => 57803, 30565 => 57804, 30591 => 57805, 30590 => 57806, 30585 => 57807, 30606 => 57808, 30603 => 57809, 30609 => 57810, 30624 => 57811, 30622 => 57812, 30640 => 57813, 30646 => 57814, 30649 => 57815, 30655 => 57816, 30652 => 57817, 30653 => 57818, 30651 => 57819, 30663 => 57820, 30669 => 57821, 30679 => 57822, 30682 => 57823, 30684 => 57824, 30691 => 57825, 30702 => 57826, 30716 => 57827, 30732 => 57828, 30738 => 57829, 31014 => 57830, 30752 => 57831, 31018 => 57832, 30789 => 57833, 30862 => 57834, 30836 => 57835, 30854 => 57836, 30844 => 57837, 30874 => 57838, 30860 => 57839, 30883 => 57840, 30901 => 57841, 30890 => 57842, 30895 => 57843, 30929 => 57844, 30918 => 57845, 30923 => 57846, 30932 => 57847, 30910 => 57848, 30908 => 57849, 30917 => 57850, 30922 => 57851, 30956 => 57852, 30951 => 57920, 30938 => 57921, 30973 => 57922, 30964 => 57923, 30983 => 57924, 30994 => 57925, 30993 => 57926, 31001 => 57927, 31020 => 57928, 31019 => 57929, 31040 => 57930, 31072 => 57931, 31063 => 57932, 31071 => 57933, 31066 => 57934, 31061 => 57935, 31059 => 57936, 31098 => 57937, 31103 => 57938, 31114 => 57939, 31133 => 57940, 31143 => 57941, 40779 => 57942, 31146 => 57943, 31150 => 57944, 31155 => 57945, 31161 => 57946, 31162 => 57947, 31177 => 57948, 31189 => 57949, 31207 => 57950, 31212 => 57951, 31201 => 57952, 31203 => 57953, 31240 => 57954, 31245 => 57955, 31256 => 57956, 31257 => 57957, 31264 => 57958, 31263 => 57959, 31104 => 57960, 31281 => 57961, 31291 => 57962, 31294 => 57963, 31287 => 57964, 31299 => 57965, 31319 => 57966, 31305 => 57967, 31329 => 57968, 31330 => 57969, 31337 => 57970, 40861 => 57971, 31344 => 57972, 31353 => 57973, 31357 => 57974, 31368 => 57975, 31383 => 57976, 31381 => 57977, 31384 => 57978, 31382 => 57979, 31401 => 57980, 31432 => 57981, 31408 => 57982, 31414 => 57984, 31429 => 57985, 31428 => 57986, 31423 => 57987, 36995 => 57988, 31431 => 57989, 31434 => 57990, 31437 => 57991, 31439 => 57992, 31445 => 57993, 31443 => 57994, 31449 => 57995, 31450 => 57996, 31453 => 57997, 31457 => 57998, 31458 => 57999, 31462 => 58000, 31469 => 58001, 31472 => 58002, 31490 => 58003, 31503 => 58004, 31498 => 58005, 31494 => 58006, 31539 => 58007, 31512 => 58008, 31513 => 58009, 31518 => 58010, 31541 => 58011, 31528 => 58012, 31542 => 58013, 31568 => 58014, 31610 => 58015, 31492 => 58016, 31565 => 58017, 31499 => 58018, 31564 => 58019, 31557 => 58020, 31605 => 58021, 31589 => 58022, 31604 => 58023, 31591 => 58024, 31600 => 58025, 31601 => 58026, 31596 => 58027, 31598 => 58028, 31645 => 58029, 31640 => 58030, 31647 => 58031, 31629 => 58032, 31644 => 58033, 31642 => 58034, 31627 => 58035, 31634 => 58036, 31631 => 58037, 31581 => 58038, 31641 => 58039, 31691 => 58040, 31681 => 58041, 31692 => 58042, 31695 => 58043, 31668 => 58044, 31686 => 58045, 31709 => 58046, 31721 => 58047, 31761 => 58048, 31764 => 58049, 31718 => 58050, 31717 => 58051, 31840 => 58052, 31744 => 58053, 31751 => 58054, 31763 => 58055, 31731 => 58056, 31735 => 58057, 31767 => 58058, 31757 => 58059, 31734 => 58060, 31779 => 58061, 31783 => 58062, 31786 => 58063, 31775 => 58064, 31799 => 58065, 31787 => 58066, 31805 => 58067, 31820 => 58068, 31811 => 58069, 31828 => 58070, 31823 => 58071, 31808 => 58072, 31824 => 58073, 31832 => 58074, 31839 => 58075, 31844 => 58076, 31830 => 58077, 31845 => 58078, 31852 => 58079, 31861 => 58080, 31875 => 58081, 31888 => 58082, 31908 => 58083, 31917 => 58084, 31906 => 58085, 31915 => 58086, 31905 => 58087, 31912 => 58088, 31923 => 58089, 31922 => 58090, 31921 => 58091, 31918 => 58092, 31929 => 58093, 31933 => 58094, 31936 => 58095, 31941 => 58096, 31938 => 58097, 31960 => 58098, 31954 => 58099, 31964 => 58100, 31970 => 58101, 39739 => 58102, 31983 => 58103, 31986 => 58104, 31988 => 58105, 31990 => 58106, 31994 => 58107, 32006 => 58108, 32002 => 58176, 32028 => 58177, 32021 => 58178, 32010 => 58179, 32069 => 58180, 32075 => 58181, 32046 => 58182, 32050 => 58183, 32063 => 58184, 32053 => 58185, 32070 => 58186, 32115 => 58187, 32086 => 58188, 32078 => 58189, 32114 => 58190, 32104 => 58191, 32110 => 58192, 32079 => 58193, 32099 => 58194, 32147 => 58195, 32137 => 58196, 32091 => 58197, 32143 => 58198, 32125 => 58199, 32155 => 58200, 32186 => 58201, 32174 => 58202, 32163 => 58203, 32181 => 58204, 32199 => 58205, 32189 => 58206, 32171 => 58207, 32317 => 58208, 32162 => 58209, 32175 => 58210, 32220 => 58211, 32184 => 58212, 32159 => 58213, 32176 => 58214, 32216 => 58215, 32221 => 58216, 32228 => 58217, 32222 => 58218, 32251 => 58219, 32242 => 58220, 32225 => 58221, 32261 => 58222, 32266 => 58223, 32291 => 58224, 32289 => 58225, 32274 => 58226, 32305 => 58227, 32287 => 58228, 32265 => 58229, 32267 => 58230, 32290 => 58231, 32326 => 58232, 32358 => 58233, 32315 => 58234, 32309 => 58235, 32313 => 58236, 32323 => 58237, 32311 => 58238, 32306 => 58240, 32314 => 58241, 32359 => 58242, 32349 => 58243, 32342 => 58244, 32350 => 58245, 32345 => 58246, 32346 => 58247, 32377 => 58248, 32362 => 58249, 32361 => 58250, 32380 => 58251, 32379 => 58252, 32387 => 58253, 32213 => 58254, 32381 => 58255, 36782 => 58256, 32383 => 58257, 32392 => 58258, 32393 => 58259, 32396 => 58260, 32402 => 58261, 32400 => 58262, 32403 => 58263, 32404 => 58264, 32406 => 58265, 32398 => 58266, 32411 => 58267, 32412 => 58268, 32568 => 58269, 32570 => 58270, 32581 => 58271, 32588 => 58272, 32589 => 58273, 32590 => 58274, 32592 => 58275, 32593 => 58276, 32597 => 58277, 32596 => 58278, 32600 => 58279, 32607 => 58280, 32608 => 58281, 32616 => 58282, 32617 => 58283, 32615 => 58284, 32632 => 58285, 32642 => 58286, 32646 => 58287, 32643 => 58288, 32648 => 58289, 32647 => 58290, 32652 => 58291, 32660 => 58292, 32670 => 58293, 32669 => 58294, 32666 => 58295, 32675 => 58296, 32687 => 58297, 32690 => 58298, 32697 => 58299, 32686 => 58300, 32694 => 58301, 32696 => 58302, 35697 => 58303, 32709 => 58304, 32710 => 58305, 32714 => 58306, 32725 => 58307, 32724 => 58308, 32737 => 58309, 32742 => 58310, 32745 => 58311, 32755 => 58312, 32761 => 58313, 39132 => 58314, 32774 => 58315, 32772 => 58316, 32779 => 58317, 32786 => 58318, 32792 => 58319, 32793 => 58320, 32796 => 58321, 32801 => 58322, 32808 => 58323, 32831 => 58324, 32827 => 58325, 32842 => 58326, 32838 => 58327, 32850 => 58328, 32856 => 58329, 32858 => 58330, 32863 => 58331, 32866 => 58332, 32872 => 58333, 32883 => 58334, 32882 => 58335, 32880 => 58336, 32886 => 58337, 32889 => 58338, 32893 => 58339, 32895 => 58340, 32900 => 58341, 32902 => 58342, 32901 => 58343, 32923 => 58344, 32915 => 58345, 32922 => 58346, 32941 => 58347, 20880 => 58348, 32940 => 58349, 32987 => 58350, 32997 => 58351, 32985 => 58352, 32989 => 58353, 32964 => 58354, 32986 => 58355, 32982 => 58356, 33033 => 58357, 33007 => 58358, 33009 => 58359, 33051 => 58360, 33065 => 58361, 33059 => 58362, 33071 => 58363, 33099 => 58364, 38539 => 58432, 33094 => 58433, 33086 => 58434, 33107 => 58435, 33105 => 58436, 33020 => 58437, 33137 => 58438, 33134 => 58439, 33125 => 58440, 33126 => 58441, 33140 => 58442, 33155 => 58443, 33160 => 58444, 33162 => 58445, 33152 => 58446, 33154 => 58447, 33184 => 58448, 33173 => 58449, 33188 => 58450, 33187 => 58451, 33119 => 58452, 33171 => 58453, 33193 => 58454, 33200 => 58455, 33205 => 58456, 33214 => 58457, 33208 => 58458, 33213 => 58459, 33216 => 58460, 33218 => 58461, 33210 => 58462, 33225 => 58463, 33229 => 58464, 33233 => 58465, 33241 => 58466, 33240 => 58467, 33224 => 58468, 33242 => 58469, 33247 => 58470, 33248 => 58471, 33255 => 58472, 33274 => 58473, 33275 => 58474, 33278 => 58475, 33281 => 58476, 33282 => 58477, 33285 => 58478, 33287 => 58479, 33290 => 58480, 33293 => 58481, 33296 => 58482, 33302 => 58483, 33321 => 58484, 33323 => 58485, 33336 => 58486, 33331 => 58487, 33344 => 58488, 33369 => 58489, 33368 => 58490, 33373 => 58491, 33370 => 58492, 33375 => 58493, 33380 => 58494, 33378 => 58496, 33384 => 58497, 33386 => 58498, 33387 => 58499, 33326 => 58500, 33393 => 58501, 33399 => 58502, 33400 => 58503, 33406 => 58504, 33421 => 58505, 33426 => 58506, 33451 => 58507, 33439 => 58508, 33467 => 58509, 33452 => 58510, 33505 => 58511, 33507 => 58512, 33503 => 58513, 33490 => 58514, 33524 => 58515, 33523 => 58516, 33530 => 58517, 33683 => 58518, 33539 => 58519, 33531 => 58520, 33529 => 58521, 33502 => 58522, 33542 => 58523, 33500 => 58524, 33545 => 58525, 33497 => 58526, 33589 => 58527, 33588 => 58528, 33558 => 58529, 33586 => 58530, 33585 => 58531, 33600 => 58532, 33593 => 58533, 33616 => 58534, 33605 => 58535, 33583 => 58536, 33579 => 58537, 33559 => 58538, 33560 => 58539, 33669 => 58540, 33690 => 58541, 33706 => 58542, 33695 => 58543, 33698 => 58544, 33686 => 58545, 33571 => 58546, 33678 => 58547, 33671 => 58548, 33674 => 58549, 33660 => 58550, 33717 => 58551, 33651 => 58552, 33653 => 58553, 33696 => 58554, 33673 => 58555, 33704 => 58556, 33780 => 58557, 33811 => 58558, 33771 => 58559, 33742 => 58560, 33789 => 58561, 33795 => 58562, 33752 => 58563, 33803 => 58564, 33729 => 58565, 33783 => 58566, 33799 => 58567, 33760 => 58568, 33778 => 58569, 33805 => 58570, 33826 => 58571, 33824 => 58572, 33725 => 58573, 33848 => 58574, 34054 => 58575, 33787 => 58576, 33901 => 58577, 33834 => 58578, 33852 => 58579, 34138 => 58580, 33924 => 58581, 33911 => 58582, 33899 => 58583, 33965 => 58584, 33902 => 58585, 33922 => 58586, 33897 => 58587, 33862 => 58588, 33836 => 58589, 33903 => 58590, 33913 => 58591, 33845 => 58592, 33994 => 58593, 33890 => 58594, 33977 => 58595, 33983 => 58596, 33951 => 58597, 34009 => 58598, 33997 => 58599, 33979 => 58600, 34010 => 58601, 34000 => 58602, 33985 => 58603, 33990 => 58604, 34006 => 58605, 33953 => 58606, 34081 => 58607, 34047 => 58608, 34036 => 58609, 34071 => 58610, 34072 => 58611, 34092 => 58612, 34079 => 58613, 34069 => 58614, 34068 => 58615, 34044 => 58616, 34112 => 58617, 34147 => 58618, 34136 => 58619, 34120 => 58620, 34113 => 58688, 34306 => 58689, 34123 => 58690, 34133 => 58691, 34176 => 58692, 34212 => 58693, 34184 => 58694, 34193 => 58695, 34186 => 58696, 34216 => 58697, 34157 => 58698, 34196 => 58699, 34203 => 58700, 34282 => 58701, 34183 => 58702, 34204 => 58703, 34167 => 58704, 34174 => 58705, 34192 => 58706, 34249 => 58707, 34234 => 58708, 34255 => 58709, 34233 => 58710, 34256 => 58711, 34261 => 58712, 34269 => 58713, 34277 => 58714, 34268 => 58715, 34297 => 58716, 34314 => 58717, 34323 => 58718, 34315 => 58719, 34302 => 58720, 34298 => 58721, 34310 => 58722, 34338 => 58723, 34330 => 58724, 34352 => 58725, 34367 => 58726, 34381 => 58727, 20053 => 58728, 34388 => 58729, 34399 => 58730, 34407 => 58731, 34417 => 58732, 34451 => 58733, 34467 => 58734, 34473 => 58735, 34474 => 58736, 34443 => 58737, 34444 => 58738, 34486 => 58739, 34479 => 58740, 34500 => 58741, 34502 => 58742, 34480 => 58743, 34505 => 58744, 34851 => 58745, 34475 => 58746, 34516 => 58747, 34526 => 58748, 34537 => 58749, 34540 => 58750, 34527 => 58752, 34523 => 58753, 34543 => 58754, 34578 => 58755, 34566 => 58756, 34568 => 58757, 34560 => 58758, 34563 => 58759, 34555 => 58760, 34577 => 58761, 34569 => 58762, 34573 => 58763, 34553 => 58764, 34570 => 58765, 34612 => 58766, 34623 => 58767, 34615 => 58768, 34619 => 58769, 34597 => 58770, 34601 => 58771, 34586 => 58772, 34656 => 58773, 34655 => 58774, 34680 => 58775, 34636 => 58776, 34638 => 58777, 34676 => 58778, 34647 => 58779, 34664 => 58780, 34670 => 58781, 34649 => 58782, 34643 => 58783, 34659 => 58784, 34666 => 58785, 34821 => 58786, 34722 => 58787, 34719 => 58788, 34690 => 58789, 34735 => 58790, 34763 => 58791, 34749 => 58792, 34752 => 58793, 34768 => 58794, 38614 => 58795, 34731 => 58796, 34756 => 58797, 34739 => 58798, 34759 => 58799, 34758 => 58800, 34747 => 58801, 34799 => 58802, 34802 => 58803, 34784 => 58804, 34831 => 58805, 34829 => 58806, 34814 => 58807, 34806 => 58808, 34807 => 58809, 34830 => 58810, 34770 => 58811, 34833 => 58812, 34838 => 58813, 34837 => 58814, 34850 => 58815, 34849 => 58816, 34865 => 58817, 34870 => 58818, 34873 => 58819, 34855 => 58820, 34875 => 58821, 34884 => 58822, 34882 => 58823, 34898 => 58824, 34905 => 58825, 34910 => 58826, 34914 => 58827, 34923 => 58828, 34945 => 58829, 34942 => 58830, 34974 => 58831, 34933 => 58832, 34941 => 58833, 34997 => 58834, 34930 => 58835, 34946 => 58836, 34967 => 58837, 34962 => 58838, 34990 => 58839, 34969 => 58840, 34978 => 58841, 34957 => 58842, 34980 => 58843, 34992 => 58844, 35007 => 58845, 34993 => 58846, 35011 => 58847, 35012 => 58848, 35028 => 58849, 35032 => 58850, 35033 => 58851, 35037 => 58852, 35065 => 58853, 35074 => 58854, 35068 => 58855, 35060 => 58856, 35048 => 58857, 35058 => 58858, 35076 => 58859, 35084 => 58860, 35082 => 58861, 35091 => 58862, 35139 => 58863, 35102 => 58864, 35109 => 58865, 35114 => 58866, 35115 => 58867, 35137 => 58868, 35140 => 58869, 35131 => 58870, 35126 => 58871, 35128 => 58872, 35148 => 58873, 35101 => 58874, 35168 => 58875, 35166 => 58876, 35174 => 58944, 35172 => 58945, 35181 => 58946, 35178 => 58947, 35183 => 58948, 35188 => 58949, 35191 => 58950, 35198 => 58951, 35203 => 58952, 35208 => 58953, 35210 => 58954, 35219 => 58955, 35224 => 58956, 35233 => 58957, 35241 => 58958, 35238 => 58959, 35244 => 58960, 35247 => 58961, 35250 => 58962, 35258 => 58963, 35261 => 58964, 35263 => 58965, 35264 => 58966, 35290 => 58967, 35292 => 58968, 35293 => 58969, 35303 => 58970, 35316 => 58971, 35320 => 58972, 35331 => 58973, 35350 => 58974, 35344 => 58975, 35340 => 58976, 35355 => 58977, 35357 => 58978, 35365 => 58979, 35382 => 58980, 35393 => 58981, 35419 => 58982, 35410 => 58983, 35398 => 58984, 35400 => 58985, 35452 => 58986, 35437 => 58987, 35436 => 58988, 35426 => 58989, 35461 => 58990, 35458 => 58991, 35460 => 58992, 35496 => 58993, 35489 => 58994, 35473 => 58995, 35493 => 58996, 35494 => 58997, 35482 => 58998, 35491 => 58999, 35524 => 59000, 35533 => 59001, 35522 => 59002, 35546 => 59003, 35563 => 59004, 35571 => 59005, 35559 => 59006, 35556 => 59008, 35569 => 59009, 35604 => 59010, 35552 => 59011, 35554 => 59012, 35575 => 59013, 35550 => 59014, 35547 => 59015, 35596 => 59016, 35591 => 59017, 35610 => 59018, 35553 => 59019, 35606 => 59020, 35600 => 59021, 35607 => 59022, 35616 => 59023, 35635 => 59024, 38827 => 59025, 35622 => 59026, 35627 => 59027, 35646 => 59028, 35624 => 59029, 35649 => 59030, 35660 => 59031, 35663 => 59032, 35662 => 59033, 35657 => 59034, 35670 => 59035, 35675 => 59036, 35674 => 59037, 35691 => 59038, 35679 => 59039, 35692 => 59040, 35695 => 59041, 35700 => 59042, 35709 => 59043, 35712 => 59044, 35724 => 59045, 35726 => 59046, 35730 => 59047, 35731 => 59048, 35734 => 59049, 35737 => 59050, 35738 => 59051, 35898 => 59052, 35905 => 59053, 35903 => 59054, 35912 => 59055, 35916 => 59056, 35918 => 59057, 35920 => 59058, 35925 => 59059, 35938 => 59060, 35948 => 59061, 35960 => 59062, 35962 => 59063, 35970 => 59064, 35977 => 59065, 35973 => 59066, 35978 => 59067, 35981 => 59068, 35982 => 59069, 35988 => 59070, 35964 => 59071, 35992 => 59072, 25117 => 59073, 36013 => 59074, 36010 => 59075, 36029 => 59076, 36018 => 59077, 36019 => 59078, 36014 => 59079, 36022 => 59080, 36040 => 59081, 36033 => 59082, 36068 => 59083, 36067 => 59084, 36058 => 59085, 36093 => 59086, 36090 => 59087, 36091 => 59088, 36100 => 59089, 36101 => 59090, 36106 => 59091, 36103 => 59092, 36111 => 59093, 36109 => 59094, 36112 => 59095, 40782 => 59096, 36115 => 59097, 36045 => 59098, 36116 => 59099, 36118 => 59100, 36199 => 59101, 36205 => 59102, 36209 => 59103, 36211 => 59104, 36225 => 59105, 36249 => 59106, 36290 => 59107, 36286 => 59108, 36282 => 59109, 36303 => 59110, 36314 => 59111, 36310 => 59112, 36300 => 59113, 36315 => 59114, 36299 => 59115, 36330 => 59116, 36331 => 59117, 36319 => 59118, 36323 => 59119, 36348 => 59120, 36360 => 59121, 36361 => 59122, 36351 => 59123, 36381 => 59124, 36382 => 59125, 36368 => 59126, 36383 => 59127, 36418 => 59128, 36405 => 59129, 36400 => 59130, 36404 => 59131, 36426 => 59132, 36423 => 59200, 36425 => 59201, 36428 => 59202, 36432 => 59203, 36424 => 59204, 36441 => 59205, 36452 => 59206, 36448 => 59207, 36394 => 59208, 36451 => 59209, 36437 => 59210, 36470 => 59211, 36466 => 59212, 36476 => 59213, 36481 => 59214, 36487 => 59215, 36485 => 59216, 36484 => 59217, 36491 => 59218, 36490 => 59219, 36499 => 59220, 36497 => 59221, 36500 => 59222, 36505 => 59223, 36522 => 59224, 36513 => 59225, 36524 => 59226, 36528 => 59227, 36550 => 59228, 36529 => 59229, 36542 => 59230, 36549 => 59231, 36552 => 59232, 36555 => 59233, 36571 => 59234, 36579 => 59235, 36604 => 59236, 36603 => 59237, 36587 => 59238, 36606 => 59239, 36618 => 59240, 36613 => 59241, 36629 => 59242, 36626 => 59243, 36633 => 59244, 36627 => 59245, 36636 => 59246, 36639 => 59247, 36635 => 59248, 36620 => 59249, 36646 => 59250, 36659 => 59251, 36667 => 59252, 36665 => 59253, 36677 => 59254, 36674 => 59255, 36670 => 59256, 36684 => 59257, 36681 => 59258, 36678 => 59259, 36686 => 59260, 36695 => 59261, 36700 => 59262, 36706 => 59264, 36707 => 59265, 36708 => 59266, 36764 => 59267, 36767 => 59268, 36771 => 59269, 36781 => 59270, 36783 => 59271, 36791 => 59272, 36826 => 59273, 36837 => 59274, 36834 => 59275, 36842 => 59276, 36847 => 59277, 36999 => 59278, 36852 => 59279, 36869 => 59280, 36857 => 59281, 36858 => 59282, 36881 => 59283, 36885 => 59284, 36897 => 59285, 36877 => 59286, 36894 => 59287, 36886 => 59288, 36875 => 59289, 36903 => 59290, 36918 => 59291, 36917 => 59292, 36921 => 59293, 36856 => 59294, 36943 => 59295, 36944 => 59296, 36945 => 59297, 36946 => 59298, 36878 => 59299, 36937 => 59300, 36926 => 59301, 36950 => 59302, 36952 => 59303, 36958 => 59304, 36968 => 59305, 36975 => 59306, 36982 => 59307, 38568 => 59308, 36978 => 59309, 36994 => 59310, 36989 => 59311, 36993 => 59312, 36992 => 59313, 37002 => 59314, 37001 => 59315, 37007 => 59316, 37032 => 59317, 37039 => 59318, 37041 => 59319, 37045 => 59320, 37090 => 59321, 37092 => 59322, 25160 => 59323, 37083 => 59324, 37122 => 59325, 37138 => 59326, 37145 => 59327, 37170 => 59328, 37168 => 59329, 37194 => 59330, 37206 => 59331, 37208 => 59332, 37219 => 59333, 37221 => 59334, 37225 => 59335, 37235 => 59336, 37234 => 59337, 37259 => 59338, 37257 => 59339, 37250 => 59340, 37282 => 59341, 37291 => 59342, 37295 => 59343, 37290 => 59344, 37301 => 59345, 37300 => 59346, 37306 => 59347, 37312 => 59348, 37313 => 59349, 37321 => 59350, 37323 => 59351, 37328 => 59352, 37334 => 59353, 37343 => 59354, 37345 => 59355, 37339 => 59356, 37372 => 59357, 37365 => 59358, 37366 => 59359, 37406 => 59360, 37375 => 59361, 37396 => 59362, 37420 => 59363, 37397 => 59364, 37393 => 59365, 37470 => 59366, 37463 => 59367, 37445 => 59368, 37449 => 59369, 37476 => 59370, 37448 => 59371, 37525 => 59372, 37439 => 59373, 37451 => 59374, 37456 => 59375, 37532 => 59376, 37526 => 59377, 37523 => 59378, 37531 => 59379, 37466 => 59380, 37583 => 59381, 37561 => 59382, 37559 => 59383, 37609 => 59384, 37647 => 59385, 37626 => 59386, 37700 => 59387, 37678 => 59388, 37657 => 59456, 37666 => 59457, 37658 => 59458, 37667 => 59459, 37690 => 59460, 37685 => 59461, 37691 => 59462, 37724 => 59463, 37728 => 59464, 37756 => 59465, 37742 => 59466, 37718 => 59467, 37808 => 59468, 37804 => 59469, 37805 => 59470, 37780 => 59471, 37817 => 59472, 37846 => 59473, 37847 => 59474, 37864 => 59475, 37861 => 59476, 37848 => 59477, 37827 => 59478, 37853 => 59479, 37840 => 59480, 37832 => 59481, 37860 => 59482, 37914 => 59483, 37908 => 59484, 37907 => 59485, 37891 => 59486, 37895 => 59487, 37904 => 59488, 37942 => 59489, 37931 => 59490, 37941 => 59491, 37921 => 59492, 37946 => 59493, 37953 => 59494, 37970 => 59495, 37956 => 59496, 37979 => 59497, 37984 => 59498, 37986 => 59499, 37982 => 59500, 37994 => 59501, 37417 => 59502, 38000 => 59503, 38005 => 59504, 38007 => 59505, 38013 => 59506, 37978 => 59507, 38012 => 59508, 38014 => 59509, 38017 => 59510, 38015 => 59511, 38274 => 59512, 38279 => 59513, 38282 => 59514, 38292 => 59515, 38294 => 59516, 38296 => 59517, 38297 => 59518, 38304 => 59520, 38312 => 59521, 38311 => 59522, 38317 => 59523, 38332 => 59524, 38331 => 59525, 38329 => 59526, 38334 => 59527, 38346 => 59528, 28662 => 59529, 38339 => 59530, 38349 => 59531, 38348 => 59532, 38357 => 59533, 38356 => 59534, 38358 => 59535, 38364 => 59536, 38369 => 59537, 38373 => 59538, 38370 => 59539, 38433 => 59540, 38440 => 59541, 38446 => 59542, 38447 => 59543, 38466 => 59544, 38476 => 59545, 38479 => 59546, 38475 => 59547, 38519 => 59548, 38492 => 59549, 38494 => 59550, 38493 => 59551, 38495 => 59552, 38502 => 59553, 38514 => 59554, 38508 => 59555, 38541 => 59556, 38552 => 59557, 38549 => 59558, 38551 => 59559, 38570 => 59560, 38567 => 59561, 38577 => 59562, 38578 => 59563, 38576 => 59564, 38580 => 59565, 38582 => 59566, 38584 => 59567, 38585 => 59568, 38606 => 59569, 38603 => 59570, 38601 => 59571, 38605 => 59572, 35149 => 59573, 38620 => 59574, 38669 => 59575, 38613 => 59576, 38649 => 59577, 38660 => 59578, 38662 => 59579, 38664 => 59580, 38675 => 59581, 38670 => 59582, 38673 => 59583, 38671 => 59584, 38678 => 59585, 38681 => 59586, 38692 => 59587, 38698 => 59588, 38704 => 59589, 38713 => 59590, 38717 => 59591, 38718 => 59592, 38724 => 59593, 38726 => 59594, 38728 => 59595, 38722 => 59596, 38729 => 59597, 38748 => 59598, 38752 => 59599, 38756 => 59600, 38758 => 59601, 38760 => 59602, 21202 => 59603, 38763 => 59604, 38769 => 59605, 38777 => 59606, 38789 => 59607, 38780 => 59608, 38785 => 59609, 38778 => 59610, 38790 => 59611, 38795 => 59612, 38799 => 59613, 38800 => 59614, 38812 => 59615, 38824 => 59616, 38822 => 59617, 38819 => 59618, 38835 => 59619, 38836 => 59620, 38851 => 59621, 38854 => 59622, 38856 => 59623, 38859 => 59624, 38876 => 59625, 38893 => 59626, 40783 => 59627, 38898 => 59628, 31455 => 59629, 38902 => 59630, 38901 => 59631, 38927 => 59632, 38924 => 59633, 38968 => 59634, 38948 => 59635, 38945 => 59636, 38967 => 59637, 38973 => 59638, 38982 => 59639, 38991 => 59640, 38987 => 59641, 39019 => 59642, 39023 => 59643, 39024 => 59644, 39025 => 59712, 39028 => 59713, 39027 => 59714, 39082 => 59715, 39087 => 59716, 39089 => 59717, 39094 => 59718, 39108 => 59719, 39107 => 59720, 39110 => 59721, 39145 => 59722, 39147 => 59723, 39171 => 59724, 39177 => 59725, 39186 => 59726, 39188 => 59727, 39192 => 59728, 39201 => 59729, 39197 => 59730, 39198 => 59731, 39204 => 59732, 39200 => 59733, 39212 => 59734, 39214 => 59735, 39229 => 59736, 39230 => 59737, 39234 => 59738, 39241 => 59739, 39237 => 59740, 39248 => 59741, 39243 => 59742, 39249 => 59743, 39250 => 59744, 39244 => 59745, 39253 => 59746, 39319 => 59747, 39320 => 59748, 39333 => 59749, 39341 => 59750, 39342 => 59751, 39356 => 59752, 39391 => 59753, 39387 => 59754, 39389 => 59755, 39384 => 59756, 39377 => 59757, 39405 => 59758, 39406 => 59759, 39409 => 59760, 39410 => 59761, 39419 => 59762, 39416 => 59763, 39425 => 59764, 39439 => 59765, 39429 => 59766, 39394 => 59767, 39449 => 59768, 39467 => 59769, 39479 => 59770, 39493 => 59771, 39490 => 59772, 39488 => 59773, 39491 => 59774, 39486 => 59776, 39509 => 59777, 39501 => 59778, 39515 => 59779, 39511 => 59780, 39519 => 59781, 39522 => 59782, 39525 => 59783, 39524 => 59784, 39529 => 59785, 39531 => 59786, 39530 => 59787, 39597 => 59788, 39600 => 59789, 39612 => 59790, 39616 => 59791, 39631 => 59792, 39633 => 59793, 39635 => 59794, 39636 => 59795, 39646 => 59796, 39647 => 59797, 39650 => 59798, 39651 => 59799, 39654 => 59800, 39663 => 59801, 39659 => 59802, 39662 => 59803, 39668 => 59804, 39665 => 59805, 39671 => 59806, 39675 => 59807, 39686 => 59808, 39704 => 59809, 39706 => 59810, 39711 => 59811, 39714 => 59812, 39715 => 59813, 39717 => 59814, 39719 => 59815, 39720 => 59816, 39721 => 59817, 39722 => 59818, 39726 => 59819, 39727 => 59820, 39730 => 59821, 39748 => 59822, 39747 => 59823, 39759 => 59824, 39757 => 59825, 39758 => 59826, 39761 => 59827, 39768 => 59828, 39796 => 59829, 39827 => 59830, 39811 => 59831, 39825 => 59832, 39830 => 59833, 39831 => 59834, 39839 => 59835, 39840 => 59836, 39848 => 59837, 39860 => 59838, 39872 => 59839, 39882 => 59840, 39865 => 59841, 39878 => 59842, 39887 => 59843, 39889 => 59844, 39890 => 59845, 39907 => 59846, 39906 => 59847, 39908 => 59848, 39892 => 59849, 39905 => 59850, 39994 => 59851, 39922 => 59852, 39921 => 59853, 39920 => 59854, 39957 => 59855, 39956 => 59856, 39945 => 59857, 39955 => 59858, 39948 => 59859, 39942 => 59860, 39944 => 59861, 39954 => 59862, 39946 => 59863, 39940 => 59864, 39982 => 59865, 39963 => 59866, 39973 => 59867, 39972 => 59868, 39969 => 59869, 39984 => 59870, 40007 => 59871, 39986 => 59872, 40006 => 59873, 39998 => 59874, 40026 => 59875, 40032 => 59876, 40039 => 59877, 40054 => 59878, 40056 => 59879, 40167 => 59880, 40172 => 59881, 40176 => 59882, 40201 => 59883, 40200 => 59884, 40171 => 59885, 40195 => 59886, 40198 => 59887, 40234 => 59888, 40230 => 59889, 40367 => 59890, 40227 => 59891, 40223 => 59892, 40260 => 59893, 40213 => 59894, 40210 => 59895, 40257 => 59896, 40255 => 59897, 40254 => 59898, 40262 => 59899, 40264 => 59900, 40285 => 59968, 40286 => 59969, 40292 => 59970, 40273 => 59971, 40272 => 59972, 40281 => 59973, 40306 => 59974, 40329 => 59975, 40327 => 59976, 40363 => 59977, 40303 => 59978, 40314 => 59979, 40346 => 59980, 40356 => 59981, 40361 => 59982, 40370 => 59983, 40388 => 59984, 40385 => 59985, 40379 => 59986, 40376 => 59987, 40378 => 59988, 40390 => 59989, 40399 => 59990, 40386 => 59991, 40409 => 59992, 40403 => 59993, 40440 => 59994, 40422 => 59995, 40429 => 59996, 40431 => 59997, 40445 => 59998, 40474 => 59999, 40475 => 60000, 40478 => 60001, 40565 => 60002, 40569 => 60003, 40573 => 60004, 40577 => 60005, 40584 => 60006, 40587 => 60007, 40588 => 60008, 40594 => 60009, 40597 => 60010, 40593 => 60011, 40605 => 60012, 40613 => 60013, 40617 => 60014, 40632 => 60015, 40618 => 60016, 40621 => 60017, 38753 => 60018, 40652 => 60019, 40654 => 60020, 40655 => 60021, 40656 => 60022, 40660 => 60023, 40668 => 60024, 40670 => 60025, 40669 => 60026, 40672 => 60027, 40677 => 60028, 40680 => 60029, 40687 => 60030, 40692 => 60032, 40694 => 60033, 40695 => 60034, 40697 => 60035, 40699 => 60036, 40700 => 60037, 40701 => 60038, 40711 => 60039, 40712 => 60040, 30391 => 60041, 40725 => 60042, 40737 => 60043, 40748 => 60044, 40766 => 60045, 40778 => 60046, 40786 => 60047, 40788 => 60048, 40803 => 60049, 40799 => 60050, 40800 => 60051, 40801 => 60052, 40806 => 60053, 40807 => 60054, 40812 => 60055, 40810 => 60056, 40823 => 60057, 40818 => 60058, 40822 => 60059, 40853 => 60060, 40860 => 60061, 40864 => 60062, 22575 => 60063, 27079 => 60064, 36953 => 60065, 29796 => 60066, 20956 => 60067, 29081 => 60068}","doc":"Generated based on the conversion table at:\nhttps://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/JIS/JIS0208.TXT\nFormat: Unicode => Shift JIS","summary":"<p>Generated based on the conversion table at: https://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/JIS/JIS0208.TXT Format: Unicode =&gt; Shift JIS</p>"},{"id":"VERSION","name":"VERSION","value":"\"1.8.0\""}],"types":[{"html_id":"goban/Goban/AbstractQR","path":"Goban/AbstractQR.html","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR","abstract":true,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/abstract.cr","line_number":4,"url":null},{"filename":"src/goban/abstract/mask.cr","line_number":1,"url":null},{"filename":"src/goban/abstract/template.cr","line_number":1,"url":null},{"filename":"src/goban/abstract/version.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/goban/abstract/mask.cr","line_number":1,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"canvas-instance-method","name":"canvas","abstract":false,"location":{"filename":"src/goban/abstract.cr","line_number":8,"url":null},"def":{"name":"canvas","visibility":"Public","body":"@canvas"}},{"html_id":"ecl-instance-method","name":"ecl","abstract":false,"location":{"filename":"src/goban/abstract.cr","line_number":6,"url":null},"def":{"name":"ecl","visibility":"Public","body":"@ecl"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/goban/abstract/mask.cr","line_number":1,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"print_to_console-instance-method","name":"print_to_console","doc":"Prints the QR Code symbol as a text in the console. To generate the actual image file,\nuse `PNGExporter` or write your own exporter by reading each modules in `#canvas`.","summary":"<p>Prints the QR Code symbol as a text in the console.</p>","abstract":false,"location":{"filename":"src/goban/abstract.cr","line_number":13,"url":null},"def":{"name":"print_to_console","visibility":"Public","body":"@canvas.print_to_console"}},{"html_id":"segments-instance-method","name":"segments","abstract":false,"location":{"filename":"src/goban/abstract.cr","line_number":7,"url":null},"def":{"name":"segments","visibility":"Public","body":"@segments"}},{"html_id":"size-instance-method","name":"size","abstract":false,"location":{"filename":"src/goban/abstract.cr","line_number":9,"url":null},"def":{"name":"size","visibility":"Public","body":"@size"}},{"html_id":"version-instance-method","name":"version","abstract":false,"location":{"filename":"src/goban/abstract.cr","line_number":5,"url":null},"def":{"name":"version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/AbstractQR/Mask","path":"Goban/AbstractQR/Mask.html","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask","abstract":true,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/abstract/mask.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"goban/Goban/MQR/Mask","kind":"struct","full_name":"Goban::MQR::Mask","name":"Mask"},{"html_id":"goban/Goban/QR/Mask","kind":"struct","full_name":"Goban::QR::Mask","name":"Mask"},{"html_id":"goban/Goban/RMQR/Mask","kind":"struct","full_name":"Goban::RMQR::Mask","name":"Mask"}],"namespace":{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},"instance_methods":[{"html_id":"value:UInt8-instance-method","name":"value","abstract":false,"location":{"filename":"src/goban/abstract/mask.cr","line_number":3,"url":null},"def":{"name":"value","return_type":"UInt8","visibility":"Public","body":"@value"}}]},{"html_id":"goban/Goban/AbstractQR/Template","path":"Goban/AbstractQR/Template.html","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template","abstract":false,"locations":[{"filename":"src/goban/abstract/template.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALIGNMENT_PATTERN","name":"ALIGNMENT_PATTERN","value":"FINDER_SUB_PATTERN"},{"id":"FINDER_PATTERN","name":"FINDER_PATTERN","value":"{193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 192_u8, 192_u8, 192_u8, 192_u8, 192_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 192_u8, 192_u8, 192_u8, 192_u8, 192_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8}"},{"id":"FINDER_SUB_PATTERN","name":"FINDER_SUB_PATTERN","value":"{193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 192_u8, 192_u8, 192_u8, 193_u8, 193_u8, 192_u8, 193_u8, 192_u8, 193_u8, 193_u8, 192_u8, 192_u8, 192_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8, 193_u8}"},{"id":"RMQR_ALIGNMENT_PATTERN","name":"RMQR_ALIGNMENT_PATTERN","value":"{193_u8, 193_u8, 193_u8, 193_u8, 192_u8, 193_u8, 193_u8, 193_u8, 193_u8}"}],"including_types":[{"html_id":"goban/Goban/MQR/Template","kind":"module","full_name":"Goban::MQR::Template","name":"Template"},{"html_id":"goban/Goban/QR/Template","kind":"module","full_name":"Goban::QR::Template","name":"Template"},{"html_id":"goban/Goban/RMQR/Template","kind":"module","full_name":"Goban::RMQR::Template","name":"Template"}],"namespace":{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"}},{"html_id":"goban/Goban/AbstractQR/Version","path":"Goban/AbstractQR/Version.html","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version","abstract":true,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/abstract/version.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"subclasses":[{"html_id":"goban/Goban/MQR/Version","kind":"struct","full_name":"Goban::MQR::Version","name":"Version"},{"html_id":"goban/Goban/QR/Version","kind":"struct","full_name":"Goban::QR::Version","name":"Version"},{"html_id":"goban/Goban/RMQR/Version","kind":"struct","full_name":"Goban::RMQR::Version","name":"Version"}],"namespace":{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},"instance_methods":[{"html_id":"<=>(other:Int)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","args_html":"(other : Int)","location":{"filename":"src/goban/abstract/version.cr","line_number":14,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Int"}],"visibility":"Public","body":"@value <=> other"}},{"html_id":"symbol_size-instance-method","name":"symbol_size","abstract":false,"location":{"filename":"src/goban/abstract/version.cr","line_number":7,"url":null},"def":{"name":"symbol_size","visibility":"Public","body":"@symbol_size"}},{"html_id":"to_i-instance-method","name":"to_i","abstract":false,"location":{"filename":"src/goban/abstract/version.cr","line_number":18,"url":null},"def":{"name":"to_i","visibility":"Public","body":"value"}},{"html_id":"value-instance-method","name":"value","abstract":false,"location":{"filename":"src/goban/abstract/version.cr","line_number":5,"url":null},"def":{"name":"value","visibility":"Public","body":"@value"}}]}]},{"html_id":"goban/Goban/BitStream","path":"Goban/BitStream.html","kind":"struct","full_name":"Goban::BitStream","name":"BitStream","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"goban/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"goban/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"goban/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/bitstream.cr","line_number":4,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PAD0","name":"PAD0","value":"236"},{"id":"PAD1","name":"PAD1","value":"17"}],"included_modules":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"An array data structure that holds bits.\nBased on the `BitArray` object of the standard library.","summary":"<p>An array data structure that holds bits.</p>","constructors":[{"html_id":"new(size:Int)-class-method","name":"new","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int"}],"args_string":"(size : Int)","args_html":"(size : Int)","location":{"filename":"src/goban/bitstream.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(bytes:Slice(UInt8))-class-method","name":"new","abstract":false,"args":[{"name":"bytes","external_name":"bytes","restriction":"Slice(UInt8)"}],"args_string":"(bytes : Slice(UInt8))","args_html":"(bytes : Slice(UInt8))","location":{"filename":"src/goban/bitstream.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"bytes","external_name":"bytes","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bytes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:BitStream)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"BitStream"}],"args_string":"(other : BitStream)","args_html":"(other : <a href=\"../Goban/BitStream.html\">BitStream</a>)","location":{"filename":"src/goban/bitstream.cr","line_number":159,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"BitStream"}],"visibility":"Public","body":"min_size = Math.min(size, other.size)\n(0...min_size).each do |i|\n  if self[i] != other[i]\n    return nil\n  end\nend\nsize <=> other.size\n"}},{"html_id":"bits:Pointer(UInt8)-instance-method","name":"bits","doc":"Pointer to the underlying UInt8 representation.","summary":"<p>Pointer to the underlying UInt8 representation.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":9,"url":null},"def":{"name":"bits","return_type":"Pointer(UInt8)","visibility":"Public","body":"@bits"}},{"html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends this struct's name and instance variables names and values\nto the given IO.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np1.to_s    # \"Point(@x=1, @y=2)\"\np1.inspect # \"Point(@x=1, @y=2)\"\n```","summary":"<p>Appends this struct's name and instance variables names and values to the given IO.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/goban/bitstream.cr","line_number":143,"url":null},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"(io << \"Goban::BitStream(@write_pos=\") << @write_pos\n(io << \", @read_pos=\") << @read_pos\nio << \", @bits=[\"\nidx = 0\nself.each_slice(4) do |bits|\n  if idx == 0\n  else\n    io << ' '\n  end\n  bits.each do |bit|\n    if (idx == @write_pos) || (idx == @read_pos)\n      io << '\\''\n    end\n    io << (bit ? '1' : '0')\n    idx = idx + 1\n  end\nend\nio << \"])\"\n"}},{"html_id":"read_only:Bool-instance-method","name":"read_only","doc":"Whether this bit stream is read-only.","summary":"<p>Whether this bit stream is read-only.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":17,"url":null},"def":{"name":"read_only","return_type":"Bool","visibility":"Public","body":"@read_only"}},{"html_id":"read_pos:Int32-instance-method","name":"read_pos","doc":"Current tail index of the reader. This increases as more bits are read.","summary":"<p>Current tail index of the reader.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":15,"url":null},"def":{"name":"read_pos","visibility":"Public","body":"@read_pos"}},{"html_id":"read_pos=(read_pos:Int32)-instance-method","name":"read_pos=","doc":"Current tail index of the reader. This increases as more bits are read.","summary":"<p>Current tail index of the reader.</p>","abstract":false,"args":[{"name":"read_pos","external_name":"read_pos","restriction":"::Int32"}],"args_string":"(read_pos : Int32)","args_html":"(read_pos : Int32)","location":{"filename":"src/goban/bitstream.cr","line_number":15,"url":null},"def":{"name":"read_pos=","args":[{"name":"read_pos","external_name":"read_pos","restriction":"::Int32"}],"visibility":"Public","body":"@read_pos = read_pos"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Size of the array.","summary":"<p>Size of the array.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":11,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"write_pos:Int32-instance-method","name":"write_pos","doc":"Current tail index of the writer. This increases as more bits are written.","summary":"<p>Current tail index of the writer.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":13,"url":null},"def":{"name":"write_pos","visibility":"Public","body":"@write_pos"}},{"html_id":"write_pos=(write_pos:Int32)-instance-method","name":"write_pos=","doc":"Current tail index of the writer. This increases as more bits are written.","summary":"<p>Current tail index of the writer.</p>","abstract":false,"args":[{"name":"write_pos","external_name":"write_pos","restriction":"::Int32"}],"args_string":"(write_pos : Int32)","args_html":"(write_pos : Int32)","location":{"filename":"src/goban/bitstream.cr","line_number":13,"url":null},"def":{"name":"write_pos=","args":[{"name":"write_pos","external_name":"write_pos","restriction":"::Int32"}],"visibility":"Public","body":"@write_pos = write_pos"}}]},{"html_id":"goban/Goban/Canvas","path":"Goban/Canvas.html","kind":"struct","full_name":"Goban::Canvas(T)","name":"Canvas","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"goban/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"goban/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"goban/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/canvas.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Data type representing 2D canvas symbol.","summary":"<p>Data type representing 2D canvas symbol.</p>","constructors":[{"html_id":"new(size_x:Int32,size_y:Int32,data:Slice(T))-class-method","name":"new","abstract":false,"args":[{"name":"size_x","external_name":"size_x","restriction":"::Int32"},{"name":"size_y","external_name":"size_y","restriction":"::Int32"},{"name":"data","external_name":"data","restriction":"Slice(T)"}],"args_string":"(size_x : Int32, size_y : Int32, data : Slice(T))","args_html":"(size_x : Int32, size_y : Int32, data : Slice(T))","location":{"filename":"src/goban/canvas.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"size_x","external_name":"size_x","restriction":"::Int32"},{"name":"size_y","external_name":"size_y","restriction":"::Int32"},{"name":"data","external_name":"data","restriction":"Slice(T)"}],"visibility":"Public","body":"_ = Canvas(T).allocate\n_.initialize(size_x, size_y, data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(size_x:Int32,size_y:Int32,value:T)-class-method","name":"new","abstract":false,"args":[{"name":"size_x","external_name":"size_x","restriction":"::Int32"},{"name":"size_y","external_name":"size_y","restriction":"::Int32"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(size_x : Int32, size_y : Int32, value : T)","args_html":"(size_x : Int32, size_y : Int32, value : T)","location":{"filename":"src/goban/canvas.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"size_x","external_name":"size_x","restriction":"::Int32"},{"name":"size_y","external_name":"size_y","restriction":"::Int32"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"_ = Canvas(T).allocate\n_.initialize(size_x, size_y, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](x:Int,y:Int)-instance-method","name":"[]","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/goban/canvas.cr","line_number":45,"url":null},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"if ((0 <= x && x < @size_x) && 0 <= y) && y < @size_y\nelse\n  raise(IndexError.new)\nend\n@data.unsafe_fetch((y * @size_x) + x)\n"}},{"html_id":"[]=(x:Int,y:Int,w:Int,h:Int,value:UInt8)-instance-method","name":"[]=","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"w","external_name":"w","restriction":"Int"},{"name":"h","external_name":"h","restriction":"Int"},{"name":"value","external_name":"value","restriction":"UInt8"}],"args_string":"(x : Int, y : Int, w : Int, h : Int, value : UInt8)","args_html":"(x : Int, y : Int, w : Int, h : Int, value : UInt8)","location":{"filename":"src/goban/canvas.cr","line_number":63,"url":null},"def":{"name":"[]=","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"w","external_name":"w","restriction":"Int"},{"name":"h","external_name":"h","restriction":"Int"},{"name":"value","external_name":"value","restriction":"UInt8"}],"visibility":"Public","body":"(x...(x + w)).each do |xx|\n  (y...(y + h)).each do |yy|\n    self[xx, yy] = value\n  end\nend"}},{"html_id":"[]=(x:Int,y:Int,value:UInt8)-instance-method","name":"[]=","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"value","external_name":"value","restriction":"UInt8"}],"args_string":"(x : Int, y : Int, value : UInt8)","args_html":"(x : Int, y : Int, value : UInt8)","location":{"filename":"src/goban/canvas.cr","line_number":57,"url":null},"def":{"name":"[]=","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"value","external_name":"value","restriction":"UInt8"}],"visibility":"Public","body":"if ((0 <= x && x < @size_x) && 0 <= y) && y < @size_y\nelse\n  raise(IndexError.new)\nend\n@data.unsafe_put((y * @size_x) + x, value)\n"}},{"html_id":"[]?(x:Int,y:Int)-instance-method","name":"[]?","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/goban/canvas.cr","line_number":51,"url":null},"def":{"name":"[]?","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"if ((0 <= x && x < @size_x) && 0 <= y) && y < @size_y\nelse\n  return nil\nend\n@data.unsafe_fetch((y * @size_x) + x)\n"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":22,"url":null},"def":{"name":"clone","visibility":"Public","body":"Canvas(T).new(@size_x, @size_y, @data.dup)"}},{"html_id":"data:Slice(T)-instance-method","name":"data","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":8,"url":null},"def":{"name":"data","return_type":"Slice(T)","visibility":"Public","body":"@data"}},{"html_id":"each_column(&:Iterator(UInt8),Int32->)-instance-method","name":"each_column","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":37,"url":null},"def":{"name":"each_column","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Iterator(UInt8), Int32 ->)"},"visibility":"Public","body":"@size_x.times do |x|\n  column = @size_y.times.map do |y|\n    self[x, y]\n  end\n  yield column, x\nend"}},{"html_id":"each_row(&:Iterator(UInt8),Int32->)-instance-method","name":"each_row","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":30,"url":null},"def":{"name":"each_row","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Iterator(UInt8), Int32 ->)"},"visibility":"Public","body":"@size_y.times do |y|\n  row = @size_x.times.map do |x|\n    self[x, y]\n  end\n  yield row, y\nend"}},{"html_id":"print_to_console-instance-method","name":"print_to_console","doc":"Prints the modules on the canvas as a text in the console.","summary":"<p>Prints the modules on the canvas as a text in the console.</p>","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":78,"url":null},"def":{"name":"print_to_console","visibility":"Public","body":"chars = {\"  \", \"██\"}\neach_row do |row|\n  row.each do |mod|\n    print(chars[mod & 1])\n  end\n  print('\\n')\nend\nprint('\\n')\n"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":26,"url":null},"def":{"name":"size","visibility":"Public","body":"@size_x"}},{"html_id":"size(*args,**options)-instance-method","name":"size","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/goban/canvas.cr","line_number":10,"url":null},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@data.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/goban/canvas.cr","line_number":10,"url":null},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@data.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"size_x:Int32-instance-method","name":"size_x","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":6,"url":null},"def":{"name":"size_x","return_type":"Int32","visibility":"Public","body":"@size_x"}},{"html_id":"size_y:Int32-instance-method","name":"size_y","abstract":false,"location":{"filename":"src/goban/canvas.cr","line_number":7,"url":null},"def":{"name":"size_y","return_type":"Int32","visibility":"Public","body":"@size_y"}},{"html_id":"unsafe_fetch(*args,**options)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/goban/canvas.cr","line_number":11,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@data.unsafe_fetch(*args, **options)"}},{"html_id":"unsafe_fetch(*args,**options,&)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/goban/canvas.cr","line_number":11,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@data.unsafe_fetch(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"unsafe_put(*args,**options)-instance-method","name":"unsafe_put","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/goban/canvas.cr","line_number":12,"url":null},"def":{"name":"unsafe_put","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@data.unsafe_put(*args, **options)"}},{"html_id":"unsafe_put(*args,**options,&)-instance-method","name":"unsafe_put","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/goban/canvas.cr","line_number":12,"url":null},"def":{"name":"unsafe_put","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@data.unsafe_put(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"goban/Goban/ECC","path":"Goban/ECC.html","kind":"module","full_name":"Goban::ECC","name":"ECC","abstract":false,"locations":[{"filename":"src/goban/ecc/gf.cr","line_number":1,"url":null},{"filename":"src/goban/ecc/gfpoly.cr","line_number":1,"url":null},{"filename":"src/goban/ecc/level.cr","line_number":1,"url":null},{"filename":"src/goban/ecc/rsdeflator.cr","line_number":1,"url":null},{"filename":"src/goban/ecc/rsinflator.cr","line_number":1,"url":null},{"filename":"src/goban/ecc/tables.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EC_BLOCKS_QR","name":"EC_BLOCKS_QR","value":"{Low: {-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25}, Medium: {-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49}, Quartile: {-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68}, High: {-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81}}"},{"id":"EC_BLOCKS_RMQR","name":"EC_BLOCKS_RMQR","value":"{Low: {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, Medium: {-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 1, 1, 2, 2, 3, 1, 2, 2, 3, 4}, Quartile: {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, High: {-1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 2, 2, 2, 3, 1, 1, 2, 2, 3, 4, 2, 2, 3, 4, 5, 2, 2, 3, 4, 6}}"},{"id":"EC_CODEWORDS_MQR","name":"EC_CODEWORDS_MQR","value":"{Low: {-1, 2, 5, 6, 8}, Medium: {-1, 2, 6, 8, 10}, Quartile: {-1, 2, -1, -1, 14}, High: {-1, -1, -1, -1, -1}}"},{"id":"EC_CODEWORDS_PER_BLOCK_QR","name":"EC_CODEWORDS_PER_BLOCK_QR","value":"{Low: {-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, Medium: {-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28}, Quartile: {-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, High: {-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}}"},{"id":"EC_CODEWORDS_PER_BLOCK_RMQR","name":"EC_CODEWORDS_PER_BLOCK_RMQR","value":"{Low: {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, Medium: {-1, 7, 9, 12, 16, 24, 9, 12, 18, 24, 18, 8, 12, 16, 24, 16, 24, 9, 14, 22, 16, 20, 20, 18, 26, 18, 24, 24, 21, 16, 22, 20, 20}, Quartile: {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, High: {-1, 10, 14, 22, 30, 22, 14, 22, 16, 22, 22, 10, 20, 16, 22, 30, 30, 14, 28, 20, 28, 26, 28, 18, 24, 24, 22, 26, 20, 30, 28, 26, 26}}"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"types":[{"html_id":"goban/Goban/ECC/GF","path":"Goban/ECC/GF.html","kind":"module","full_name":"Goban::ECC::GF","name":"GF","abstract":false,"locations":[{"filename":"src/goban/ecc/gf.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EXP_TABLE","name":"EXP_TABLE","value":"begin\n  a = uninitialized ::StaticArray(UInt8, 256)\n  a[0] = 1\n  (1..255).each do |i|\n    v = a[i - 1].to_i * 2\n    a[i] = (v >= 256 ? (v ^ 285) : v).to_u8\n  end\n  a\nend"},{"id":"LOG_TABLE","name":"LOG_TABLE","value":"begin\n  a = uninitialized ::StaticArray(UInt8, 256)\n  (0..255).each do |i|\n    a[EXP_TABLE[i]] = i.to_u8\n  end\n  a\nend"}],"extended_modules":[{"html_id":"goban/Goban/ECC/GF","kind":"module","full_name":"Goban::ECC::GF","name":"GF"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"instance_methods":[{"html_id":"add_or_sub(x:UInt8,y:UInt8)-instance-method","name":"add_or_sub","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"y","external_name":"y","restriction":"UInt8"}],"args_string":"(x : UInt8, y : UInt8)","args_html":"(x : UInt8, y : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":36,"url":null},"def":{"name":"add_or_sub","args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"y","external_name":"y","restriction":"UInt8"}],"visibility":"Public","body":"x ^ y"}},{"html_id":"div(x:UInt8,y:UInt8)-instance-method","name":"div","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"y","external_name":"y","restriction":"UInt8"}],"args_string":"(x : UInt8, y : UInt8)","args_html":"(x : UInt8, y : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":45,"url":null},"def":{"name":"div","args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"y","external_name":"y","restriction":"UInt8"}],"visibility":"Public","body":"if y == 0\n  raise(InputError.new(\"Division by 0\"))\nend\nif x == 0\n  return 0_u8\nend\nEXP_TABLE[((LOG_TABLE[x].to_i + 255) - LOG_TABLE[y]) % 255]\n"}},{"html_id":"exp(x:UInt8)-instance-method","name":"exp","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"}],"args_string":"(x : UInt8)","args_html":"(x : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":27,"url":null},"def":{"name":"exp","args":[{"name":"x","external_name":"x","restriction":"UInt8"}],"visibility":"Public","body":"EXP_TABLE[x]"}},{"html_id":"inv(x:UInt8)-instance-method","name":"inv","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"}],"args_string":"(x : UInt8)","args_html":"(x : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":55,"url":null},"def":{"name":"inv","args":[{"name":"x","external_name":"x","restriction":"UInt8"}],"visibility":"Public","body":"if x == 0\n  raise(InputError.new(\"Can't invert 0\"))\nend\nEXP_TABLE[255 - LOG_TABLE[x]]\n"}},{"html_id":"log(x:UInt8)-instance-method","name":"log","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"}],"args_string":"(x : UInt8)","args_html":"(x : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":31,"url":null},"def":{"name":"log","args":[{"name":"x","external_name":"x","restriction":"UInt8"}],"visibility":"Public","body":"if x == 0\n  raise(InputError.new(\"Can't take log(0)\"))\nend\nLOG_TABLE[x]\n"}},{"html_id":"mul(x:UInt8,y:UInt8)-instance-method","name":"mul","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"y","external_name":"y","restriction":"UInt8"}],"args_string":"(x : UInt8, y : UInt8)","args_html":"(x : UInt8, y : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":40,"url":null},"def":{"name":"mul","args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"y","external_name":"y","restriction":"UInt8"}],"visibility":"Public","body":"if (x == 0) || (y == 0)\n  return 0_u8\nend\nEXP_TABLE[(LOG_TABLE[x].to_i + LOG_TABLE[y]) % 255]\n"}},{"html_id":"pow(x:UInt8,pow:UInt8)-instance-method","name":"pow","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"pow","external_name":"pow","restriction":"UInt8"}],"args_string":"(x : UInt8, pow : UInt8)","args_html":"(x : UInt8, pow : UInt8)","location":{"filename":"src/goban/ecc/gf.cr","line_number":51,"url":null},"def":{"name":"pow","args":[{"name":"x","external_name":"x","restriction":"UInt8"},{"name":"pow","external_name":"pow","restriction":"UInt8"}],"visibility":"Public","body":"EXP_TABLE[(LOG_TABLE[x] * pow) % 255]"}}]},{"html_id":"goban/Goban/ECC/GFPoly","path":"Goban/ECC/GFPoly.html","kind":"struct","full_name":"Goban::ECC::GFPoly","name":"GFPoly","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"goban/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"goban/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"goban/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/ecc/gfpoly.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"class_methods":[{"html_id":"build_mono(degree:Int,coeff:UInt8)-class-method","name":"build_mono","abstract":false,"args":[{"name":"degree","external_name":"degree","restriction":"Int"},{"name":"coeff","external_name":"coeff","restriction":"UInt8"}],"args_string":"(degree : Int, coeff : UInt8)","args_html":"(degree : Int, coeff : UInt8)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":29,"url":null},"def":{"name":"build_mono","args":[{"name":"degree","external_name":"degree","restriction":"Int"},{"name":"coeff","external_name":"coeff","restriction":"UInt8"}],"visibility":"Public","body":"if coeff == 0\n  return self.zero\nend\ncoeffs = Slice(UInt8).new(degree + 1)\ncoeffs[0] = coeff\nGFPoly.new(coeffs)\n"}},{"html_id":"one-class-method","name":"one","abstract":false,"location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":25,"url":null},"def":{"name":"one","visibility":"Public","body":"GFPoly.new(Slice[1_u8])"}},{"html_id":"zero-class-method","name":"zero","abstract":false,"location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":21,"url":null},"def":{"name":"zero","visibility":"Public","body":"GFPoly.new(Slice[0_u8])"}}],"constructors":[{"html_id":"new(data:Slice(UInt8),truncate=true)-class-method","name":"new","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"::Slice(::UInt8)"},{"name":"truncate","default_value":"true","external_name":"truncate","restriction":""}],"args_string":"(data : Slice(UInt8), truncate = true)","args_html":"(data : Slice(UInt8), truncate = <span class=\"n\">true</span>)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"data","external_name":"data","restriction":"::Slice(::UInt8)"},{"name":"truncate","default_value":"true","external_name":"truncate","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(data, truncate)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_or_sub(other:Indexable(UInt8))-instance-method","name":"add_or_sub","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"args_string":"(other : Indexable(UInt8))","args_html":"(other : Indexable(UInt8))","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":66,"url":null},"def":{"name":"add_or_sub","args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"visibility":"Public","body":"if self.is_zero?\n  return other\nend\nif other.is_zero?\n  return self\nend\nsmaller, larger = self, other\nif smaller.size > larger.size\n  smaller, larger = other, self\nend\nsize_diff = larger.size - smaller.size\nresult = Slice(UInt8).new(larger.size) do |i|\n  if i < size_diff\n    next larger[i]\n  end\n  GF.add_or_sub(smaller[i - size_diff], larger[i])\nend\nGFPoly.new(result)\n"}},{"html_id":"data:Slice(UInt8)-instance-method","name":"data","abstract":false,"location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":5,"url":null},"def":{"name":"data","return_type":"Slice(UInt8)","visibility":"Public","body":"@data"}},{"html_id":"degree-instance-method","name":"degree","abstract":false,"location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":41,"url":null},"def":{"name":"degree","visibility":"Public","body":"self.size - 1"}},{"html_id":"div(other:Indexable(UInt8))-instance-method","name":"div","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"args_string":"(other : Indexable(UInt8))","args_html":"(other : Indexable(UInt8))","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":94,"url":null},"def":{"name":"div","args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"visibility":"Public","body":"if other.is_zero?\n  raise(InputError.new(\"Division by 0\"))\nend\nresult = Slice(UInt8).new((self.size + other.size) - 1)\n@data.copy_to(result)\nself.size.times do |i|\n  coeff = result[i]\n  if coeff == 0\n    next\n  end\n  (1...other.size).each do |j|\n    if other[j] == 0\n      next\n    end\n    __temp_58 = i + j\n    result[__temp_58] = result[__temp_58] ^ (GF.mul(other[j], coeff))\n  end\nend\n{GFPoly.new(result[0, self.size], truncate: false), GFPoly.new(result[self.size, result.size - self.size], truncate: false)}\n"}},{"html_id":"div2(other:Indexable(UInt8))-instance-method","name":"div2","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"args_string":"(other : Indexable(UInt8))","args_html":"(other : Indexable(UInt8))","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":115,"url":null},"def":{"name":"div2","args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"visibility":"Public","body":"if other.is_zero?\n  raise(InputError.new(\"Division by 0\"))\nend\nquotient = GFPoly.zero\nremainder = self\ndenominator_leading_term = other.get_coeff(other.degree)\ninv_denominator_leading_term = GF.inv(denominator_leading_term)\nwhile remainder.degree >= other.degree && (!remainder.is_zero?)\n  degree_diff = remainder.degree - other.degree\n  scale = GF.mul(remainder.get_coeff(remainder.degree), inv_denominator_leading_term)\n  iter_quotient = GFPoly.build_mono(degree_diff, scale)\n  term = other.mul(iter_quotient)\n  quotient = quotient.add_or_sub(iter_quotient)\n  remainder = remainder.add_or_sub(term)\nend\n{quotient, remainder}\n"}},{"html_id":"eval(x:Int)-instance-method","name":"eval","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"}],"args_string":"(x : Int)","args_html":"(x : Int)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":49,"url":null},"def":{"name":"eval","args":[{"name":"x","external_name":"x","restriction":"Int"}],"visibility":"Public","body":"y = self[0]\n(1...self.size).each do |i|\n  y = (GF.mul(y, x.to_u8)) ^ self[i]\nend\ny\n"}},{"html_id":"get_coeff(degree:Int)-instance-method","name":"get_coeff","abstract":false,"args":[{"name":"degree","external_name":"degree","restriction":"Int"}],"args_string":"(degree : Int)","args_html":"(degree : Int)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":45,"url":null},"def":{"name":"get_coeff","args":[{"name":"degree","external_name":"degree","restriction":"Int"}],"visibility":"Public","body":"self[(self.size - 1) - degree]"}},{"html_id":"is_zero?-instance-method","name":"is_zero?","abstract":false,"location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":37,"url":null},"def":{"name":"is_zero?","visibility":"Public","body":"self[0] == 0"}},{"html_id":"mul(other:Indexable(UInt8))-instance-method","name":"mul","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"args_string":"(other : Indexable(UInt8))","args_html":"(other : Indexable(UInt8))","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":82,"url":null},"def":{"name":"mul","args":[{"name":"other","external_name":"other","restriction":"Indexable(UInt8)"}],"visibility":"Public","body":"result = Slice(UInt8).new((self.size + other.size) - 1)\nself.size.times do |i|\n  other.size.times do |j|\n    __temp_56 = i + j\n    result[__temp_56] = result[__temp_56] ^ (GF.mul(self[i], other[j]))\n  end\nend\nGFPoly.new(result)\n"}},{"html_id":"scale(x:Int)-instance-method","name":"scale","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"}],"args_string":"(x : Int)","args_html":"(x : Int)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":58,"url":null},"def":{"name":"scale","args":[{"name":"x","external_name":"x","restriction":"Int"}],"visibility":"Public","body":"result = @data.map do |v|\n  GF.mul(v, x)\nend\nGFPoly.new(result)\n"}},{"html_id":"size(*args,**options)-instance-method","name":"size","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":7,"url":null},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@data.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":7,"url":null},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@data.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"unsafe_fetch(*args,**options)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":8,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@data.unsafe_fetch(*args, **options)"}},{"html_id":"unsafe_fetch(*args,**options,&)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":8,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@data.unsafe_fetch(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"unsafe_put(*args,**options)-instance-method","name":"unsafe_put","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":9,"url":null},"def":{"name":"unsafe_put","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@data.unsafe_put(*args, **options)"}},{"html_id":"unsafe_put(*args,**options,&)-instance-method","name":"unsafe_put","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/goban/ecc/gfpoly.cr","line_number":9,"url":null},"def":{"name":"unsafe_put","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@data.unsafe_put(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"goban/Goban/ECC/Level","path":"Goban/ECC/Level.html","kind":"enum","full_name":"Goban::ECC::Level","name":"Level","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/ecc/level.cr","line_number":14,"url":null}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Low","name":"Low","value":"1_u8"},{"id":"Medium","name":"Medium","value":"0_u8"},{"id":"Quartile","name":"Quartile","value":"3_u8"},{"id":"High","name":"High","value":"2_u8"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"doc":"Error correction level of the QR Code.\nQR Code symbols include redundant bits based on the selected error\ncorrection level, so that even if some part the symbol is not readable,\nthe decoder can recover the loss for up to:\n\n- 7% for `Low`\n- 15% for `Medium`\n- 25% for `Quartile`\n- 30% for `High`\n\nNote that choosing a higher error correction level requires more redundant\nbits, meaning that the resulting QR Code symbol can get larger.","summary":"<p>Error correction level of the QR Code.</p>","instance_methods":[{"html_id":"high?-instance-method","name":"high?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":18,"url":null},"def":{"name":"high?","visibility":"Public","body":"self == High"}},{"html_id":"low?-instance-method","name":"low?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":15,"url":null},"def":{"name":"low?","visibility":"Public","body":"self == Low"}},{"html_id":"medium?-instance-method","name":"medium?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":16,"url":null},"def":{"name":"medium?","visibility":"Public","body":"self == Medium"}},{"html_id":"quartile?-instance-method","name":"quartile?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":17,"url":null},"def":{"name":"quartile?","visibility":"Public","body":"self == Quartile"}}]},{"html_id":"goban/Goban/ECC/RSDeflator","path":"Goban/ECC/RSDeflator.html","kind":"module","full_name":"Goban::ECC::RSDeflator","name":"RSDeflator","abstract":false,"locations":[{"filename":"src/goban/ecc/rsdeflator.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/ECC/RSDeflator","kind":"module","full_name":"Goban::ECC::RSDeflator","name":"RSDeflator"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"instance_methods":[{"html_id":"deflate_codewords(codewords:Slice(UInt8),version:QR::Version|RMQR::Version,ecl:Level)-instance-method","name":"deflate_codewords","abstract":false,"args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QR::Version | RMQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"args_string":"(codewords : Slice(UInt8), version : QR::Version | RMQR::Version, ecl : Level)","args_html":"(codewords : Slice(UInt8), version : <a href=\"../../Goban/QR/Version.html\">QR::Version</a> | <a href=\"../../Goban/RMQR/Version.html\">RMQR::Version</a>, ecl : <a href=\"../../Goban/ECC/Level.html\">Level</a>)","location":{"filename":"src/goban/ecc/rsdeflator.cr","line_number":5,"url":null},"def":{"name":"deflate_codewords","args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QR::Version | RMQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"visibility":"Public","body":"data_codewords_count = version.max_data_codewords(ecl)\ncase version\nwhen QR::Version\n  ec_blocks_count = ECC::EC_BLOCKS_QR[ecl.to_s][version.to_i]\n  ec_block_size = ECC::EC_CODEWORDS_PER_BLOCK_QR[ecl.to_s][version.to_i]\nwhen RMQR::Version\n  ec_blocks_count = ECC::EC_BLOCKS_RMQR[ecl.to_s][version.to_i + 1]\n  ec_block_size = ECC::EC_CODEWORDS_PER_BLOCK_RMQR[ecl.to_s][version.to_i + 1]\nelse\n  raise(InternalError.new(\"Unknown QR Type\"))\nend\nraw_codewords_count = version.raw_max_data_codewords\nshort_blocks_count = ec_blocks_count - (raw_codewords_count % ec_blocks_count)\nshort_block_size = raw_codewords_count // ec_blocks_count\nresult = Slice(UInt8).new(raw_codewords_count)\nk = 0\nec_blocks_count.times do |i|\n  is_short_block = i < short_blocks_count\n  block_size = short_block_size + (is_short_block ? 0 : 1)\n  data_size = block_size - ec_block_size\n  unweaved = Slice(UInt8).new(block_size)\n  short_data_size = short_block_size - ec_block_size\n  short_data_size.times do |j|\n    unweaved[j] = codewords[i + (ec_blocks_count * j)]\n  end\n  if !is_short_block\n    j = data_size - 1\n    unweaved[j] = codewords[(i + (ec_blocks_count * j)) - short_blocks_count]\n  end\n  ec_block_size.times do |j|\n    unweaved[data_size + j] = codewords[(i + data_codewords_count) + (ec_blocks_count * j)]\n  end\n  corrected = (self.decode_block(unweaved, ec_block_size))[0, data_size]\n  result[k, data_size].copy_from(corrected)\n  k = k + data_size\nend\nresult\n"}},{"html_id":"deflate_codewords(codewords:Slice(UInt8),version:MQR::Version,ecl:Level)-instance-method","name":"deflate_codewords","abstract":false,"args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"MQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"args_string":"(codewords : Slice(UInt8), version : MQR::Version, ecl : Level)","args_html":"(codewords : Slice(UInt8), version : <a href=\"../../Goban/MQR/Version.html\">MQR::Version</a>, ecl : <a href=\"../../Goban/ECC/Level.html\">Level</a>)","location":{"filename":"src/goban/ecc/rsdeflator.cr","line_number":52,"url":null},"def":{"name":"deflate_codewords","args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"MQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"visibility":"Public","body":"data_codewords_count = version.max_data_codewords(ecl)\nec_block_size = EC_CODEWORDS_MQR[ecl.to_s][version.to_i]\nraw_codewords_count = version.raw_max_data_codewords\nblock_size = raw_codewords_count\ndata_size = block_size - ec_block_size\n(self.decode_block(codewords, ec_block_size))[0, data_size]\n"}}]},{"html_id":"goban/Goban/ECC/RSInflator","path":"Goban/ECC/RSInflator.html","kind":"module","full_name":"Goban::ECC::RSInflator","name":"RSInflator","abstract":false,"locations":[{"filename":"src/goban/ecc/rsinflator.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"GEN_POLYS","name":"GEN_POLYS","value":"begin\n  a = uninitialized ::StaticArray(GFPoly, 31)\n  a[0] = GFPoly.new(Slice[1_u8])\n  (1_u8..30_u8).each do |d|\n    last_gen = a[d - 1]\n    a[d] = last_gen.mul(Slice[1_u8, GF.exp(d - 1)])\n  end\n  a\nend"}],"extended_modules":[{"html_id":"goban/Goban/ECC/RSInflator","kind":"module","full_name":"Goban::ECC::RSInflator","name":"RSInflator"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"doc":"Module for generating redundant Reed-Solomon error correction bits.","summary":"<p>Module for generating redundant Reed-Solomon error correction bits.</p>","instance_methods":[{"html_id":"inflate_codewords(codewords:Slice(UInt8),version:QR::Version|RMQR::Version,ecl:Level)-instance-method","name":"inflate_codewords","abstract":false,"args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QR::Version | RMQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"args_string":"(codewords : Slice(UInt8), version : QR::Version | RMQR::Version, ecl : Level)","args_html":"(codewords : Slice(UInt8), version : <a href=\"../../Goban/QR/Version.html\">QR::Version</a> | <a href=\"../../Goban/RMQR/Version.html\">RMQR::Version</a>, ecl : <a href=\"../../Goban/ECC/Level.html\">Level</a>)","location":{"filename":"src/goban/ecc/rsinflator.cr","line_number":18,"url":null},"def":{"name":"inflate_codewords","args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QR::Version | RMQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"visibility":"Public","body":"if codewords.size != (version.max_data_codewords(ecl))\n  raise(InputError.new(\"Codewords size mismatch\"))\nend\ncase version\nwhen QR::Version\n  ec_blocks_count = ECC::EC_BLOCKS_QR[ecl.to_s][version.to_i]\n  ec_block_size = ECC::EC_CODEWORDS_PER_BLOCK_QR[ecl.to_s][version.to_i]\nwhen RMQR::Version\n  ec_blocks_count = ECC::EC_BLOCKS_RMQR[ecl.to_s][version.to_i + 1]\n  ec_block_size = ECC::EC_CODEWORDS_PER_BLOCK_RMQR[ecl.to_s][version.to_i + 1]\nelse\n  raise(InternalError.new(\"Unknown QR Type\"))\nend\nraw_codewords_count = version.raw_max_data_codewords\nshort_blocks_count = ec_blocks_count - (raw_codewords_count % ec_blocks_count)\nshort_block_size = (raw_codewords_count // ec_blocks_count) - ec_block_size\nresult = Slice(UInt8).new(raw_codewords_count)\ngen_poly = GEN_POLYS[ec_block_size]\nk = 0\nec_blocks_count.times do |i|\n  is_short_block = i < short_blocks_count\n  data_size = short_block_size + (is_short_block ? 0 : 1)\n  data = codewords[k, data_size]\n  k = k + data_size\n  short_block_size.times do |j|\n    result[i + (ec_blocks_count * j)] = data[j]\n  end\n  if !is_short_block\n    j = data_size - 1\n    result[(i + (ec_blocks_count * j)) - short_blocks_count] = data[j]\n  end\n  data_poly = GFPoly.new(data, truncate: false)\n  _, ecc = data_poly.div(gen_poly)\n  ec_block_size.times do |j|\n    result[(i + codewords.size) + (ec_blocks_count * j)] = ecc[j]\n  end\nend\nresult\n"}},{"html_id":"inflate_codewords(codewords:Slice(UInt8),version:MQR::Version,ecl:Level)-instance-method","name":"inflate_codewords","abstract":false,"args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"MQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"args_string":"(codewords : Slice(UInt8), version : MQR::Version, ecl : Level)","args_html":"(codewords : Slice(UInt8), version : <a href=\"../../Goban/MQR/Version.html\">MQR::Version</a>, ecl : <a href=\"../../Goban/ECC/Level.html\">Level</a>)","location":{"filename":"src/goban/ecc/rsinflator.cr","line_number":63,"url":null},"def":{"name":"inflate_codewords","args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"MQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"visibility":"Public","body":"if codewords.size != (version.max_data_codewords(ecl))\n  raise(InputError.new(\"Codewords size mismatch\"))\nend\nec_block_size = ECC::EC_CODEWORDS_MQR[ecl.to_s][version.to_i]\nraw_codewords_count = version.raw_max_data_codewords\nresult = Slice(UInt8).new(raw_codewords_count)\ndata = codewords\ndata.copy_to(result)\ndata_poly = GFPoly.new(data)\ngen_poly = GEN_POLYS[ec_block_size]\n_, ecc = data_poly.div(gen_poly)\necc.data.copy_to(result[data.size, ecc.data.size])\nresult\n"}}]}]},{"html_id":"goban/Goban/InputError","path":"Goban/InputError.html","kind":"class","full_name":"Goban::InputError","name":"InputError","abstract":false,"superclass":{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"goban/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban.cr","line_number":6,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"}},{"html_id":"goban/Goban/InternalError","path":"Goban/InternalError.html","kind":"class","full_name":"Goban::InternalError","name":"InternalError","abstract":false,"superclass":{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"goban/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban.cr","line_number":9,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"}},{"html_id":"goban/Goban/MQR","path":"Goban/MQR.html","kind":"struct","full_name":"Goban::MQR","name":"MQR","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},"ancestors":[{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/mqr.cr","line_number":7,"url":null},{"filename":"src/goban/mqr/decoder.cr","line_number":1,"url":null},{"filename":"src/goban/mqr/encoder.cr","line_number":1,"url":null},{"filename":"src/goban/mqr/mask.cr","line_number":1,"url":null},{"filename":"src/goban/mqr/template.cr","line_number":1,"url":null},{"filename":"src/goban/mqr/version.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/MQR/Decoder","kind":"module","full_name":"Goban::MQR::Decoder","name":"Decoder"},{"html_id":"goban/Goban/MQR/Encoder","kind":"module","full_name":"Goban::MQR::Encoder","name":"Encoder"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Object that represents an encoded Micro QR Code symbol.","summary":"<p>Object that represents an encoded Micro QR Code symbol.</p>","instance_methods":[{"html_id":"canvas:Canvas(UInt8)-instance-method","name":"canvas","doc":"Returns the canvas of the Micro QR Code symbol. Canvas contains information about\neach single module (pixel) in the symbol.","summary":"<p>Returns the canvas of the Micro QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":20,"url":null},"def":{"name":"canvas","return_type":"Canvas(UInt8)","visibility":"Public","body":"@canvas"}},{"html_id":"ecl:ECC::Level-instance-method","name":"ecl","doc":"Error correction level of the Micro QR Code symbol.","summary":"<p>Error correction level of the Micro QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":15,"url":null},"def":{"name":"ecl","return_type":"ECC::Level","visibility":"Public","body":"@ecl"}},{"html_id":"mask:Mask-instance-method","name":"mask","doc":"Mask applied to this Micro QR Code symbol.","summary":"<p>Mask applied to this Micro QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":24,"url":null},"def":{"name":"mask","return_type":"Mask","visibility":"Public","body":"@mask"}},{"html_id":"segments:Array(Segment)-instance-method","name":"segments","doc":"Content text segments of the QR Code symbol.","summary":"<p>Content text segments of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":17,"url":null},"def":{"name":"segments","return_type":"Array(Segment)","visibility":"Public","body":"@segments"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Length of a side in the symbol.","summary":"<p>Length of a side in the symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":22,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"version:Version-instance-method","name":"version","doc":"Version of the Micro QR Code symbol. Version in QR Code does not refer to its revision,\nbut simply indicates the size format of the QR Code symbol.","summary":"<p>Version of the Micro QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":13,"url":null},"def":{"name":"version","return_type":"Version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/MQR/Decoder","path":"Goban/MQR/Decoder.html","kind":"module","full_name":"Goban::MQR::Decoder","name":"Decoder","abstract":false,"locations":[{"filename":"src/goban/mqr/decoder.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/MQR/Decoder","kind":"module","full_name":"Goban::MQR::Decoder","name":"Decoder"}],"namespace":{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},"instance_methods":[{"html_id":"decode(canvas:Canvas(UInt8))-instance-method","name":"decode","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"args_string":"(canvas : Canvas(UInt8))","args_html":"(canvas : <a href=\"../../Goban/Canvas.html\">Canvas</a>(UInt8))","location":{"filename":"src/goban/mqr/decoder.cr","line_number":18,"url":null},"def":{"name":"decode","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"visibility":"Public","body":"if canvas.size_x == canvas.size_y\nelse\n  raise(InputError.new(\"Canvas not square\"))\nend\nversion = (canvas.size_x - 9) // 2\nif version.in?(Version::MIN..Version::MAX)\nelse\n  raise(InputError.new(\"Invalid version\"))\nend\nmask, symbol_num = self.read_format(canvas)\necl = nil\nVersion::SYMBOL_NUMS.each_with_index do |group, ver|\n  group.each do |key, bits|\n    if bits == symbol_num\n    else\n      next\n    end\n    if ver == version\n    else\n      raise(VersionMismatchError.new(ver))\n    end\n    ecl = ECC::Level.parse(key.to_s)\n    break\n  end\n  if ecl\n    break\n  end\nend\nif ecl\nelse\n  raise(InputError.new(\"Unalbe to read format information\"))\nend\nversion = Version.new(version)\nTemplate.draw_function_patterns(canvas)\nmask.apply_to(canvas)\nraw_data_codewords = self.read_data_codewords(canvas, version, ecl)\ndata_codewords = ECC::RSDeflator.deflate_codewords(raw_data_codewords, version, ecl)\nbit_stream = BitStream.new(data_codewords)\nsegments = Array(Segment).new\nwhile bit_stream.read_pos < bit_stream.size\n  header_bits_size = version.to_i - 1\n  header_bits = bit_stream.read_bits(header_bits_size)\n  mode = Segment::Mode.from_bits(header_bits, version)\n  cci_bits_count = mode.cci_bits_count(version)\n  if !cci_bits_count\n    raise(InternalError.new(\"Invalid segment\"))\n  end\n  char_count = (bit_stream.read_bits(cci_bits_count)).to_i\n  segment = Segment.new(mode, char_count, bit_stream)\n  segments.push(segment)\n  bit_stream.read_pos = bit_stream.read_pos + segment.bit_size\n  terminator_bits_size = 3 + (2 * header_bits_size)\n  lookahead = bit_stream.read_bits(terminator_bits_size)\n  if lookahead == 0\n    break\n  end\n  bit_stream.read_pos = bit_stream.read_pos - terminator_bits_size\nend\nMQR.new(version, ecl, segments, canvas, mask)\n"}},{"html_id":"decode_to_string(canvas:Canvas(UInt8))-instance-method","name":"decode_to_string","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"args_string":"(canvas : Canvas(UInt8))","args_html":"(canvas : <a href=\"../../Goban/Canvas.html\">Canvas</a>(UInt8))","location":{"filename":"src/goban/mqr/decoder.cr","line_number":13,"url":null},"def":{"name":"decode_to_string","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"visibility":"Public","body":"segments = (self.decode(canvas)).segments\nsegments.join do |seg|\n  seg.text\nend\n"}}],"types":[{"html_id":"goban/Goban/MQR/Decoder/VersionMismatchError","path":"Goban/MQR/Decoder/VersionMismatchError.html","kind":"class","full_name":"Goban::MQR::Decoder::VersionMismatchError","name":"VersionMismatchError","abstract":false,"superclass":{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"goban/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/mqr/decoder.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/MQR/Decoder","kind":"module","full_name":"Goban::MQR::Decoder","name":"Decoder"},"constructors":[{"html_id":"new(actual_version:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"actual_version","external_name":"actual_version","restriction":"::Int32"}],"args_string":"(actual_version : Int32)","args_html":"(actual_version : Int32)","location":{"filename":"src/goban/mqr/decoder.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"actual_version","external_name":"actual_version","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(actual_version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"actual_version:Int32-instance-method","name":"actual_version","abstract":false,"location":{"filename":"src/goban/mqr/decoder.cr","line_number":6,"url":null},"def":{"name":"actual_version","return_type":"Int32","visibility":"Public","body":"@actual_version"}}]}]},{"html_id":"goban/Goban/MQR/Encoder","path":"Goban/MQR/Encoder.html","kind":"module","full_name":"Goban::MQR::Encoder","name":"Encoder","abstract":false,"locations":[{"filename":"src/goban/mqr/encoder.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/MQR/Encoder","kind":"module","full_name":"Goban::MQR::Encoder","name":"Encoder"}],"namespace":{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},"instance_methods":[{"html_id":"determine_version_and_segments(text:String,ecl:ECC::Level)-instance-method","name":"determine_version_and_segments","doc":"Returns a tuple of the optimized segments and Micro QR Code version\nfor the given text and error correction level.","summary":"<p>Returns a tuple of the optimized segments and Micro QR Code version for the given text and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(text : String, ecl : ECC::Level)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/mqr/encoder.cr","line_number":41,"url":null},"def":{"name":"determine_version_and_segments","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"chars = text.chars\nsegments, version = nil, nil\n(Version::MIN..Version::MAX).each do |i|\n  v = Version.new(i)\n  char_modes = Segment::Segmenter.compute_char_modes(chars, v)\n  segments = Segment::Segmenter.make_segments(text, char_modes)\n  cap_bits = v.max_data_bits(ecl)\n  begin\n    used_bits = Segment.count_total_bits(segments, v)\n  rescue e : InputError\n    if e.message == \"Segment too long\"\n      next\n    end\n    if e.message == \"Invalid segment\"\n      next\n    end\n    raise(e)\n  end\n  if used_bits <= cap_bits\n    version = v\n    break\n  end\nend\nif segments && version\nelse\n  raise(InputError.new(\"Text too long\"))\nend\n{segments, version}\n"}},{"html_id":"encode_segments(segments:Array(Segment),ecl:ECC::Level,version:Version|Int)-instance-method","name":"encode_segments","doc":"Creates a new Micro QR Code object for the given data segments, error correction level, and\nMicro QR Code version that is large enough to contain all the data in the segments.\n\nSee `QR::Encoder.encode_segments` for more information.","summary":"<p>Creates a new Micro QR Code object for the given data segments, error correction level, and Micro QR Code version that is large enough to contain all the data in the segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"args_string":"(segments : Array(Segment), ecl : ECC::Level, version : Version | Int)","args_html":"(segments : Array(<a href=\"../../Goban/Segment.html\">Segment</a>), ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>, version : <a href=\"../../Goban/MQR/Version.html\">Version</a> | Int)","location":{"filename":"src/goban/mqr/encoder.cr","line_number":20,"url":null},"def":{"name":"encode_segments","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"visibility":"Public","body":"version = Version.new(version.to_i)\nbit_stream = BitStream.new(version.max_data_bits(ecl))\nsegments.each do |segment|\n  bit_stream.append_segment_bits(segment, version)\nend\nbit_stream.append_terminator_bits(version, ecl)\nbit_stream.append_padding_bits(version)\ncodewords = ECC::RSInflator.inflate_codewords(bit_stream.to_bytes, version, ecl)\ncanvas = Template.make_canvas(version)\nself.draw_codewords(canvas, codewords, version, ecl)\nmask, canvas = self.apply_best_mask(canvas, version, ecl)\ncanvas.normalize\nMQR.new(version, ecl, segments, canvas, mask)\n"}},{"html_id":"encode_string(text:String,ecl:ECC::Level=ECC::Level::Medium)-instance-method","name":"encode_string","doc":"Creates a new Micro QR Code object for the given string and error correction level.\n\nNote that Micro QR Codes have limited EC levels you can select depending on the length\nof the text. In version M1, the EC level passed will just be ignored.\n\nSee `QR::Encoder.encode_string` for more information.","summary":"<p>Creates a new Micro QR Code object for the given string and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(text : String, ecl : ECC::Level = ECC::Level::Medium)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a> = <span class=\"t\">ECC</span><span class=\"t\">::</span><span class=\"t\">Level</span><span class=\"t\">::</span><span class=\"t\">Medium</span>)","location":{"filename":"src/goban/mqr/encoder.cr","line_number":11,"url":null},"def":{"name":"encode_string","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"segments, version = self.determine_version_and_segments(text, ecl)\nself.encode_segments(segments, ecl, version)\n"}}]},{"html_id":"goban/Goban/MQR/Mask","path":"Goban/MQR/Mask.html","kind":"struct","full_name":"Goban::MQR::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR/Mask","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask"},"ancestors":[{"html_id":"goban/Goban/AbstractQR/Mask","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/mqr/mask.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FORMAT_BITS","name":"FORMAT_BITS","value":"{ {17477, 21934, 26515, 30328, 1758, 5941, 9480, 13539}, {16754, 20633, 25252, 29519, 1001, 4610, 8255, 12756}, {20011, 24512, 28157, 31766, 3248, 7515, 12134, 16013}, {19228, 23287, 26826, 31009, 2439, 6252, 10833, 15290} }"},{"id":"MASK_PATTERNS","name":"MASK_PATTERNS","value":"{->(x : Int32, y : Int32) do\n  (y & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  (((x // 3) + (y // 2)) & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  ((((x * y) & 1) + ((x * y) % 3)) & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  ((((x + y) & 1) + ((x * y) % 3)) & 1) == 0\nend}"},{"id":"MAX","name":"MAX","value":"3_u8"},{"id":"MIN","name":"MIN","value":"0_u8"}],"namespace":{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},"doc":"Represents a mask pattern that can be applied to a canvas.","summary":"<p>Represents a mask pattern that can be applied to a canvas.</p>","constructors":[{"html_id":"new(value)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/goban/mqr/mask.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"goban/Goban/MQR/Template","path":"Goban/MQR/Template.html","kind":"module","full_name":"Goban::MQR::Template","name":"Template","abstract":false,"ancestors":[{"html_id":"goban/Goban/AbstractQR/Template","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template"}],"locations":[{"filename":"src/goban/mqr/template.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/Goban/AbstractQR/Template","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template"}],"extended_modules":[{"html_id":"goban/Goban/MQR/Template","kind":"module","full_name":"Goban::MQR::Template","name":"Template"}],"namespace":{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},"doc":"Handles painting each Micro QR Code modules on a canvas.","summary":"<p>Handles painting each Micro QR Code modules on a canvas.</p>"},{"html_id":"goban/Goban/MQR/Version","path":"Goban/MQR/Version.html","kind":"struct","full_name":"Goban::MQR::Version","name":"Version","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR/Version","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version"},"ancestors":[{"html_id":"goban/Goban/AbstractQR/Version","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/mqr/version.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX","name":"MAX","value":"4_u8"},{"id":"MIN","name":"MIN","value":"1_u8"},{"id":"SYMBOL_NUMS","name":"SYMBOL_NUMS","value":"{NamedTuple.new, {Low: 0, Medium: 0, Quartile: 0}, {Low: 1, Medium: 2, Quartile: -1}, {Low: 3, Medium: 4, Quartile: -1}, {Low: 5, Medium: 6, Quartile: 7}}"}],"namespace":{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},"doc":"Represents a version number of the Micro QR Code symbol.\nPossible versions range from 1 to 4, and the higher the number,\nthe large the size of the final Micro QR Code symbol.","summary":"<p>Represents a version number of the Micro QR Code symbol.</p>","constructors":[{"html_id":"new(value:Int)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"}],"args_string":"(value : Int)","args_html":"(value : Int)","location":{"filename":"src/goban/mqr/version.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"max_data_bits(ecl:ECC::Level)-instance-method","name":"max_data_bits","doc":"Maximum number of data bits that can be contained in the Micro QR Code\nsymbol of this version. This does not include the number of error correction\ncodewords.","summary":"<p>Maximum number of data bits that can be contained in the Micro QR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/mqr/version.cr","line_number":63,"url":null},"def":{"name":"max_data_bits","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"ecc_codewords = ECC::EC_CODEWORDS_MQR[ecl.to_s][@value]\nif ecc_codewords < 0\n  raise(InputError.new(\"Invalid EC level or version\"))\nend\nraw_data_mods_count - (ecc_codewords * 8)\n"}},{"html_id":"max_data_codewords(ecl:ECC::Level)-instance-method","name":"max_data_codewords","doc":"Maximum number of data codewords that can be contained in the Micro QR Code\nsymbol of this version. This does not include the number of error correction\ncodewords.","summary":"<p>Maximum number of data codewords that can be contained in the Micro QR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/mqr/version.cr","line_number":54,"url":null},"def":{"name":"max_data_codewords","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"ecc_codewords = ECC::EC_CODEWORDS_MQR[ecl.to_s][@value]\nif ecc_codewords < 0\n  raise(InputError.new(\"Invalid EC level or version\"))\nend\nraw_max_data_codewords - ecc_codewords\n"}}]}]},{"html_id":"goban/Goban/PNGExporter","path":"Goban/PNGExporter.html","kind":"module","full_name":"Goban::PNGExporter","name":"PNGExporter","abstract":false,"ancestors":[{"html_id":"goban/StumpyPNG","kind":"module","full_name":"StumpyPNG","name":"StumpyPNG"},{"html_id":"goban/StumpyCore","kind":"module","full_name":"StumpyCore","name":"StumpyCore"}],"locations":[{"filename":"src/goban/exporters/png.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/StumpyPNG","kind":"module","full_name":"StumpyPNG","name":"StumpyPNG"}],"extended_modules":[{"html_id":"goban/Goban/PNGExporter","kind":"module","full_name":"Goban::PNGExporter","name":"PNGExporter"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Helper module to generate PNG image for the QR Code object. Requires `stumpy_png` as a dependency.","summary":"<p>Helper module to generate PNG image for the QR Code object.</p>","instance_methods":[{"html_id":"export(qr:AbstractQR,path:String|IO,mod_size:Int,blank_mods:Int)-instance-method","name":"export","doc":"Generates a PNG image with the given module size and blank modules, and exportes to the\ngiven path.\n\n`mod_size` refers to the number of pixels used for each module in the QR Code symbol,\nand `blank_mods` is the size of the white border around the symbol.","summary":"<p>Generates a PNG image with the given module size and blank modules, and exportes to the given path.</p>","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"path","external_name":"path","restriction":"String | IO"},{"name":"mod_size","external_name":"mod_size","restriction":"Int"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"args_string":"(qr : AbstractQR, path : String | IO, mod_size : Int, blank_mods : Int)","args_html":"(qr : <a href=\"../Goban/AbstractQR.html\">AbstractQR</a>, path : String | IO, mod_size : Int, blank_mods : Int)","location":{"filename":"src/goban/exporters/png.cr","line_number":35,"url":null},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"path","external_name":"path","restriction":"String | IO"},{"name":"mod_size","external_name":"mod_size","restriction":"Int"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"visibility":"Public","body":"blank_size = blank_mods * mod_size\ncase qr\nwhen RMQR\n  width = (qr.size.width * mod_size) + (blank_size * 2)\n  height = (qr.size.height * mod_size) + (blank_size * 2)\nelse\n  width = (qr.size * mod_size) + (blank_size * 2)\n  height = width\nend\ndark_color = RGBA.from_rgb_n(0, 0, 0, 8)\nlight_color = RGBA.from_rgb_n(255, 255, 255, 8)\ncanvas = Canvas.new(width, height, light_color)\nqr.canvas.each_row do |row, y|\n  row.each_with_index do |mod, x|\n    if mod == 1\n    else\n      next\n    end\n    canvas_x = (mod_size * x) + blank_size\n    canvas_y = (mod_size * y) + blank_size\n    mod_size.times do |i|\n      mod_size.times do |j|\n        canvas[canvas_x + i, canvas_y + j] = dark_color\n      end\n    end\n  end\nend\nStumpyPNG.write(canvas, path)\nwidth\n"}},{"html_id":"export(qr:AbstractQR,path:String|IO,target_width:Int)-instance-method","name":"export","doc":"Generates a PNG image with the given target size and exports to the given path.\nNote that the size of the resulting image may not be equal to the target size specified.","summary":"<p>Generates a PNG image with the given target size and exports to the given path.</p>","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"path","external_name":"path","restriction":"String | IO"},{"name":"target_width","external_name":"target_width","restriction":"Int"}],"args_string":"(qr : AbstractQR, path : String | IO, target_width : Int)","args_html":"(qr : <a href=\"../Goban/AbstractQR.html\">AbstractQR</a>, path : String | IO, target_width : Int)","location":{"filename":"src/goban/exporters/png.cr","line_number":11,"url":null},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"path","external_name":"path","restriction":"String | IO"},{"name":"target_width","external_name":"target_width","restriction":"Int"}],"visibility":"Public","body":"case qr\nwhen RMQR\n  size = qr.size.width\n  blank_mods = 2\nwhen MQR\n  size = qr.size\n  blank_mods = 2\nelse\n  size = qr.size\n  blank_mods = 4\nend\nwidth = size + (4 * 2)\nratio = target_width / width\nself.export(qr, path, ratio.round.to_i, blank_mods)\n"}}]},{"html_id":"goban/Goban/QR","path":"Goban/QR.html","kind":"struct","full_name":"Goban::QR","name":"QR","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},"ancestors":[{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr.cr","line_number":7,"url":null},{"filename":"src/goban/qr/decoder.cr","line_number":1,"url":null},{"filename":"src/goban/qr/encoder.cr","line_number":1,"url":null},{"filename":"src/goban/qr/mask.cr","line_number":1,"url":null},{"filename":"src/goban/qr/template.cr","line_number":1,"url":null},{"filename":"src/goban/qr/version.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/QR/Decoder","kind":"module","full_name":"Goban::QR::Decoder","name":"Decoder"},{"html_id":"goban/Goban/QR/Encoder","kind":"module","full_name":"Goban::QR::Encoder","name":"Encoder"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Object that represents an encoded QR Code symbol.","summary":"<p>Object that represents an encoded QR Code symbol.</p>","instance_methods":[{"html_id":"canvas:Canvas(UInt8)-instance-method","name":"canvas","doc":"Returns the canvas of the QR Code symbol. Canvas contains information about\neach single module (pixel) in the symbol.","summary":"<p>Returns the canvas of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":20,"url":null},"def":{"name":"canvas","return_type":"Canvas(UInt8)","visibility":"Public","body":"@canvas"}},{"html_id":"ecl:ECC::Level-instance-method","name":"ecl","doc":"Error correction level of the QR Code symbol.","summary":"<p>Error correction level of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":15,"url":null},"def":{"name":"ecl","return_type":"ECC::Level","visibility":"Public","body":"@ecl"}},{"html_id":"mask:Mask-instance-method","name":"mask","doc":"Mask applied to this QR Code symbol.","summary":"<p>Mask applied to this QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":24,"url":null},"def":{"name":"mask","return_type":"Mask","visibility":"Public","body":"@mask"}},{"html_id":"segments:Array(Segment)-instance-method","name":"segments","doc":"Content text segments of the QR Code symbol.","summary":"<p>Content text segments of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":17,"url":null},"def":{"name":"segments","return_type":"Array(Segment)","visibility":"Public","body":"@segments"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Length of a side in the symbol.","summary":"<p>Length of a side in the symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":22,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"version:Version-instance-method","name":"version","doc":"Version of the QR Code symbol. Version in QR Code does not refer to its revision,\nbut simply indicates the size format of the QR Code symbol.","summary":"<p>Version of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":13,"url":null},"def":{"name":"version","return_type":"Version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/QR/Decoder","path":"Goban/QR/Decoder.html","kind":"module","full_name":"Goban::QR::Decoder","name":"Decoder","abstract":false,"locations":[{"filename":"src/goban/qr/decoder.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/QR/Decoder","kind":"module","full_name":"Goban::QR::Decoder","name":"Decoder"}],"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"instance_methods":[{"html_id":"decode(canvas:Canvas(UInt8))-instance-method","name":"decode","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"args_string":"(canvas : Canvas(UInt8))","args_html":"(canvas : <a href=\"../../Goban/Canvas.html\">Canvas</a>(UInt8))","location":{"filename":"src/goban/qr/decoder.cr","line_number":18,"url":null},"def":{"name":"decode","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"visibility":"Public","body":"if canvas.size_x == canvas.size_y\nelse\n  raise(InputError.new(\"Canvas not square\"))\nend\nversion = self.read_version(canvas)\nmask, ecl = self.read_format(canvas)\nTemplate.draw_function_patterns(canvas, version)\nmask.apply_to(canvas)\nraw_data_codewords = self.read_data_codewords(canvas, version)\ndata_codewords = ECC::RSDeflator.deflate_codewords(raw_data_codewords, version, ecl)\nbit_stream = BitStream.new(data_codewords)\nsegments = Array(Segment).new\nwhile bit_stream.read_pos < bit_stream.size\n  header_bits = bit_stream.read_bits(4)\n  if header_bits == 0\n    break\n  end\n  mode = Segment::Mode.from_bits(header_bits, version)\n  cci_bits_count = mode.cci_bits_count(version)\n  char_count = (bit_stream.read_bits(cci_bits_count)).to_i\n  segment = Segment.new(mode, char_count, bit_stream)\n  segments.push(segment)\n  bit_stream.read_pos = bit_stream.read_pos + segment.bit_size\nend\nQR.new(version, ecl, segments, canvas, mask)\n"}},{"html_id":"decode_to_string(canvas:Canvas(UInt8))-instance-method","name":"decode_to_string","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"args_string":"(canvas : Canvas(UInt8))","args_html":"(canvas : <a href=\"../../Goban/Canvas.html\">Canvas</a>(UInt8))","location":{"filename":"src/goban/qr/decoder.cr","line_number":13,"url":null},"def":{"name":"decode_to_string","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"visibility":"Public","body":"segments = (self.decode(canvas)).segments\nsegments.join do |seg|\n  seg.text\nend\n"}}],"types":[{"html_id":"goban/Goban/QR/Decoder/VersionMismatchError","path":"Goban/QR/Decoder/VersionMismatchError.html","kind":"class","full_name":"Goban::QR::Decoder::VersionMismatchError","name":"VersionMismatchError","abstract":false,"superclass":{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"goban/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr/decoder.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/QR/Decoder","kind":"module","full_name":"Goban::QR::Decoder","name":"Decoder"},"constructors":[{"html_id":"new(actual_version:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"actual_version","external_name":"actual_version","restriction":"::Int32"}],"args_string":"(actual_version : Int32)","args_html":"(actual_version : Int32)","location":{"filename":"src/goban/qr/decoder.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"actual_version","external_name":"actual_version","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(actual_version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"actual_version:Int32-instance-method","name":"actual_version","abstract":false,"location":{"filename":"src/goban/qr/decoder.cr","line_number":6,"url":null},"def":{"name":"actual_version","return_type":"Int32","visibility":"Public","body":"@actual_version"}}]}]},{"html_id":"goban/Goban/QR/Encoder","path":"Goban/QR/Encoder.html","kind":"module","full_name":"Goban::QR::Encoder","name":"Encoder","abstract":false,"locations":[{"filename":"src/goban/qr/encoder.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/QR/Encoder","kind":"module","full_name":"Goban::QR::Encoder","name":"Encoder"}],"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"instance_methods":[{"html_id":"determine_version_and_segments(text:String,ecl:ECC::Level)-instance-method","name":"determine_version_and_segments","doc":"Returns a tuple of the optimized segments and QR Code version for the given text and error correction level.","summary":"<p>Returns a tuple of the optimized segments and QR Code version for the given text and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(text : String, ecl : ECC::Level)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/qr/encoder.cr","line_number":137,"url":null},"def":{"name":"determine_version_and_segments","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"chars = text.chars\nsegments, version = nil, nil\n{1..9, 10..26, 27..40}.each do |group|\n  v = QR::Version.new(group.end)\n  char_modes = Segment::Segmenter.compute_char_modes(chars, v)\n  segments = Segment::Segmenter.make_segments(text, char_modes)\n  cap_bits = v.max_data_bits(ecl)\n  begin\n    used_bits = Segment.count_total_bits(segments, v)\n  rescue e : InputError\n    if e.message == \"Segment too long\"\n      next\n    end\n    raise(e)\n  end\n  if used_bits <= cap_bits\n    group.each do |i|\n      sml_v = QR::Version.new(i)\n      sml_cap_bits = sml_v.max_data_bits(ecl)\n      if used_bits <= sml_cap_bits\n        version = sml_v\n        break\n      end\n    end\n    break\n  end\nend\nif segments && version\nelse\n  raise(InputError.new(\"Text too long\"))\nend\n{segments, version}\n"}},{"html_id":"encode_segments(segments:Array(Segment),ecl:ECC::Level,version:Version|Int)-instance-method","name":"encode_segments","doc":"Creates a new QR Code object for the given data segments, error correction level, and QR Code\nversion that is large enough to contain all the data in the segments. Note that this method\ndoes not check the data length before encoding, so it will just raise `Index out of bounds`\nerror if the data does not fit within the given version.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nsegments = [\n  Goban::Segment.alphanumeric(\"HELLO WORLD\"),\n  Goban::Segment.byte(\"!\"),\n]\nqr = Goban::QR.encode_segments(segments, Goban::ECC::Level::Low, Goban::QR::Version.new(1))\nqr.print_to_console\n# => ██████████████    ██  ████  ██████████████\n#    ██          ██    ██████    ██          ██\n#    ██  ██████  ██  ████  ████  ██  ██████  ██\n#    ██  ██████  ██    ██  ██    ██  ██████  ██\n#    ██  ██████  ██      ██  ██  ██  ██████  ██\n#    ██          ██          ██  ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                    ████  ████\n#    ██████  ████████████████  ████      ██\n#        ██    ██                    ██      ██\n#      ████  ██  ████████    ██████  ████\n#      ██  ██  ██  ████████    ██  ██  ██████\n#        ██  ██████  ██      ██  ██████  ██  ██\n#                    ██  ████  ██        ██  ██\n#    ██████████████  ████████    ████  ████\n#    ██          ██  ████  ████    ██  ██\n#    ██  ██████  ██  ████████    ██████████████\n#    ██  ██████  ██        ██  ██████      ██\n#    ██  ██████  ██  ██      ██  ████  ██    ██\n#    ██          ██  ████████          ██  ████\n#    ██████████████  ██      ██  ████        ██\n```\n\nWhen constructing your own segments, note that it may not result in the segments that has the\nshortest data length even if for each character in the source string you choose an encoding type\nwith the smallest character set that supports that supports it.","summary":"<p>Creates a new QR Code object for the given data segments, error correction level, and QR Code version that is large enough to contain all the data in the segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"args_string":"(segments : Array(Segment), ecl : ECC::Level, version : Version | Int)","args_html":"(segments : Array(<a href=\"../../Goban/Segment.html\">Segment</a>), ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>, version : <a href=\"../../Goban/QR/Version.html\">Version</a> | Int)","location":{"filename":"src/goban/qr/encoder.cr","line_number":117,"url":null},"def":{"name":"encode_segments","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"visibility":"Public","body":"version = Version.new(version.to_i)\nbit_stream = BitStream.new(version.max_data_bits(ecl))\nsegments.each do |segment|\n  bit_stream.append_segment_bits(segment, version)\nend\nbit_stream.append_terminator_bits(version, ecl)\nbit_stream.append_padding_bits(version)\ncodewords = ECC::RSInflator.inflate_codewords(bit_stream.to_bytes, version, ecl)\ncanvas = Template.make_canvas(version)\nself.draw_codewords(canvas, codewords)\nmask, canvas = self.apply_best_mask(canvas, ecl)\ncanvas.normalize\nQR.new(version, ecl, segments, canvas, mask)\n"}},{"html_id":"encode_string(text:String,ecl:ECC::Level=ECC::Level::Medium)-instance-method","name":"encode_string","doc":"Creates a new QR Code object for the given string and error correction level.\nSetting a higher error correction level makes the QR Code symbol mode resistant\nto loss of pixels, but it requires more redundant bits, resulting in a larger\nsymbol size.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nqr = Goban::QR.encode_string(\"Hello World!\", Goban::ECC::Level::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████\n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██\n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████\n#    ██          ██    ██████████  ██  ████\n#    ██  ██████  ██    ██  ██          ██████\n#    ██  ██████  ██  ██  ██  ██  ██    ██████\n#    ██  ██████  ██  ██████  ██    ██    ██\n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██\n```\n\nQR Code data under the hood is encoded in one or more encoding types, such as Numeric,\nAlphanumeric, Byte, and Kanji. Each encoding type has a different set of characters\nsupported. While Byte mode can express arbitrary types of data (usually interpreted as UTF-8\ntext, thus it can express any Unicode characters), it often uses more bits to represent a single\ncodepoint compared to other encoding types which have a limited set of characters supported,\nresulting in larger data size and a more challenging QR Code to scan.\n\nThis string encoding uses an algorithm to figure out the best segmentation of the encoding\ntypes for the given string to make the resulting data size as small as possible. Here are the\nexamples:\n\n```\n# These examples are the optimal segmentations when the EC Level is Medium.\n# Note that the Segment object shown in these examples are not the actual Segment object used\n# in the Goban's codebase but they are just pseudo objects.\n\n\"0123456789\" # => [Segment(\"0123456789\", mode: Numeric)]\n\"ABCDEF\"     # => [Segment(\"ABCDEF\", mode: Alphanumeric)]\n\"012345A\"    # => [Segment(\"012345A\", mode: Alphanumeric)]\n\"0123456A\"   # => [Segment(\"0123456\", mode: Numeric), Segment(\"A\", mode: Alphanumeric)]\n\"こんにちwa、世界！ 123\"\n# => [\n#   Segment(\"こんにち\", mode: Kanji),\n#   Segment(\"wa\", mode: Byte),\n#   Segment(\"、世界！\", mode: Kanji),\n#   Segment(\" 123\", mode: Alphanumeric)\n# ]\n```\n\nIf the type of characters used in your data strings is always the same, you may want to consider\nbuilding data segments by yourself so that Goban doesn't have to do extra processing to figure\nit out every single time.\n\nThe optimal segments and version to hard-code can be figured out by manually executing\n`Segment::Segmenter.segment_text_optimized_qr`. You can hard-code the segments and version based on\nits response, and use `QR.encode_segments` to create QR Codes using that segments and version.","summary":"<p>Creates a new QR Code object for the given string and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(text : String, ecl : ECC::Level = ECC::Level::Medium)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a> = <span class=\"t\">ECC</span><span class=\"t\">::</span><span class=\"t\">Level</span><span class=\"t\">::</span><span class=\"t\">Medium</span>)","location":{"filename":"src/goban/qr/encoder.cr","line_number":73,"url":null},"def":{"name":"encode_string","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"segments, version = self.determine_version_and_segments(text, ecl)\nself.encode_segments(segments, ecl, version)\n"}}]},{"html_id":"goban/Goban/QR/Mask","path":"Goban/QR/Mask.html","kind":"struct","full_name":"Goban::QR::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR/Mask","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask"},"ancestors":[{"html_id":"goban/Goban/AbstractQR/Mask","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr/mask.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FORMAT_BITS","name":"FORMAT_BITS","value":"{ {Low: 30660, Medium: 21522, Quartile: 13663, High: 5769}, {Low: 29427, Medium: 20773, Quartile: 12392, High: 5054}, {Low: 32170, Medium: 24188, Quartile: 16177, High: 7399}, {Low: 30877, Medium: 23371, Quartile: 14854, High: 6608}, {Low: 26159, Medium: 17913, Quartile: 9396, High: 1890}, {Low: 25368, Medium: 16590, Quartile: 8579, High: 597}, {Low: 27713, Medium: 20375, Quartile: 11994, High: 3340}, {Low: 26998, Medium: 19104, Quartile: 11245, High: 2107} }"},{"id":"MASK_PATTERNS","name":"MASK_PATTERNS","value":"{->(x : Int32, y : Int32) do\n  ((x + y) & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  (y & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  (x % 3) == 0\nend, ->(x : Int32, y : Int32) do\n  ((x + y) % 3) == 0\nend, ->(x : Int32, y : Int32) do\n  (((x // 3) + (y // 2)) & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  (((x * y) & 1) + ((x * y) % 3)) == 0\nend, ->(x : Int32, y : Int32) do\n  ((((x * y) & 1) + ((x * y) % 3)) & 1) == 0\nend, ->(x : Int32, y : Int32) do\n  ((((x + y) & 1) + ((x * y) % 3)) & 1) == 0\nend}"},{"id":"MAX","name":"MAX","value":"7_u8"},{"id":"MIN","name":"MIN","value":"0_u8"}],"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"doc":"Represents a mask pattern that can be applied to a canvas.","summary":"<p>Represents a mask pattern that can be applied to a canvas.</p>","constructors":[{"html_id":"new(value)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/goban/qr/mask.cr","line_number":38,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"goban/Goban/QR/Template","path":"Goban/QR/Template.html","kind":"module","full_name":"Goban::QR::Template","name":"Template","abstract":false,"ancestors":[{"html_id":"goban/Goban/AbstractQR/Template","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template"}],"locations":[{"filename":"src/goban/qr/template.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/Goban/AbstractQR/Template","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template"}],"extended_modules":[{"html_id":"goban/Goban/QR/Template","kind":"module","full_name":"Goban::QR::Template","name":"Template"}],"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"doc":"Handles painting each QR Code modules on a canvas.","summary":"<p>Handles painting each QR Code modules on a canvas.</p>"},{"html_id":"goban/Goban/QR/Version","path":"Goban/QR/Version.html","kind":"struct","full_name":"Goban::QR::Version","name":"Version","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR/Version","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version"},"ancestors":[{"html_id":"goban/Goban/AbstractQR/Version","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr/version.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX","name":"MAX","value":"40_u8"},{"id":"MIN","name":"MIN","value":"1_u8"},{"id":"VERSION_BITS","name":"VERSION_BITS","value":"{-1, -1, -1, -1, -1, -1, -1, 31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017}"}],"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"doc":"Represents a version number of the QR Code symbol.\nPossible versions range from 1 to 40, and the higher the number,\nthe large the size of the final QR Code symbol.","summary":"<p>Represents a version number of the QR Code symbol.</p>","constructors":[{"html_id":"new(value)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/goban/qr/version.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"max_data_bits(ecl:ECC::Level)-instance-method","name":"max_data_bits","doc":"Maximum number of data bits that can be contained in the QR Code\nsymbol of this version. This does not include the number of error correction\ncodewords.","summary":"<p>Maximum number of data bits that can be contained in the QR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/qr/version.cr","line_number":97,"url":null},"def":{"name":"max_data_bits","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"(max_data_codewords(ecl)) * 8"}},{"html_id":"max_data_codewords(ecl:ECC::Level)-instance-method","name":"max_data_codewords","doc":"Maximum number of data codewords that can be contained in the QR Code\nsymbol of this version. This does not include the number of error correction\ncodewords.","summary":"<p>Maximum number of data codewords that can be contained in the QR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/qr/version.cr","line_number":88,"url":null},"def":{"name":"max_data_codewords","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"ecc_codewords = ECC::EC_CODEWORDS_PER_BLOCK_QR[ecl.to_s][@value] * ECC::EC_BLOCKS_QR[ecl.to_s][@value]\nif ecc_codewords < 0\n  raise(InputError.new(\"Invalid EC level or version\"))\nend\nraw_max_data_codewords - ecc_codewords\n"}}]}]},{"html_id":"goban/Goban/RMQR","path":"Goban/RMQR.html","kind":"struct","full_name":"Goban::RMQR","name":"RMQR","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},"ancestors":[{"html_id":"goban/Goban/AbstractQR","kind":"struct","full_name":"Goban::AbstractQR","name":"AbstractQR"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr.cr","line_number":7,"url":null},{"filename":"src/goban/rmqr/decoder.cr","line_number":1,"url":null},{"filename":"src/goban/rmqr/encoder.cr","line_number":1,"url":null},{"filename":"src/goban/rmqr/mask.cr","line_number":1,"url":null},{"filename":"src/goban/rmqr/template.cr","line_number":1,"url":null},{"filename":"src/goban/rmqr/version.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/RMQR/Decoder","kind":"module","full_name":"Goban::RMQR::Decoder","name":"Decoder"},{"html_id":"goban/Goban/RMQR/Encoder","kind":"module","full_name":"Goban::RMQR::Encoder","name":"Encoder"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Object that represents an encoded rMQR Code symbol.","summary":"<p>Object that represents an encoded rMQR Code symbol.</p>","instance_methods":[{"html_id":"canvas:Canvas(UInt8)-instance-method","name":"canvas","doc":"Returns the canvas of the rMQR Code symbol. Canvas contains information about\neach single module (pixel) in the symbol.","summary":"<p>Returns the canvas of the rMQR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/rmqr.cr","line_number":20,"url":null},"def":{"name":"canvas","return_type":"Canvas(UInt8)","visibility":"Public","body":"@canvas"}},{"html_id":"ecl:ECC::Level-instance-method","name":"ecl","doc":"Error correction level of the rMQR Code symbol.","summary":"<p>Error correction level of the rMQR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/rmqr.cr","line_number":15,"url":null},"def":{"name":"ecl","return_type":"ECC::Level","visibility":"Public","body":"@ecl"}},{"html_id":"segments:Array(Segment)-instance-method","name":"segments","doc":"Content text segments of the QR Code symbol.","summary":"<p>Content text segments of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/rmqr.cr","line_number":17,"url":null},"def":{"name":"segments","return_type":"Array(Segment)","visibility":"Public","body":"@segments"}},{"html_id":"size:SymbolDimension-instance-method","name":"size","doc":"Width and height of the symbol.","summary":"<p>Width and height of the symbol.</p>","abstract":false,"location":{"filename":"src/goban/rmqr.cr","line_number":22,"url":null},"def":{"name":"size","return_type":"SymbolDimension","visibility":"Public","body":"@size"}},{"html_id":"version:Version-instance-method","name":"version","doc":"Version of the rMQR Code symbol. Version in QR Code does not refer to its revision,\nbut simply indicates the size format of the QR Code symbol.","summary":"<p>Version of the rMQR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/rmqr.cr","line_number":13,"url":null},"def":{"name":"version","return_type":"Version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/RMQR/Decoder","path":"Goban/RMQR/Decoder.html","kind":"module","full_name":"Goban::RMQR::Decoder","name":"Decoder","abstract":false,"locations":[{"filename":"src/goban/rmqr/decoder.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/RMQR/Decoder","kind":"module","full_name":"Goban::RMQR::Decoder","name":"Decoder"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"instance_methods":[{"html_id":"decode(canvas:Canvas(UInt8))-instance-method","name":"decode","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"args_string":"(canvas : Canvas(UInt8))","args_html":"(canvas : <a href=\"../../Goban/Canvas.html\">Canvas</a>(UInt8))","location":{"filename":"src/goban/rmqr/decoder.cr","line_number":18,"url":null},"def":{"name":"decode","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"visibility":"Public","body":"if canvas.size_x > canvas.size_y\nelse\n  raise(InputError.new(\"Canvas dimention not correct\"))\nend\nversion = begin\n  Version.new(canvas.size_x, canvas.size_y)\nrescue\n  nil\nend\nif version\nelse\n  raise(InputError.new(\"Invalid version\"))\nend\nactual_version, ecl = self.read_format(canvas)\nif actual_version == version\nelse\n  raise(VersionMismatchError.new(actual_version.to_i))\nend\nTemplate.draw_function_patterns(canvas, version, ecl)\nMask.new.apply_to(canvas)\nraw_data_codewords = self.read_data_codewords(canvas, version)\ndata_codewords = ECC::RSDeflator.deflate_codewords(raw_data_codewords, version, ecl)\nbit_stream = BitStream.new(data_codewords)\nsegments = Array(Segment).new\nwhile bit_stream.read_pos < bit_stream.size\n  header_bits = bit_stream.read_bits(3)\n  if header_bits == 0\n    break\n  end\n  mode = Segment::Mode.from_bits(header_bits, version)\n  cci_bits_count = mode.cci_bits_count(version)\n  char_count = (bit_stream.read_bits(cci_bits_count)).to_i\n  segment = Segment.new(mode, char_count, bit_stream)\n  segments.push(segment)\n  bit_stream.read_pos = bit_stream.read_pos + segment.bit_size\nend\nRMQR.new(version, ecl, segments, canvas)\n"}},{"html_id":"decode_to_string(canvas:Canvas(UInt8))-instance-method","name":"decode_to_string","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"args_string":"(canvas : Canvas(UInt8))","args_html":"(canvas : <a href=\"../../Goban/Canvas.html\">Canvas</a>(UInt8))","location":{"filename":"src/goban/rmqr/decoder.cr","line_number":13,"url":null},"def":{"name":"decode_to_string","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas(UInt8)"}],"visibility":"Public","body":"segments = (self.decode(canvas)).segments\nsegments.join do |seg|\n  seg.text\nend\n"}}],"types":[{"html_id":"goban/Goban/RMQR/Decoder/VersionMismatchError","path":"Goban/RMQR/Decoder/VersionMismatchError.html","kind":"class","full_name":"Goban::RMQR::Decoder::VersionMismatchError","name":"VersionMismatchError","abstract":false,"superclass":{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"goban/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"goban/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr/decoder.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/RMQR/Decoder","kind":"module","full_name":"Goban::RMQR::Decoder","name":"Decoder"},"constructors":[{"html_id":"new(actual_version:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"actual_version","external_name":"actual_version","restriction":"::Int32"}],"args_string":"(actual_version : Int32)","args_html":"(actual_version : Int32)","location":{"filename":"src/goban/rmqr/decoder.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"actual_version","external_name":"actual_version","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(actual_version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"actual_version:Int32-instance-method","name":"actual_version","abstract":false,"location":{"filename":"src/goban/rmqr/decoder.cr","line_number":6,"url":null},"def":{"name":"actual_version","return_type":"Int32","visibility":"Public","body":"@actual_version"}}]}]},{"html_id":"goban/Goban/RMQR/Encoder","path":"Goban/RMQR/Encoder.html","kind":"module","full_name":"Goban::RMQR::Encoder","name":"Encoder","abstract":false,"locations":[{"filename":"src/goban/rmqr/encoder.cr","line_number":8,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/RMQR/Encoder","kind":"module","full_name":"Goban::RMQR::Encoder","name":"Encoder"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"instance_methods":[{"html_id":"determine_version_and_segments(text:String,ecl:ECC::Level,strategy:SizingStrategy):Tuple(Array(Segment),RMQR::Version)-instance-method","name":"determine_version_and_segments","doc":"Returns a tuple of the optimized segments and rMQR Code version\nfor the given text and error correction level.","summary":"<p>Returns a tuple of the optimized segments and rMQR Code version for the given text and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"strategy","external_name":"strategy","restriction":"SizingStrategy"}],"args_string":"(text : String, ecl : ECC::Level, strategy : SizingStrategy) : Tuple(Array(Segment), RMQR::Version)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>, strategy : <a href=\"../../Goban/RMQR/SizingStrategy.html\">SizingStrategy</a>) : Tuple(Array(<a href=\"../../Goban/Segment.html\">Segment</a>), <a href=\"../../Goban/RMQR/Version.html\">RMQR::Version</a>)","location":{"filename":"src/goban/rmqr/encoder.cr","line_number":52,"url":null},"def":{"name":"determine_version_and_segments","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"strategy","external_name":"strategy","restriction":"SizingStrategy"}],"return_type":"Tuple(Array(Segment), RMQR::Version)","visibility":"Public","body":"chars = text.chars\nsegments, version = nil, nil\nVersion::ORDERED[strategy.value].each do |vv|\n  v = Version.new(vv)\n  char_modes = Segment::Segmenter.compute_char_modes(chars, v)\n  segments = Segment::Segmenter.make_segments(text, char_modes)\n  cap_bits = v.max_data_bits(ecl)\n  begin\n    used_bits = Segment.count_total_bits(segments, v)\n  rescue e : InputError\n    if e.message == \"Segment too long\"\n      next\n    end\n    raise(e)\n  end\n  if used_bits <= cap_bits\n    version = v\n    break\n  end\nend\nif segments && version\nelse\n  raise(InputError.new(\"Text too long\"))\nend\n{segments, version}\n"}},{"html_id":"encode_segments(segments:Array(Segment),ecl:ECC::Level,version:Version|VersionValue)-instance-method","name":"encode_segments","doc":"Creates a new rMQR Code object for the given data segments, error correction level, and\nrMQR Code version that is large enough to contain all the data in the segments.\n\nSee `QR::Encoder.encode_segments` for more information.","summary":"<p>Creates a new rMQR Code object for the given data segments, error correction level, and rMQR Code version that is large enough to contain all the data in the segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | VersionValue"}],"args_string":"(segments : Array(Segment), ecl : ECC::Level, version : Version | VersionValue)","args_html":"(segments : Array(<a href=\"../../Goban/Segment.html\">Segment</a>), ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>, version : <a href=\"../../Goban/RMQR/Version.html\">Version</a> | <a href=\"../../Goban/RMQR/VersionValue.html\">VersionValue</a>)","location":{"filename":"src/goban/rmqr/encoder.cr","line_number":29,"url":null},"def":{"name":"encode_segments","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | VersionValue"}],"visibility":"Public","body":"if ecl.medium? || ecl.high?\nelse\n  raise(InputError.new(\"Unsupported EC Level\"))\nend\nversion = Version.new(version.value)\nbit_stream = BitStream.new(version.max_data_bits(ecl))\nsegments.each do |segment|\n  bit_stream.append_segment_bits(segment, version)\nend\nbit_stream.append_terminator_bits(version, ecl)\nbit_stream.append_padding_bits(version)\ncodewords = ECC::RSInflator.inflate_codewords(bit_stream.to_bytes, version, ecl)\ncanvas = Template.make_canvas(version, ecl)\nself.draw_codewords(canvas, codewords)\nmask, canvas = self.apply_mask(canvas)\ncanvas.normalize\nRMQR.new(version, ecl, segments, canvas)\n"}},{"html_id":"encode_string(text:String,ecl:ECC::Level=ECC::Level::Medium,strategy:SizingStrategy=SizingStrategy::MinimizeArea)-instance-method","name":"encode_string","doc":"Creates a new Micro QR Code object for the given string, error correction level, and sizing strategy.\n\nUnlike regular QR Codes and Micro QR Codes, rMQR Codes has different sizes in width and height,\nwhich means that there can be multiple versions that are optimal in terms of capacity.\n`SizingStrategy` is used to prioritize one version than the other based on whether you want the symbol\nto be smaller in total area, width, or height. By default, it tries to balance the width and height,\nkeeping the total area as small as possible.\n\nSee `QR::Encoder.encode_string` for more information.","summary":"<p>Creates a new Micro QR Code object for the given string, error correction level, and sizing strategy.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"},{"name":"strategy","default_value":"SizingStrategy::MinimizeArea","external_name":"strategy","restriction":"SizingStrategy"}],"args_string":"(text : String, ecl : ECC::Level = ECC::Level::Medium, strategy : SizingStrategy = SizingStrategy::MinimizeArea)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a> = <span class=\"t\">ECC</span><span class=\"t\">::</span><span class=\"t\">Level</span><span class=\"t\">::</span><span class=\"t\">Medium</span>, strategy : <a href=\"../../Goban/RMQR/SizingStrategy.html\">SizingStrategy</a> = <span class=\"t\">SizingStrategy</span><span class=\"t\">::</span><span class=\"t\">MinimizeArea</span>)","location":{"filename":"src/goban/rmqr/encoder.cr","line_number":20,"url":null},"def":{"name":"encode_string","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"},{"name":"strategy","default_value":"SizingStrategy::MinimizeArea","external_name":"strategy","restriction":"SizingStrategy"}],"visibility":"Public","body":"segments, version = self.determine_version_and_segments(text, ecl, strategy)\nself.encode_segments(segments, ecl, version)\n"}}]},{"html_id":"goban/Goban/RMQR/Mask","path":"Goban/RMQR/Mask.html","kind":"struct","full_name":"Goban::RMQR::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR/Mask","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask"},"ancestors":[{"html_id":"goban/Goban/AbstractQR/Mask","kind":"struct","full_name":"Goban::AbstractQR::Mask","name":"Mask"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr/mask.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MASK_PATTERN","name":"MASK_PATTERN","value":"->(x : Int32, y : Int32) do\n  (((x // 3) + (y // 2)) & 1) == 0\nend"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"doc":"Represents a mask pattern that can be applied to a canvas.","summary":"<p>Represents a mask pattern that can be applied to a canvas.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/goban/rmqr/mask.cr","line_number":6,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"goban/Goban/RMQR/SizingStrategy","path":"Goban/RMQR/SizingStrategy.html","kind":"enum","full_name":"Goban::RMQR::SizingStrategy","name":"SizingStrategy","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr/encoder.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"MinimizeArea","name":"MinimizeArea","value":"0_u8"},{"id":"MinimizeWidth","name":"MinimizeWidth","value":"1_u8"},{"id":"MinimizeHeight","name":"MinimizeHeight","value":"2_u8"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"instance_methods":[{"html_id":"minimize_area?-instance-method","name":"minimize_area?","abstract":false,"location":{"filename":"src/goban/rmqr/encoder.cr","line_number":3,"url":null},"def":{"name":"minimize_area?","visibility":"Public","body":"self == MinimizeArea"}},{"html_id":"minimize_height?-instance-method","name":"minimize_height?","abstract":false,"location":{"filename":"src/goban/rmqr/encoder.cr","line_number":5,"url":null},"def":{"name":"minimize_height?","visibility":"Public","body":"self == MinimizeHeight"}},{"html_id":"minimize_width?-instance-method","name":"minimize_width?","abstract":false,"location":{"filename":"src/goban/rmqr/encoder.cr","line_number":4,"url":null},"def":{"name":"minimize_width?","visibility":"Public","body":"self == MinimizeWidth"}}]},{"html_id":"goban/Goban/RMQR/SymbolDimension","path":"Goban/RMQR/SymbolDimension.html","kind":"struct","full_name":"Goban::RMQR::SymbolDimension","name":"SymbolDimension","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr/version.cr","line_number":37,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HEIGHTS","name":"HEIGHTS","value":"{7, 9, 11, 13, 15, 17}"},{"id":"WIDTHS","name":"WIDTHS","value":"{27, 43, 59, 77, 99, 139}"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"constructors":[{"html_id":"new(version_value:VersionValue)-class-method","name":"new","abstract":false,"args":[{"name":"version_value","external_name":"version_value","restriction":"VersionValue"}],"args_string":"(version_value : VersionValue)","args_html":"(version_value : <a href=\"../../Goban/RMQR/VersionValue.html\">VersionValue</a>)","location":{"filename":"src/goban/rmqr/version.cr","line_number":46,"url":null},"def":{"name":"new","args":[{"name":"version_value","external_name":"version_value","restriction":"VersionValue"}],"visibility":"Public","body":"_ = allocate\n_.initialize(version_value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"height:Int32-instance-method","name":"height","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":39,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"}},{"html_id":"width:Int32-instance-method","name":"width","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":38,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"}}]},{"html_id":"goban/Goban/RMQR/Template","path":"Goban/RMQR/Template.html","kind":"module","full_name":"Goban::RMQR::Template","name":"Template","abstract":false,"ancestors":[{"html_id":"goban/Goban/AbstractQR/Template","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template"}],"locations":[{"filename":"src/goban/rmqr/template.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/Goban/AbstractQR/Template","kind":"module","full_name":"Goban::AbstractQR::Template","name":"Template"}],"extended_modules":[{"html_id":"goban/Goban/RMQR/Template","kind":"module","full_name":"Goban::RMQR::Template","name":"Template"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"doc":"Handles painting each QR Code modules on a canvas.","summary":"<p>Handles painting each QR Code modules on a canvas.</p>"},{"html_id":"goban/Goban/RMQR/Version","path":"Goban/RMQR/Version.html","kind":"struct","full_name":"Goban::RMQR::Version","name":"Version","abstract":false,"superclass":{"html_id":"goban/Goban/AbstractQR/Version","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version"},"ancestors":[{"html_id":"goban/Goban/AbstractQR/Version","kind":"struct","full_name":"Goban::AbstractQR::Version","name":"Version"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr/version.cr","line_number":65,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ORDERED","name":"ORDERED","value":"{ORDERED_BY_AREA, ORDERED_BY_WIDTH, ORDERED_BY_HEIGHT}"},{"id":"ORDERED_BY_AREA","name":"ORDERED_BY_AREA","value":"StaticArray[VersionValue::R7x43, VersionValue::R7x59, VersionValue::R7x77, VersionValue::R7x99, VersionValue::R7x139, VersionValue::R9x43, VersionValue::R9x59, VersionValue::R9x77, VersionValue::R9x99, VersionValue::R9x139, VersionValue::R11x27, VersionValue::R11x43, VersionValue::R11x59, VersionValue::R11x77, VersionValue::R11x99, VersionValue::R11x139, VersionValue::R13x27, VersionValue::R13x43, VersionValue::R13x59, VersionValue::R13x77, VersionValue::R13x99, VersionValue::R13x139, VersionValue::R15x43, VersionValue::R15x59, VersionValue::R15x77, VersionValue::R15x99, VersionValue::R15x139, VersionValue::R17x43, VersionValue::R17x59, VersionValue::R17x77, VersionValue::R17x99, VersionValue::R17x139].sort do |a, b|\n  a_size = SymbolDimension.new(a)\n  b_size = SymbolDimension.new(b)\n  (a_size.width * a_size.height) <=> (b_size.width * b_size.height)\nend"},{"id":"ORDERED_BY_HEIGHT","name":"ORDERED_BY_HEIGHT","value":"StaticArray[VersionValue::R7x43, VersionValue::R7x59, VersionValue::R7x77, VersionValue::R7x99, VersionValue::R7x139, VersionValue::R9x43, VersionValue::R9x59, VersionValue::R9x77, VersionValue::R9x99, VersionValue::R9x139, VersionValue::R11x27, VersionValue::R11x43, VersionValue::R11x59, VersionValue::R11x77, VersionValue::R11x99, VersionValue::R11x139, VersionValue::R13x27, VersionValue::R13x43, VersionValue::R13x59, VersionValue::R13x77, VersionValue::R13x99, VersionValue::R13x139, VersionValue::R15x43, VersionValue::R15x59, VersionValue::R15x77, VersionValue::R15x99, VersionValue::R15x139, VersionValue::R17x43, VersionValue::R17x59, VersionValue::R17x77, VersionValue::R17x99, VersionValue::R17x139].sort do |a, b|\n  a_size = SymbolDimension.new(a)\n  b_size = SymbolDimension.new(b)\n  cmp = a_size.height <=> b_size.height\n  if cmp == 0\n    cmp = a_size.width <=> b_size.width\n  end\n  cmp\nend"},{"id":"ORDERED_BY_WIDTH","name":"ORDERED_BY_WIDTH","value":"StaticArray[VersionValue::R7x43, VersionValue::R7x59, VersionValue::R7x77, VersionValue::R7x99, VersionValue::R7x139, VersionValue::R9x43, VersionValue::R9x59, VersionValue::R9x77, VersionValue::R9x99, VersionValue::R9x139, VersionValue::R11x27, VersionValue::R11x43, VersionValue::R11x59, VersionValue::R11x77, VersionValue::R11x99, VersionValue::R11x139, VersionValue::R13x27, VersionValue::R13x43, VersionValue::R13x59, VersionValue::R13x77, VersionValue::R13x99, VersionValue::R13x139, VersionValue::R15x43, VersionValue::R15x59, VersionValue::R15x77, VersionValue::R15x99, VersionValue::R15x139, VersionValue::R17x43, VersionValue::R17x59, VersionValue::R17x77, VersionValue::R17x99, VersionValue::R17x139].sort do |a, b|\n  a_size = SymbolDimension.new(a)\n  b_size = SymbolDimension.new(b)\n  cmp = a_size.width <=> b_size.width\n  if cmp == 0\n    cmp = a_size.height <=> b_size.height\n  end\n  cmp\nend"},{"id":"VERSION_BITS","name":"VERSION_BITS","value":"{ {Medium: {129714, 133755}, High: {258919, 942}}, {Medium: {124311, 136542}, High: {257090, 7307}}, {Medium: {121821, 142100}, High: {250376, 8897}}, {Medium: {115960, 144433}, High: {249133, 15844}}, {Medium: {112748, 149669}, High: {242105, 16752}}, {Medium: {108361, 153472}, High: {241308, 24149}}, {Medium: {104707, 158154}, High: {233686, 24607}}, {Medium: {99878, 161519}, High: {233459, 32570}}, {Medium: {98062, 167879}, High: {227035, 34322}}, {Medium: {90155, 168162}, High: {223742, 39223}}, {Medium: {89697, 175784}, High: {219060, 42877}}, {Medium: {82244, 176525}, High: {215185, 47192}}, {Medium: {81360, 183577}, High: {209925, 50380}}, {Medium: {74485, 184892}, High: {207648, 56297}}, {Medium: {72895, 191606}, High: {202090, 58787}}, {Medium: {66458, 193363}, High: {199247, 64134}}, {Medium: {61898, 196867}, High: {194591, 67798}}, {Medium: {61167, 204326}, High: {190266, 71667}}, {Medium: {53413, 204908}, High: {186736, 76217}}, {Medium: {53120, 212809}, High: {181845, 79516}}, {Medium: {45844, 213981}, High: {178881, 84488}}, {Medium: {44081, 220408}, High: {173540, 87341}}, {Medium: {37499, 221874}, High: {170926, 93031}}, {Medium: {36190, 228759}, High: {165003, 95298}}, {Medium: {29814, 230591}, High: {163235, 101738}}, {Medium: {27475, 236442}, High: {156294, 102991}}, {Medium: {21785, 239056}, High: {154828, 109573}}, {Medium: {19004, 244469}, High: {148457, 111392}}, {Medium: {13992, 247393}, High: {147325, 118708}}, {Medium: {10637, 252228}, High: {139352, 118929}}, {Medium: {6087, 255758}, High: {138770, 126683}}, {Medium: {2274, 260139}, High: {131383, 127486}} }"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"constructors":[{"html_id":"new(width:Int,height:Int)-class-method","name":"new","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int"},{"name":"height","external_name":"height","restriction":"Int"}],"args_string":"(width : Int, height : Int)","args_html":"(width : Int, height : Int)","location":{"filename":"src/goban/rmqr/version.cr","line_number":133,"url":null},"def":{"name":"new","args":[{"name":"width","external_name":"width","restriction":"Int"},{"name":"height","external_name":"height","restriction":"Int"}],"visibility":"Public","body":"self.new(\"R#{height}x#{width}\")"}},{"html_id":"new(value:VersionValue)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"VersionValue"}],"args_string":"(value : VersionValue)","args_html":"(value : <a href=\"../../Goban/RMQR/VersionValue.html\">VersionValue</a>)","location":{"filename":"src/goban/rmqr/version.cr","line_number":120,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"VersionValue"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(str:String)-class-method","name":"new","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : String)","location":{"filename":"src/goban/rmqr/version.cr","line_number":125,"url":null},"def":{"name":"new","args":[{"name":"str","external_name":"str","restriction":"String"}],"visibility":"Public","body":"self.new(VersionValue.parse(str))"}},{"html_id":"new(value:Int)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"}],"args_string":"(value : Int)","args_html":"(value : Int)","location":{"filename":"src/goban/rmqr/version.cr","line_number":129,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"Int"}],"visibility":"Public","body":"self.new(VersionValue.new(value.to_u8))"}}],"instance_methods":[{"html_id":"<=>(other:Int)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","args_html":"(other : Int)","location":{"filename":"src/goban/rmqr/version.cr","line_number":205,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Int"}],"visibility":"Public","body":"self.to_i <=> other"}},{"html_id":"max_data_bits(ecl:ECC::Level)-instance-method","name":"max_data_bits","doc":"Maximum number of data bits that can be contained in the rMQR Code\nsymbol of this version. This does not include the number of error correction\ncodewords.","summary":"<p>Maximum number of data bits that can be contained in the rMQR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/rmqr/version.cr","line_number":201,"url":null},"def":{"name":"max_data_bits","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"(max_data_codewords(ecl)) * 8"}},{"html_id":"max_data_codewords(ecl:ECC::Level)-instance-method","name":"max_data_codewords","doc":"Maximum number of data codewords that can be contained in the rMQR Code\nsymbol of this version. This does not include the number of error correction\ncodewords.","summary":"<p>Maximum number of data codewords that can be contained in the rMQR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/rmqr/version.cr","line_number":192,"url":null},"def":{"name":"max_data_codewords","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"ecc_codewords = ECC::EC_CODEWORDS_PER_BLOCK_RMQR[ecl.to_s][@value.value + 1] * ECC::EC_BLOCKS_RMQR[ecl.to_s][@value.value + 1]\nif ecc_codewords < 0\n  raise(InputError.new(\"Invalid EC level or version\"))\nend\nraw_max_data_codewords - ecc_codewords\n"}},{"html_id":"to_i-instance-method","name":"to_i","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":209,"url":null},"def":{"name":"to_i","visibility":"Public","body":"value.to_i"}}]},{"html_id":"goban/Goban/RMQR/VersionValue","path":"Goban/RMQR/VersionValue.html","kind":"enum","full_name":"Goban::RMQR::VersionValue","name":"VersionValue","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/rmqr/version.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"R7x43","name":"R7x43","value":"0_u8"},{"id":"R7x59","name":"R7x59","value":"1_u8"},{"id":"R7x77","name":"R7x77","value":"2_u8"},{"id":"R7x99","name":"R7x99","value":"3_u8"},{"id":"R7x139","name":"R7x139","value":"4_u8"},{"id":"R9x43","name":"R9x43","value":"5_u8"},{"id":"R9x59","name":"R9x59","value":"6_u8"},{"id":"R9x77","name":"R9x77","value":"7_u8"},{"id":"R9x99","name":"R9x99","value":"8_u8"},{"id":"R9x139","name":"R9x139","value":"9_u8"},{"id":"R11x27","name":"R11x27","value":"10_u8"},{"id":"R11x43","name":"R11x43","value":"11_u8"},{"id":"R11x59","name":"R11x59","value":"12_u8"},{"id":"R11x77","name":"R11x77","value":"13_u8"},{"id":"R11x99","name":"R11x99","value":"14_u8"},{"id":"R11x139","name":"R11x139","value":"15_u8"},{"id":"R13x27","name":"R13x27","value":"16_u8"},{"id":"R13x43","name":"R13x43","value":"17_u8"},{"id":"R13x59","name":"R13x59","value":"18_u8"},{"id":"R13x77","name":"R13x77","value":"19_u8"},{"id":"R13x99","name":"R13x99","value":"20_u8"},{"id":"R13x139","name":"R13x139","value":"21_u8"},{"id":"R15x43","name":"R15x43","value":"22_u8"},{"id":"R15x59","name":"R15x59","value":"23_u8"},{"id":"R15x77","name":"R15x77","value":"24_u8"},{"id":"R15x99","name":"R15x99","value":"25_u8"},{"id":"R15x139","name":"R15x139","value":"26_u8"},{"id":"R17x43","name":"R17x43","value":"27_u8"},{"id":"R17x59","name":"R17x59","value":"28_u8"},{"id":"R17x77","name":"R17x77","value":"29_u8"},{"id":"R17x99","name":"R17x99","value":"30_u8"},{"id":"R17x139","name":"R17x139","value":"31_u8"}],"namespace":{"html_id":"goban/Goban/RMQR","kind":"struct","full_name":"Goban::RMQR","name":"RMQR"},"instance_methods":[{"html_id":"r11x139?-instance-method","name":"r11x139?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":18,"url":null},"def":{"name":"r11x139?","visibility":"Public","body":"self == R11x139"}},{"html_id":"r11x27?-instance-method","name":"r11x27?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":13,"url":null},"def":{"name":"r11x27?","visibility":"Public","body":"self == R11x27"}},{"html_id":"r11x43?-instance-method","name":"r11x43?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":14,"url":null},"def":{"name":"r11x43?","visibility":"Public","body":"self == R11x43"}},{"html_id":"r11x59?-instance-method","name":"r11x59?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":15,"url":null},"def":{"name":"r11x59?","visibility":"Public","body":"self == R11x59"}},{"html_id":"r11x77?-instance-method","name":"r11x77?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":16,"url":null},"def":{"name":"r11x77?","visibility":"Public","body":"self == R11x77"}},{"html_id":"r11x99?-instance-method","name":"r11x99?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":17,"url":null},"def":{"name":"r11x99?","visibility":"Public","body":"self == R11x99"}},{"html_id":"r13x139?-instance-method","name":"r13x139?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":24,"url":null},"def":{"name":"r13x139?","visibility":"Public","body":"self == R13x139"}},{"html_id":"r13x27?-instance-method","name":"r13x27?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":19,"url":null},"def":{"name":"r13x27?","visibility":"Public","body":"self == R13x27"}},{"html_id":"r13x43?-instance-method","name":"r13x43?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":20,"url":null},"def":{"name":"r13x43?","visibility":"Public","body":"self == R13x43"}},{"html_id":"r13x59?-instance-method","name":"r13x59?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":21,"url":null},"def":{"name":"r13x59?","visibility":"Public","body":"self == R13x59"}},{"html_id":"r13x77?-instance-method","name":"r13x77?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":22,"url":null},"def":{"name":"r13x77?","visibility":"Public","body":"self == R13x77"}},{"html_id":"r13x99?-instance-method","name":"r13x99?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":23,"url":null},"def":{"name":"r13x99?","visibility":"Public","body":"self == R13x99"}},{"html_id":"r15x139?-instance-method","name":"r15x139?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":29,"url":null},"def":{"name":"r15x139?","visibility":"Public","body":"self == R15x139"}},{"html_id":"r15x43?-instance-method","name":"r15x43?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":25,"url":null},"def":{"name":"r15x43?","visibility":"Public","body":"self == R15x43"}},{"html_id":"r15x59?-instance-method","name":"r15x59?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":26,"url":null},"def":{"name":"r15x59?","visibility":"Public","body":"self == R15x59"}},{"html_id":"r15x77?-instance-method","name":"r15x77?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":27,"url":null},"def":{"name":"r15x77?","visibility":"Public","body":"self == R15x77"}},{"html_id":"r15x99?-instance-method","name":"r15x99?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":28,"url":null},"def":{"name":"r15x99?","visibility":"Public","body":"self == R15x99"}},{"html_id":"r17x139?-instance-method","name":"r17x139?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":34,"url":null},"def":{"name":"r17x139?","visibility":"Public","body":"self == R17x139"}},{"html_id":"r17x43?-instance-method","name":"r17x43?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":30,"url":null},"def":{"name":"r17x43?","visibility":"Public","body":"self == R17x43"}},{"html_id":"r17x59?-instance-method","name":"r17x59?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":31,"url":null},"def":{"name":"r17x59?","visibility":"Public","body":"self == R17x59"}},{"html_id":"r17x77?-instance-method","name":"r17x77?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":32,"url":null},"def":{"name":"r17x77?","visibility":"Public","body":"self == R17x77"}},{"html_id":"r17x99?-instance-method","name":"r17x99?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":33,"url":null},"def":{"name":"r17x99?","visibility":"Public","body":"self == R17x99"}},{"html_id":"r7x139?-instance-method","name":"r7x139?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":7,"url":null},"def":{"name":"r7x139?","visibility":"Public","body":"self == R7x139"}},{"html_id":"r7x43?-instance-method","name":"r7x43?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":3,"url":null},"def":{"name":"r7x43?","visibility":"Public","body":"self == R7x43"}},{"html_id":"r7x59?-instance-method","name":"r7x59?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":4,"url":null},"def":{"name":"r7x59?","visibility":"Public","body":"self == R7x59"}},{"html_id":"r7x77?-instance-method","name":"r7x77?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":5,"url":null},"def":{"name":"r7x77?","visibility":"Public","body":"self == R7x77"}},{"html_id":"r7x99?-instance-method","name":"r7x99?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":6,"url":null},"def":{"name":"r7x99?","visibility":"Public","body":"self == R7x99"}},{"html_id":"r9x139?-instance-method","name":"r9x139?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":12,"url":null},"def":{"name":"r9x139?","visibility":"Public","body":"self == R9x139"}},{"html_id":"r9x43?-instance-method","name":"r9x43?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":8,"url":null},"def":{"name":"r9x43?","visibility":"Public","body":"self == R9x43"}},{"html_id":"r9x59?-instance-method","name":"r9x59?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":9,"url":null},"def":{"name":"r9x59?","visibility":"Public","body":"self == R9x59"}},{"html_id":"r9x77?-instance-method","name":"r9x77?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":10,"url":null},"def":{"name":"r9x77?","visibility":"Public","body":"self == R9x77"}},{"html_id":"r9x99?-instance-method","name":"r9x99?","abstract":false,"location":{"filename":"src/goban/rmqr/version.cr","line_number":11,"url":null},"def":{"name":"r9x99?","visibility":"Public","body":"self == R9x99"}}]}]},{"html_id":"goban/Goban/Segment","path":"Goban/Segment.html","kind":"struct","full_name":"Goban::Segment","name":"Segment","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/segment.cr","line_number":5,"url":null},{"filename":"src/goban/segment/mode.cr","line_number":1,"url":null},{"filename":"src/goban/segment/segmenter.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALPHANUMERIC_CHARS","name":"ALPHANUMERIC_CHARS","value":"{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'}"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Represents a segment of QR Code data that holds its data bits and encoding type.","summary":"<p>Represents a segment of QR Code data that holds its data bits and encoding type.</p>","class_methods":[{"html_id":"alphanumeric(text:String)-class-method","name":"alphanumeric","doc":"Shorthand method for creating a Alphanumeric mode segment.","summary":"<p>Shorthand method for creating a Alphanumeric mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":46,"url":null},"def":{"name":"alphanumeric","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"is_all_alphanumeric = text.each_char.all? do |c|\n  ALPHANUMERIC_CHARS.index(c)\nend\nif is_all_alphanumeric\nelse\n  raise(InputError.new(\"Alphanumeric data contains unencodable characters\"))\nend\nbit_size = (text.size * 5) + ((text.size + 1) // 2)\nself.new(Segment::Mode::Alphanumeric, text.size, text, bit_size)\n"}},{"html_id":"byte(text:String)-class-method","name":"byte","doc":"Shorthand method for creating a Byte mode segment.","summary":"<p>Shorthand method for creating a Byte mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":57,"url":null},"def":{"name":"byte","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"self.new(Segment::Mode::Byte, text.bytesize, text, text.bytesize * 8)"}},{"html_id":"count_total_bits(segments:Array(Segment),version:AbstractQR::Version)-class-method","name":"count_total_bits","doc":"Count number of bits in the given list of segments.","summary":"<p>Count number of bits in the given list of segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"version","external_name":"version","restriction":"AbstractQR::Version"}],"args_string":"(segments : Array(Segment), version : AbstractQR::Version)","args_html":"(segments : Array(<a href=\"../Goban/Segment.html\">Segment</a>), version : <a href=\"../Goban/AbstractQR/Version.html\">AbstractQR::Version</a>)","location":{"filename":"src/goban/segment.cr","line_number":212,"url":null},"def":{"name":"count_total_bits","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"version","external_name":"version","restriction":"AbstractQR::Version"}],"visibility":"Public","body":"result = 0\nsegments.each do |segment|\n  cci_bits_count = segment.mode.cci_bits_count(version)\n  if !cci_bits_count\n    raise(InputError.new(\"Invalid segment\"))\n  end\n  if segment.char_count >= (1 << cci_bits_count)\n    raise(InputError.new(\"Segment too long\"))\n  end\n  result = result + ((version.mode_indicator_length + cci_bits_count) + segment.bit_size)\nend\nresult\n"}},{"html_id":"kanji(text:String)-class-method","name":"kanji","doc":"Shorthand method for creating a Kanji mode segment.","summary":"<p>Shorthand method for creating a Kanji mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":62,"url":null},"def":{"name":"kanji","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"bit_size = text.size * 13\nsegment = self.new(Segment::Mode::Kanji, text.size, text, bit_size)\n"}},{"html_id":"numeric(text:String)-class-method","name":"numeric","doc":"Shorthand method for creating a Numeric mode segment.","summary":"<p>Shorthand method for creating a Numeric mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":38,"url":null},"def":{"name":"numeric","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"if text.each_char.all?(&.ascii_number?)\nelse\n  raise(InputError.new(\"Numeric data contains non-numeric characters\"))\nend\nbit_size = (text.size * 3) + ((text.size + 2) // 3)\nself.new(Segment::Mode::Numeric, text.size, text, bit_size)\n"}}],"constructors":[{"html_id":"new(mode:Mode,text:String)-class-method","name":"new","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"Mode"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(mode : Mode, text : String)","args_html":"(mode : <a href=\"../Goban/Segment/Mode.html\">Mode</a>, text : String)","location":{"filename":"src/goban/segment.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"mode","external_name":"mode","restriction":"Mode"},{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"case mode\nwhen .numeric?\n  self.numeric(text)\nwhen .alphanumeric?\n  self.alphanumeric(text)\nwhen .byte?\n  self.byte(text)\nwhen .kanji?\n  self.kanji(text)\nelse\n  raise(InputError.new(\"Unsupported mode\"))\nend"}}],"instance_methods":[{"html_id":"bit_size:Int32-instance-method","name":"bit_size","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":9,"url":null},"def":{"name":"bit_size","return_type":"Int32","visibility":"Public","body":"@bit_size"}},{"html_id":"char_count:Int32-instance-method","name":"char_count","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":7,"url":null},"def":{"name":"char_count","return_type":"Int32","visibility":"Public","body":"@char_count"}},{"html_id":"mode:Mode-instance-method","name":"mode","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":6,"url":null},"def":{"name":"mode","return_type":"Mode","visibility":"Public","body":"@mode"}},{"html_id":"text:String-instance-method","name":"text","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":8,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"}}],"types":[{"html_id":"goban/Goban/Segment/Mode","path":"Goban/Segment/Mode.html","kind":"enum","full_name":"Goban::Segment::Mode","name":"Mode","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/segment/mode.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"ECI","name":"ECI","value":"0_u8"},{"id":"Numeric","name":"Numeric","value":"1_u8"},{"id":"Alphanumeric","name":"Alphanumeric","value":"2_u8"},{"id":"Byte","name":"Byte","value":"3_u8"},{"id":"Kanji","name":"Kanji","value":"4_u8"},{"id":"StructuredAppend","name":"StructuredAppend","value":"5_u8"},{"id":"Undefined","name":"Undefined","value":"255_u8"}],"namespace":{"html_id":"goban/Goban/Segment","kind":"struct","full_name":"Goban::Segment","name":"Segment"},"doc":"Represents a encoding mode of a data segment.","summary":"<p>Represents a encoding mode of a data segment.</p>","instance_methods":[{"html_id":"alphanumeric?-instance-method","name":"alphanumeric?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":6,"url":null},"def":{"name":"alphanumeric?","visibility":"Public","body":"self == Alphanumeric"}},{"html_id":"byte?-instance-method","name":"byte?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":7,"url":null},"def":{"name":"byte?","visibility":"Public","body":"self == Byte"}},{"html_id":"eci?-instance-method","name":"eci?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":4,"url":null},"def":{"name":"eci?","visibility":"Public","body":"self == ECI"}},{"html_id":"kanji?-instance-method","name":"kanji?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":8,"url":null},"def":{"name":"kanji?","visibility":"Public","body":"self == Kanji"}},{"html_id":"numeric?-instance-method","name":"numeric?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":5,"url":null},"def":{"name":"numeric?","visibility":"Public","body":"self == Numeric"}},{"html_id":"structured_append?-instance-method","name":"structured_append?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":9,"url":null},"def":{"name":"structured_append?","visibility":"Public","body":"self == StructuredAppend"}},{"html_id":"undefined?-instance-method","name":"undefined?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":10,"url":null},"def":{"name":"undefined?","visibility":"Public","body":"self == Undefined"}}]},{"html_id":"goban/Goban/Segment/Segmenter","path":"Goban/Segment/Segmenter.html","kind":"module","full_name":"Goban::Segment::Segmenter","name":"Segmenter","abstract":false,"locations":[{"filename":"src/goban/segment/segmenter.cr","line_number":4,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/Segment/Segmenter","kind":"module","full_name":"Goban::Segment::Segmenter","name":"Segmenter"}],"namespace":{"html_id":"goban/Goban/Segment","kind":"struct","full_name":"Goban::Segment","name":"Segment"},"doc":"Module for building segmentations of the different encoding modes\nfor the given text string.","summary":"<p>Module for building segmentations of the different encoding modes for the given text string.</p>"}]},{"html_id":"goban/Goban/SVGExporter","path":"Goban/SVGExporter.html","kind":"module","full_name":"Goban::SVGExporter","name":"SVGExporter","abstract":false,"locations":[{"filename":"src/goban/exporters/svg.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/SVGExporter","kind":"module","full_name":"Goban::SVGExporter","name":"SVGExporter"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"instance_methods":[{"html_id":"export(qr:AbstractQR,path:String)-instance-method","name":"export","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(qr : AbstractQR, path : String)","args_html":"(qr : <a href=\"../Goban/AbstractQR.html\">AbstractQR</a>, path : String)","location":{"filename":"src/goban/exporters/svg.cr","line_number":5,"url":null},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"case qr\nwhen MQR, RMQR\n  blank_mods = 2\nelse\n  blank_mods = 4\nend\nstring = svg_string(qr, blank_mods)\nFile.write(path, string)\n"}},{"html_id":"svg_string(qr:AbstractQR,blank_mods:Int)-instance-method","name":"svg_string","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"args_string":"(qr : AbstractQR, blank_mods : Int)","args_html":"(qr : <a href=\"../Goban/AbstractQR.html\">AbstractQR</a>, blank_mods : Int)","location":{"filename":"src/goban/exporters/svg.cr","line_number":17,"url":null},"def":{"name":"svg_string","args":[{"name":"qr","external_name":"qr","restriction":"AbstractQR"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"visibility":"Public","body":"parts = [] of String\nqr.canvas.each_row do |row, y|\n  row.each_with_index do |mod, x|\n    if mod == 1\n    else\n      next\n    end\n    parts.push(\"M#{x + blank_mods},#{y + blank_mods}h1v1h-1z\")\n  end\nend\ncase qr\nwhen RMQR\n  width = qr.size.width\n  height = qr.size.height\nelse\n  width = qr.size\n  height = width\nend\nreturn \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 #{width + (blank_mods * 2)} #{height + (blank_mods * 2)}\\\" stroke=\\\"none\\\"><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#fff\\\"/><path d=\\\"#{parts.join(' ')}\\\" fill=\\\"#000\\\"/></svg>\"\n"}}]}]}]}}