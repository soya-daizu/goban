{"repository_name":"goban","body":"# Goban\n\nA fast QR Code generation library written purely in Crystal. It uses less heap allocations than other implementations in Crystal, and it is more feature-complete with support for Kanji mode encoding.\n\nThe name comes from the board game [Go](https://en.wikipedia.org/wiki/Go_(game)), which have inspired the QR Code inventor to come up with a fast and accurate matrix barcode to read. Goban is the Japanese name of the board used to play Go.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     goban:\n       github: soya-daizu/goban\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"goban\"\n\nqr = Goban::QRCode.encode_string(\"Hello World!\", Goban::QRCode::ECLevel::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████                    \n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██  \n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████        \n#    ██          ██    ██████████  ██  ████    \n#    ██  ██████  ██    ██  ██          ██████  \n#    ██  ██████  ██  ██  ██  ██  ██    ██████  \n#    ██  ██████  ██  ██████  ██    ██    ██    \n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██    \n```\n\nTo generate a PNG image, add [stumpy_png](https://github.com/stumpycr/stumpy_png) as a dependency in your shard.yml, and `require \"goban/exporters/png\"` to use `PNGExporter`.\n\n```crystal\nqr = Goban::QRCode.encode_string(\"Hello World!\")\nputs \"Exporting with targeted size: 500\"\nsize = Goban::PNGExporter.export(qr, \"output.png\", 500)\nputs \"Actual QR code size: #{size}\"\n```\n\nSee [API docs](https://soya-daizu.github.io/goban/) for more details.\n\n## Contributing\n\n1. Fork it (<https://github.com/soya-daizu/goban/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [soya_daizu](https://github.com/soya-daizu) - creator and maintainer\n","program":{"html_id":"goban/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"goban","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"goban/Goban","path":"Goban.html","kind":"module","full_name":"Goban","name":"Goban","abstract":false,"locations":[{"filename":"src/goban.cr","line_number":3,"url":null},{"filename":"src/goban/bit_stream.cr","line_number":1,"url":null},{"filename":"src/goban/constants.cr","line_number":1,"url":null},{"filename":"src/goban/exporters/png.cr","line_number":3,"url":null},{"filename":"src/goban/qrcode.cr","line_number":3,"url":null},{"filename":"src/goban/rs_generator.cr","line_number":1,"url":null},{"filename":"src/goban/segment.cr","line_number":3,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALPHANUMERIC_CHARS","name":"ALPHANUMERIC_CHARS","value":"\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\""},{"id":"ECC_CODEWORDS_PER_BLOCK","name":"ECC_CODEWORDS_PER_BLOCK","value":"{ {-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, {-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28}, {-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, {-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30} }"},{"id":"ERROR_CORRECTION_BLOCKS","name":"ERROR_CORRECTION_BLOCKS","value":"{ {-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25}, {-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49}, {-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68}, {-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81} }"},{"id":"GF256_INVMAP","name":"GF256_INVMAP","value":"StaticArray(UInt8, 256).new(0)"},{"id":"GF256_MAP","name":"GF256_MAP","value":"StaticArray(UInt8, 256).new(1)"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"goban/Goban/BitStream","path":"Goban/BitStream.html","kind":"struct","full_name":"Goban::BitStream","name":"BitStream","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"goban/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"goban/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"goban/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/bit_stream.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PAD0","name":"PAD0","value":"236"},{"id":"PAD1","name":"PAD1","value":"17"}],"included_modules":[{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"constructors":[{"html_id":"new(size:Int)-class-method","name":"new","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int"}],"args_string":"(size : Int)","args_html":"(size : Int)","location":{"filename":"src/goban/bit_stream.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"append_bit_stream(bs:BitStream)-instance-method","name":"append_bit_stream","abstract":false,"args":[{"name":"bs","external_name":"bs","restriction":"BitStream"}],"args_string":"(bs : BitStream)","args_html":"(bs : <a href=\"../Goban/BitStream.html\">BitStream</a>)","location":{"filename":"src/goban/bit_stream.cr","line_number":24,"url":null},"def":{"name":"append_bit_stream","args":[{"name":"bs","external_name":"bs","restriction":"BitStream"}],"visibility":"Public","body":"bs.each do |bit|\n  push(bit)\nend"}},{"html_id":"append_bits(val:Int,len:Int)-instance-method","name":"append_bits","abstract":false,"args":[{"name":"val","external_name":"val","restriction":"Int"},{"name":"len","external_name":"len","restriction":"Int"}],"args_string":"(val : Int, len : Int)","args_html":"(val : Int, len : Int)","location":{"filename":"src/goban/bit_stream.cr","line_number":47,"url":null},"def":{"name":"append_bits","args":[{"name":"val","external_name":"val","restriction":"Int"},{"name":"len","external_name":"len","restriction":"Int"}],"visibility":"Public","body":"if ((0..31).includes?(len)) && ((val >> len) == 0)\nelse\n  raise(\"Value out of range\")\nend\n(0..(len - 1)).reverse_each do |i|\n  push(((val >> i).to_u8! & 1) != 0)\nend\n"}},{"html_id":"append_padding_bits-instance-method","name":"append_padding_bits","abstract":false,"location":{"filename":"src/goban/bit_stream.cr","line_number":36,"url":null},"def":{"name":"append_padding_bits","visibility":"Public","body":"while (@tail_idx % 8) != 0\n  push(false)\nend\nwhile @tail_idx < @size\n  append_bits(PAD0, 8)\n  if @tail_idx < @size\n    append_bits(PAD1, 8)\n  end\nend\n"}},{"html_id":"append_segment_bits(segment:Segment,version:QRCode::Version)-instance-method","name":"append_segment_bits","abstract":false,"args":[{"name":"segment","external_name":"segment","restriction":"Segment"},{"name":"version","external_name":"version","restriction":"QRCode::Version"}],"args_string":"(segment : Segment, version : QRCode::Version)","args_html":"(segment : <a href=\"../Goban/Segment.html\">Segment</a>, version : <a href=\"../Goban/QRCode/Version.html\">QRCode::Version</a>)","location":{"filename":"src/goban/bit_stream.cr","line_number":18,"url":null},"def":{"name":"append_segment_bits","args":[{"name":"segment","external_name":"segment","restriction":"Segment"},{"name":"version","external_name":"version","restriction":"QRCode::Version"}],"visibility":"Public","body":"append_bits(segment.mode.to_i, 4)\nappend_bits(segment.char_count, segment.mode.cci_bits_size(version))\nappend_bit_stream(segment.bit_stream)\n"}},{"html_id":"append_terminator_bits(version:QRCode::Version,ecl:QRCode::ECLevel)-instance-method","name":"append_terminator_bits","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"QRCode::Version"},{"name":"ecl","external_name":"ecl","restriction":"QRCode::ECLevel"}],"args_string":"(version : QRCode::Version, ecl : QRCode::ECLevel)","args_html":"(version : <a href=\"../Goban/QRCode/Version.html\">QRCode::Version</a>, ecl : <a href=\"../Goban/QRCode/ECLevel.html\">QRCode::ECLevel</a>)","location":{"filename":"src/goban/bit_stream.cr","line_number":30,"url":null},"def":{"name":"append_terminator_bits","args":[{"name":"version","external_name":"version","restriction":"QRCode::Version"},{"name":"ecl","external_name":"ecl","restriction":"QRCode::ECLevel"}],"visibility":"Public","body":"cap_bits = (version.max_data_codewords(ecl)) * 8\nterminator_bits_size = Math.min(4, cap_bits - @tail_idx)\nappend_bits(0, terminator_bits_size)\n"}},{"html_id":"bits:Pointer(UInt8)-instance-method","name":"bits","abstract":false,"location":{"filename":"src/goban/bit_stream.cr","line_number":5,"url":null},"def":{"name":"bits","return_type":"Pointer(UInt8)","visibility":"Public","body":"@bits"}},{"html_id":"push(value:Bool)-instance-method","name":"push","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/goban/bit_stream.cr","line_number":81,"url":null},"def":{"name":"push","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"bit_idx, sub_idx = bit_idx_and_sub_idx(@tail_idx)\nif value\n  __temp_45 = bit_idx\n  @bits[__temp_45] = @bits[__temp_45] | (1 << sub_idx)\nelse\n  __temp_47 = bit_idx\n  @bits[__temp_47] = @bits[__temp_47] & (~(1 << sub_idx))\nend\n@tail_idx = @tail_idx + 1\nvalue\n"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/goban/bit_stream.cr","line_number":6,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"tail_idx:Int32-instance-method","name":"tail_idx","abstract":false,"location":{"filename":"src/goban/bit_stream.cr","line_number":7,"url":null},"def":{"name":"tail_idx","visibility":"Public","body":"@tail_idx"}},{"html_id":"to_bytes-instance-method","name":"to_bytes","abstract":false,"location":{"filename":"src/goban/bit_stream.cr","line_number":54,"url":null},"def":{"name":"to_bytes","visibility":"Public","body":"results = Slice(UInt8).new(malloc_size)\nbyte_value = 0_u8\neach_with_index do |bit, idx|\n  bit = bit ? 1 : 0\n  byte_value = (byte_value << 1) | bit\n  if (idx % 8) == 7\n    results[idx // 8] = byte_value\n  end\nend\nif (@size % 8) != 0\n  results[@size // 8] = byte_value << (8 - (@size % 8))\nend\nresults\n"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/goban/bit_stream.cr","line_number":93,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"(io << \"Goban::BitStream(@tail_idx=\") << @tail_idx\nio << \", @bits=[\"\nidx = 0\neach_slice(4) do |bits|\n  if idx == 0\n  else\n    io << ' '\n  end\n  bits.each do |bit|\n    if idx == @tail_idx\n      io << '\\''\n    end\n    io << (bit ? '1' : '0')\n    idx = idx + 1\n  end\nend\nio << \"])\"\n"}},{"html_id":"unsafe_fetch(index:Int):Bool-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Bool","args_html":"(index : Int) : Bool","location":{"filename":"src/goban/bit_stream.cr","line_number":67,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Bool","visibility":"Public","body":"bit_idx, sub_idx = index.divmod(8)\n(@bits[bit_idx] & (1 << sub_idx)) > 0\n"}},{"html_id":"unsafe_put(index:Int,value:Bool)-instance-method","name":"unsafe_put","doc":"Sets the element at the given *index* to *value*, without doing any bounds\ncheck.\n\n`Indexable::Mutable` makes sure to invoke this method with *index* in\n`0...size`, so converting negative indices to positive ones is not needed\nhere.\n\nClients never invoke this method directly. Instead, they modify elements\nwith `#[]=(index, value)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Sets the element at the given <em>index</em> to <em>value</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(index : Int, value : Bool)","args_html":"(index : Int, value : Bool)","location":{"filename":"src/goban/bit_stream.cr","line_number":72,"url":null},"def":{"name":"unsafe_put","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"bit_idx, sub_idx = index.divmod(8)\nif value\n  __temp_41 = bit_idx\n  @bits[__temp_41] = @bits[__temp_41] | (1 << sub_idx)\nelse\n  __temp_43 = bit_idx\n  @bits[__temp_43] = @bits[__temp_43] & (~(1 << sub_idx))\nend\n"}}]},{"html_id":"goban/Goban/PNGExporter","path":"Goban/PNGExporter.html","kind":"module","full_name":"Goban::PNGExporter","name":"PNGExporter","abstract":false,"ancestors":[{"html_id":"goban/StumpyPNG","kind":"module","full_name":"StumpyPNG","name":"StumpyPNG"},{"html_id":"goban/StumpyCore","kind":"module","full_name":"StumpyCore","name":"StumpyCore"}],"locations":[{"filename":"src/goban/exporters/png.cr","line_number":5,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/StumpyPNG","kind":"module","full_name":"StumpyPNG","name":"StumpyPNG"}],"extended_modules":[{"html_id":"goban/Goban/PNGExporter","kind":"module","full_name":"Goban::PNGExporter","name":"PNGExporter"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Helper module to generate PNG image for the QR Code object. Requires `stumpy_png` as a dependency.","summary":"<p>Helper module to generate PNG image for the QR Code object.</p>","instance_methods":[{"html_id":"export(qr:QRCode,path:String,mod_size:Int,blank_mods:Int)-instance-method","name":"export","doc":"Generates a PNG image with the given module size and blank modules, and exportes to the\ngiven path.\n\n`mod_size` refers to the number of pixels used for each module in the QR Code symbol,\nand `blank_mods` is the size of the white border around the symbol.","summary":"<p>Generates a PNG image with the given module size and blank modules, and exportes to the given path.</p>","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"QRCode"},{"name":"path","external_name":"path","restriction":"String"},{"name":"mod_size","external_name":"mod_size","restriction":"Int"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"args_string":"(qr : QRCode, path : String, mod_size : Int, blank_mods : Int)","args_html":"(qr : <a href=\"../Goban/QRCode.html\">QRCode</a>, path : String, mod_size : Int, blank_mods : Int)","location":{"filename":"src/goban/exporters/png.cr","line_number":22,"url":null},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"QRCode"},{"name":"path","external_name":"path","restriction":"String"},{"name":"mod_size","external_name":"mod_size","restriction":"Int"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"visibility":"Public","body":"blank_size = blank_mods * mod_size\nsize = (qr.size * mod_size) + (blank_size * 2)\ndark_color = RGBA.from_rgb_n(0, 0, 0, 8)\nlight_color = RGBA.from_rgb_n(255, 255, 255, 8)\ncanvas = Canvas.new(size, size, light_color)\nqr.size.times do |x|\n  qr.size.times do |y|\n    if qr.canvas.get_module(x, y)\n    else\n      next\n    end\n    canvas_x = (mod_size * x) + blank_size\n    canvas_y = (mod_size * y) + blank_size\n    mod_size.times do |i|\n      mod_size.times do |j|\n        canvas[canvas_x + i, canvas_y + j] = dark_color\n      end\n    end\n  end\nend\nStumpyPNG.write(canvas, path)\nsize\n"}},{"html_id":"export(qr:QRCode,path:String,target_size:Int)-instance-method","name":"export","doc":"Generates a PNG image with the given target size and exports to the given path.\nNote that the size of the resulting image may not be equal to the target size specified.","summary":"<p>Generates a PNG image with the given target size and exports to the given path.</p>","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"QRCode"},{"name":"path","external_name":"path","restriction":"String"},{"name":"target_size","external_name":"target_size","restriction":"Int"}],"args_string":"(qr : QRCode, path : String, target_size : Int)","args_html":"(qr : <a href=\"../Goban/QRCode.html\">QRCode</a>, path : String, target_size : Int)","location":{"filename":"src/goban/exporters/png.cr","line_number":11,"url":null},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"QRCode"},{"name":"path","external_name":"path","restriction":"String"},{"name":"target_size","external_name":"target_size","restriction":"Int"}],"visibility":"Public","body":"size = qr.size + (4 * 2)\nratio = target_size / size\nself.export(qr, path, ratio.round.to_i, 4)\n"}}]},{"html_id":"goban/Goban/QRCode","path":"Goban/QRCode.html","kind":"struct","full_name":"Goban::QRCode","name":"QRCode","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qrcode.cr","line_number":5,"url":null},{"filename":"src/goban/qrcode/canvas.cr","line_number":1,"url":null},{"filename":"src/goban/qrcode/ec_level.cr","line_number":1,"url":null},{"filename":"src/goban/qrcode/mask.cr","line_number":1,"url":null},{"filename":"src/goban/qrcode/version.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Object that represents an encoded QR Code symbol.","summary":"<p>Object that represents an encoded QR Code symbol.</p>","class_methods":[{"html_id":"encode_segments(segments:Array(Segment),ecl:ECLevel,version:Version)-class-method","name":"encode_segments","doc":"Creates a new QR Code object for the given data segments, error correction level, and QR Code\nversion that is large enough to contain all the data in the segments.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nsegments = [\n  Goban::Segment.alphanumeric(\"HELLO WORLD\"),\n  Goban::Segment.bytes(\"!\")\n]\nqr = Goban::QRCode.encode_segments(segments, Goban::QRCode::ECLevel::Low, Goban::QRCode::Version.new(1))\nqr.print_to_console\n# => ██████████████    ██  ████  ██████████████\n#    ██          ██    ██████    ██          ██\n#    ██  ██████  ██  ████  ████  ██  ██████  ██\n#    ██  ██████  ██    ██  ██    ██  ██████  ██\n#    ██  ██████  ██      ██  ██  ██  ██████  ██\n#    ██          ██          ██  ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                    ████  ████                \n#    ██████  ████████████████  ████      ██    \n#        ██    ██                    ██      ██\n#      ████  ██  ████████    ██████  ████      \n#      ██  ██  ██  ████████    ██  ██  ██████  \n#        ██  ██████  ██      ██  ██████  ██  ██\n#                    ██  ████  ██        ██  ██\n#    ██████████████  ████████    ████  ████    \n#    ██          ██  ████  ████    ██  ██      \n#    ██  ██████  ██  ████████    ██████████████\n#    ██  ██████  ██        ██  ██████      ██  \n#    ██  ██████  ██  ██      ██  ████  ██    ██\n#    ██          ██  ████████          ██  ████\n#    ██████████████  ██      ██  ████        ██\n```\n\nWhen constructing your own segments, note that it may not result in the segments that has the\nshortest data length even if for each character in the source string you choose an encoding type\nwith the smallest character set that supports that supports it.","summary":"<p>Creates a new QR Code object for the given data segments, error correction level, and QR Code version that is large enough to contain all the data in the segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECLevel"},{"name":"version","external_name":"version","restriction":"Version"}],"args_string":"(segments : Array(Segment), ecl : ECLevel, version : Version)","args_html":"(segments : Array(<a href=\"../Goban/Segment.html\">Segment</a>), ecl : <a href=\"../Goban/QRCode/ECLevel.html\">ECLevel</a>, version : <a href=\"../Goban/QRCode/Version.html\">Version</a>)","location":{"filename":"src/goban/qrcode.cr","line_number":128,"url":null},"def":{"name":"encode_segments","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECLevel"},{"name":"version","external_name":"version","restriction":"Version"}],"visibility":"Public","body":"bit_stream = BitStream.new((version.max_data_codewords(ecl)) * 8)\nsegments.each do |segment|\n  bit_stream.append_segment_bits(segment, version)\nend\nbit_stream.append_terminator_bits(version, ecl)\nbit_stream.append_padding_bits\ndata_codewords = RSGenerator.add_ec_codewords(bit_stream.to_bytes, version, ecl)\ncanvas = Canvas.new(version, ecl)\ncanvas.draw_function_patterns\ncanvas.draw_data_codewords(data_codewords)\ncanvas.apply_best_mask\nself.new(version, ecl, canvas)\n"}},{"html_id":"encode_string(text:String,ecl:ECLevel=ECLevel::Medium)-class-method","name":"encode_string","doc":"Creates a new QR Code object for the given string and error correction level.\nSetting a higher error correction level makes the QR Code symbol mode resistant\nto loss of pixels, but it requires more redundant bits, resulting in a larger\nsymbol size.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nqr = Goban::QRCode.encode_string(\"Hello World!\", Goban::QRCode::ECLevel::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████                    \n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██  \n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████        \n#    ██          ██    ██████████  ██  ████    \n#    ██  ██████  ██    ██  ██          ██████  \n#    ██  ██████  ██  ██  ██  ██  ██    ██████  \n#    ██  ██████  ██  ██████  ██    ██    ██    \n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██    \n```\n\nQR code data under the hood is encoded in one or more encoding types, such as Numeric,\nAlphanumeric, Byte, and Kanji. Each encoding type has a different set of characters\nsupported. While Byte mode can express arbitrary types of data (usually interpreted as UTF-8\ntext, thus it can express any Unicode characters), it often uses more bits to represent a single\ncodepoint compared to other encoding types which have a limited set of characters supported,\nresulting in larger data size and a more challenging QR code to scan.\n\nThis string encoding uses an algorithm to figure out the best segmentation of the encoding\ntypes for the given string to make the resulting data size as small as possible. Here are the\nexamples:\n\n```\n# These examples are the optimal segmentations when the ECLevel is Medium.\n# Note that the Segment object shown in these examples are not the actual Segment object used\n# in the Goban's codebase but they are just pseudo objects.\n\n\"0123456789\" # => [Segment(\"0123456789\", mode: Numeric)]\n\"ABCDEF\" # => [Segment(\"ABCDEF\", mode: Alphanumeric)]\n\"012345A\" # => [Segment(\"012345A\", mode: Alphanumeric)]\n\"0123456A\" # => [Segment(\"0123456\", mode: Numeric), Segment(\"A\", mode: Alphanumeric)]\n\"こんにちwa、世界！ 123\"\n# => [\n#   Segment(\"こんにち\", mode: Kanji),\n#   Segment(\"wa\", mode: Byte),\n#   Segment(\"、世界！\", mode: Kanji),\n#   Segment(\" 123\", mode: Alphanumeric)\n# ]\n```\n\nIf the type of characters used in your data strings is always the same, you may want to consider\nbuilding data segments by yourself so that Goban doesn't have to do extra processing to figure\nit out every single time. See `#encode_segments` for how to create QR codes by manually creating\nencoding segments.","summary":"<p>Creates a new QR Code object for the given string and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECLevel::Medium","external_name":"ecl","restriction":"ECLevel"}],"args_string":"(text : String, ecl : ECLevel = ECLevel::Medium)","args_html":"(text : String, ecl : <a href=\"../Goban/QRCode/ECLevel.html\">ECLevel</a> = <span class=\"t\">ECLevel</span><span class=\"t\">::</span><span class=\"t\">Medium</span>)","location":{"filename":"src/goban/qrcode.cr","line_number":86,"url":null},"def":{"name":"encode_string","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECLevel::Medium","external_name":"ecl","restriction":"ECLevel"}],"visibility":"Public","body":"segments, version = Segment::Optimizer.make_optimized_segments(text, ecl)\nself.encode_segments(segments, ecl, version)\n"}}],"constructors":[{"html_id":"new(version:Goban::QRCode::Version,ecl:Goban::QRCode::ECLevel,canvas:Goban::QRCode::Canvas)-class-method","name":"new","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"::Goban::QRCode::Version"},{"name":"ecl","external_name":"ecl","restriction":"::Goban::QRCode::ECLevel"},{"name":"canvas","external_name":"canvas","restriction":"::Goban::QRCode::Canvas"}],"args_string":"(version : Goban::QRCode::Version, ecl : Goban::QRCode::ECLevel, canvas : Goban::QRCode::Canvas)","args_html":"(version : <a href=\"../Goban/QRCode/Version.html\">Goban::QRCode::Version</a>, ecl : <a href=\"../Goban/QRCode/ECLevel.html\">Goban::QRCode::ECLevel</a>, canvas : <a href=\"../Goban/QRCode/Canvas.html\">Goban::QRCode::Canvas</a>)","location":{"filename":"src/goban/qrcode.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":"::Goban::QRCode::Version"},{"name":"ecl","external_name":"ecl","restriction":"::Goban::QRCode::ECLevel"},{"name":"canvas","external_name":"canvas","restriction":"::Goban::QRCode::Canvas"}],"visibility":"Public","body":"_ = allocate\n_.initialize(version, ecl, canvas)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"canvas:Canvas-instance-method","name":"canvas","doc":"Returns the canvas of the QR Code symbol. Canvas contains information about\neach single module (pixel) in the symbol.","summary":"<p>Returns the canvas of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qrcode.cr","line_number":13,"url":null},"def":{"name":"canvas","return_type":"Canvas","visibility":"Public","body":"@canvas"}},{"html_id":"ecl:ECLevel-instance-method","name":"ecl","doc":"Error correction level of the QR Code symbol.","summary":"<p>Error correction level of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qrcode.cr","line_number":10,"url":null},"def":{"name":"ecl","return_type":"ECLevel","visibility":"Public","body":"@ecl"}},{"html_id":"print_to_console-instance-method","name":"print_to_console","doc":"Prints the QR Code symbol as a text in the console. To generate the actual image file,\nuse `PNGExporter` or write your own exporter by reading each modules in `#canvas`.","summary":"<p>Prints the QR Code symbol as a text in the console.</p>","abstract":false,"location":{"filename":"src/goban/qrcode.cr","line_number":148,"url":null},"def":{"name":"print_to_console","visibility":"Public","body":"@size.times do |y|\n  @size.times do |x|\n    print(@canvas.get_module(x, y) ? \"██\" : \"  \")\n  end\n  print('\\n')\nend\nprint('\\n')\n"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Length of a side in the symbol.","summary":"<p>Length of a side in the symbol.</p>","abstract":false,"location":{"filename":"src/goban/qrcode.cr","line_number":15,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"version:Version-instance-method","name":"version","doc":"Version of the QR Code symbol. Version in QR Code does not refer to its revision,\nbut simply indicates the size format of the QR code symbol.","summary":"<p>Version of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qrcode.cr","line_number":8,"url":null},"def":{"name":"version","return_type":"Version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/QRCode/Canvas","path":"Goban/QRCode/Canvas.html","kind":"struct","full_name":"Goban::QRCode::Canvas","name":"Canvas","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qrcode/canvas.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/QRCode","kind":"struct","full_name":"Goban::QRCode","name":"QRCode"},"constructors":[{"html_id":"new(version:Version,ecl:ECLevel)-class-method","name":"new","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"Version"},{"name":"ecl","external_name":"ecl","restriction":"ECLevel"}],"args_string":"(version : Version, ecl : ECLevel)","args_html":"(version : <a href=\"../../Goban/QRCode/Version.html\">Version</a>, ecl : <a href=\"../../Goban/QRCode/ECLevel.html\">ECLevel</a>)","location":{"filename":"src/goban/qrcode/canvas.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":"Version"},{"name":"ecl","external_name":"ecl","restriction":"ECLevel"}],"visibility":"Public","body":"_ = allocate\n_.initialize(version, ecl)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"apply_best_mask-instance-method","name":"apply_best_mask","abstract":false,"location":{"filename":"src/goban/qrcode/canvas.cr","line_number":193,"url":null},"def":{"name":"apply_best_mask","visibility":"Public","body":"mask = nil\nmin_score = Int32::MAX\n8_u8.times do |i|\n  msk = Mask.new(i)\n  draw_format_modules(msk)\n  msk.apply_to(self)\n  score = Mask.evaluate_score(self)\n  if score < min_score\n    mask = msk\n    min_score = score\n  end\n  msk.apply_to(self)\nend\nif mask\nelse\n  raise(\"Unable to set the mask\")\nend\ndraw_format_modules(mask)\nmask.apply_to(self)\n"}},{"html_id":"draw_data_codewords(data_codewords:Array(UInt8))-instance-method","name":"draw_data_codewords","abstract":false,"args":[{"name":"data_codewords","external_name":"data_codewords","restriction":"Array(UInt8)"}],"args_string":"(data_codewords : Array(UInt8))","args_html":"(data_codewords : Array(UInt8))","location":{"filename":"src/goban/qrcode/canvas.cr","line_number":53,"url":null},"def":{"name":"draw_data_codewords","args":[{"name":"data_codewords","external_name":"data_codewords","restriction":"Array(UInt8)"}],"visibility":"Public","body":"data_length = data_codewords.size * 8\ni = 0\nupward = true\nbase_x = @size - 1\nwhile base_x > 0\n  if base_x == 6\n    base_x = 5\n  end\n  (0...@size).reverse_each do |base_y|\n    (0..1).each do |alt|\n      x = base_x - alt\n      y = upward ? base_y : (@size - 1) - base_y\n      if (is_module_reserved?(x, y)) || i >= data_length\n        next\n      end\n      set_module(x, y, (data_codewords[i >> 3].bit((7 - i) & 7)) == 1)\n      i = i + 1\n    end\n  end\n  upward = !upward\n  base_x = base_x - 2\nend\n"}},{"html_id":"draw_function_patterns-instance-method","name":"draw_function_patterns","abstract":false,"location":{"filename":"src/goban/qrcode/canvas.cr","line_number":12,"url":null},"def":{"name":"draw_function_patterns","visibility":"Public","body":"draw_finder_pattern(0, 0)\ndraw_finder_pattern(@size - 7, 0)\ndraw_finder_pattern(0, @size - 7)\nreserve_modules(0, 0, 9, 9)\nreserve_modules(@size - 8, 0, 8, 9)\nreserve_modules(0, @size - 8, 9, 8)\nali_pat_pos = alignment_pattern_positions\nali_pat_count = ali_pat_pos.size\nali_pat_count.times do |i|\n  ali_pat_count.times do |j|\n    if (((i == 0) && (j == 0)) || ((i == 0) && (j == (ali_pat_count - 1)))) || ((i == (ali_pat_count - 1)) && (j == 0))\n      next\n    end\n    x, y = ali_pat_pos[i], ali_pat_pos[j]\n    draw_alignment_pattern(x, y)\n    reserve_modules(x - 2, y - 2, 5, 5)\n  end\nend\ntim_pat_mods_count = @version.timing_pattern_mods_count\n(8...(8 + tim_pat_mods_count)).each do |i|\n  if i.even?\n  else\n    next\n  end\n  set_module(i, 6)\n  set_module(6, i)\nend\nreserve_modules(8, 6, tim_pat_mods_count, 1)\nreserve_modules(6, 8, 1, tim_pat_mods_count)\nif draw_version_modules\n  reserve_modules(@size - 11, 0, 3, 6)\n  reserve_modules(0, @size - 11, 6, 3)\nend\n"}},{"html_id":"get_module(x:Int,y:Int)-instance-method","name":"get_module","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/goban/qrcode/canvas.cr","line_number":173,"url":null},"def":{"name":"get_module","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"@modules.unsafe_fetch((y * @size) + x)"}},{"html_id":"is_module_reserved?(x:Int,y:Int)-instance-method","name":"is_module_reserved?","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/goban/qrcode/canvas.cr","line_number":186,"url":null},"def":{"name":"is_module_reserved?","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"@reserved_modules.unsafe_fetch((y * @size) + x)"}},{"html_id":"modules:Array(Bool)-instance-method","name":"modules","abstract":false,"location":{"filename":"src/goban/qrcode/canvas.cr","line_number":3,"url":null},"def":{"name":"modules","return_type":"Array(Bool)","visibility":"Public","body":"@modules"}},{"html_id":"print_to_console-instance-method","name":"print_to_console","abstract":false,"location":{"filename":"src/goban/qrcode/canvas.cr","line_number":216,"url":null},"def":{"name":"print_to_console","visibility":"Public","body":"border = 4\n@size.times do |y|\n  @size.times do |x|\n    print(get_module(x, y) ? \"██\" : \"  \")\n  end\n  print('\\n')\nend\nprint('\\n')\n"}},{"html_id":"size:Int32-instance-method","name":"size","abstract":false,"location":{"filename":"src/goban/qrcode/canvas.cr","line_number":4,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}}]},{"html_id":"goban/Goban/QRCode/ECLevel","path":"Goban/QRCode/ECLevel.html","kind":"enum","full_name":"Goban::QRCode::ECLevel","name":"ECLevel","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qrcode/ec_level.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Low","name":"Low","value":"0_u8"},{"id":"Medium","name":"Medium","value":"1_u8"},{"id":"Quartile","name":"Quartile","value":"2_u8"},{"id":"High","name":"High","value":"3_u8"}],"namespace":{"html_id":"goban/Goban/QRCode","kind":"struct","full_name":"Goban::QRCode","name":"QRCode"},"instance_methods":[{"html_id":"format_bits-instance-method","name":"format_bits","abstract":false,"location":{"filename":"src/goban/qrcode/ec_level.cr","line_number":8,"url":null},"def":{"name":"format_bits","visibility":"Public","body":"case self\nwhen Low\n  1_u8\nwhen Medium\n  0_u8\nwhen Quartile\n  3_u8\nwhen High\n  2_u8\nelse\n  raise(\"Invalid EC level\")\nend"}},{"html_id":"high?-instance-method","name":"high?","abstract":false,"location":{"filename":"src/goban/qrcode/ec_level.cr","line_number":6,"url":null},"def":{"name":"high?","visibility":"Public","body":"self == High"}},{"html_id":"low?-instance-method","name":"low?","abstract":false,"location":{"filename":"src/goban/qrcode/ec_level.cr","line_number":3,"url":null},"def":{"name":"low?","visibility":"Public","body":"self == Low"}},{"html_id":"medium?-instance-method","name":"medium?","abstract":false,"location":{"filename":"src/goban/qrcode/ec_level.cr","line_number":4,"url":null},"def":{"name":"medium?","visibility":"Public","body":"self == Medium"}},{"html_id":"quartile?-instance-method","name":"quartile?","abstract":false,"location":{"filename":"src/goban/qrcode/ec_level.cr","line_number":5,"url":null},"def":{"name":"quartile?","visibility":"Public","body":"self == Quartile"}}]},{"html_id":"goban/Goban/QRCode/Mask","path":"Goban/QRCode/Mask.html","kind":"struct","full_name":"Goban::QRCode::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qrcode/mask.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/QRCode","kind":"struct","full_name":"Goban::QRCode","name":"QRCode"},"class_methods":[{"html_id":"evaluate_score(canvas:Canvas)-class-method","name":"evaluate_score","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas"}],"args_string":"(canvas : Canvas)","args_html":"(canvas : <a href=\"../../Goban/QRCode/Canvas.html\">Canvas</a>)","location":{"filename":"src/goban/qrcode/mask.cr","line_number":31,"url":null},"def":{"name":"evaluate_score","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas"}],"visibility":"Public","body":"s1_a = self.compute_adjacent_score(canvas, true)\ns1_b = self.compute_adjacent_score(canvas, false)\ns2 = self.compute_block_score(canvas)\ns3_a = self.compute_finder_score(canvas, true)\ns3_b = self.compute_finder_score(canvas, false)\ns4 = self.compute_balance_score(canvas)\n((((s1_a + s1_b) + s2) + s3_a) + s3_b) + s4\n"}}],"constructors":[{"html_id":"new(value:UInt8)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"::UInt8"}],"args_string":"(value : UInt8)","args_html":"(value : UInt8)","location":{"filename":"src/goban/qrcode/mask.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"::UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"apply_to(canvas:Canvas)-instance-method","name":"apply_to","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas"}],"args_string":"(canvas : Canvas)","args_html":"(canvas : <a href=\"../../Goban/QRCode/Canvas.html\">Canvas</a>)","location":{"filename":"src/goban/qrcode/mask.cr","line_number":9,"url":null},"def":{"name":"apply_to","args":[{"name":"canvas","external_name":"canvas","restriction":"Canvas"}],"visibility":"Public","body":"canvas.size.times do |y|\n  canvas.size.times do |x|\n    if canvas.is_module_reserved?(x, y)\n      next\n    end\n    invert = case @value\n    when 0\n      ((x + y) % 2) == 0\n    when 1\n      (y % 2) == 0\n    when 2\n      (x % 3) == 0\n    when 3\n      ((x + y) % 3) == 0\n    when 4\n      (((x // 3) + (y // 2)) % 2) == 0\n    when 5\n      (((x * y) % 2) + ((x * y) % 3)) == 0\n    when 6\n      ((((x * y) % 2) + ((x * y) % 3)) % 2) == 0\n    when 7\n      ((((x + y) % 2) + ((x * y) % 3)) % 2) == 0\n    else\n      raise(\"Invalid mask number\")\n    end\n    value = (canvas.get_module(x, y)) ^ invert\n    canvas.set_module(x, y, value)\n  end\nend"}},{"html_id":"value:UInt8-instance-method","name":"value","abstract":false,"location":{"filename":"src/goban/qrcode/mask.cr","line_number":3,"url":null},"def":{"name":"value","return_type":"UInt8","visibility":"Public","body":"@value"}}]},{"html_id":"goban/Goban/QRCode/Version","path":"Goban/QRCode/Version.html","kind":"struct","full_name":"Goban::QRCode::Version","name":"Version","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qrcode/version.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX","name":"MAX","value":"40_u8"},{"id":"MIN","name":"MIN","value":"1_u8"}],"included_modules":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"goban/Goban/QRCode","kind":"struct","full_name":"Goban::QRCode","name":"QRCode"},"constructors":[{"html_id":"new(value:UInt8)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"::UInt8"}],"args_string":"(value : UInt8)","args_html":"(value : UInt8)","location":{"filename":"src/goban/qrcode/version.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"::UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:Int)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","args_html":"(other : Int)","location":{"filename":"src/goban/qrcode/version.cr","line_number":14,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Int"}],"visibility":"Public","body":"@value <=> other"}},{"html_id":"max_data_codewords(ecl:ECLevel)-instance-method","name":"max_data_codewords","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECLevel"}],"args_string":"(ecl : ECLevel)","args_html":"(ecl : <a href=\"../../Goban/QRCode/ECLevel.html\">ECLevel</a>)","location":{"filename":"src/goban/qrcode/version.cr","line_number":46,"url":null},"def":{"name":"max_data_codewords","args":[{"name":"ecl","external_name":"ecl","restriction":"ECLevel"}],"visibility":"Public","body":"raw_max_data_codewords = raw_data_mods // 8\necc_codewords = ECC_CODEWORDS_PER_BLOCK[ecl.value][@value] * ERROR_CORRECTION_BLOCKS[ecl.value][@value]\nraw_max_data_codewords - ecc_codewords\n"}},{"html_id":"raw_data_mods-instance-method","name":"raw_data_mods","abstract":false,"location":{"filename":"src/goban/qrcode/version.cr","line_number":26,"url":null},"def":{"name":"raw_data_mods","visibility":"Public","body":"v = @value\ng = v // 7\ntiming_pattern_mod = timing_pattern_mods_count * 2\nif v == 1\n  align_pattern_mod = 0\nelse\n  n = g + 1\n  align_pattern_mod = 25 * (((n ** 2) + (2 * n)) - 2)\nend\noverlaps = g * 10\nfunc_pattern_mod = ((192 + timing_pattern_mod) + align_pattern_mod) - overlaps\nfvi_mod = v < 7 ? 31 : 67\n((symbol_size ** 2) - func_pattern_mod) - fvi_mod\n"}},{"html_id":"symbol_size-instance-method","name":"symbol_size","abstract":false,"location":{"filename":"src/goban/qrcode/version.cr","line_number":18,"url":null},"def":{"name":"symbol_size","visibility":"Public","body":"(4 * @value) + 17"}},{"html_id":"timing_pattern_mods_count-instance-method","name":"timing_pattern_mods_count","abstract":false,"location":{"filename":"src/goban/qrcode/version.cr","line_number":22,"url":null},"def":{"name":"timing_pattern_mods_count","visibility":"Public","body":"(4 * @value) + 1"}},{"html_id":"value:UInt8-instance-method","name":"value","abstract":false,"location":{"filename":"src/goban/qrcode/version.cr","line_number":8,"url":null},"def":{"name":"value","return_type":"UInt8","visibility":"Public","body":"@value"}}]}]},{"html_id":"goban/Goban/RSGenerator","path":"Goban/RSGenerator.html","kind":"module","full_name":"Goban::RSGenerator","name":"RSGenerator","abstract":false,"locations":[{"filename":"src/goban/rs_generator.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/RSGenerator","kind":"module","full_name":"Goban::RSGenerator","name":"RSGenerator"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"instance_methods":[{"html_id":"add_ec_codewords(codewords:Slice(UInt8),version:QRCode::Version,ecl:QRCode::ECLevel)-instance-method","name":"add_ec_codewords","abstract":false,"args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QRCode::Version"},{"name":"ecl","external_name":"ecl","restriction":"QRCode::ECLevel"}],"args_string":"(codewords : Slice(UInt8), version : QRCode::Version, ecl : QRCode::ECLevel)","args_html":"(codewords : Slice(UInt8), version : <a href=\"../Goban/QRCode/Version.html\">QRCode::Version</a>, ecl : <a href=\"../Goban/QRCode/ECLevel.html\">QRCode::ECLevel</a>)","location":{"filename":"src/goban/rs_generator.cr","line_number":5,"url":null},"def":{"name":"add_ec_codewords","args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QRCode::Version"},{"name":"ecl","external_name":"ecl","restriction":"QRCode::ECLevel"}],"visibility":"Public","body":"if codewords.size != (version.max_data_codewords(ecl))\n  raise(\"Codewords size mismatch\")\nend\nec_blocks_count = ERROR_CORRECTION_BLOCKS[ecl.value][version.value]\nblock_ecc_size = ECC_CODEWORDS_PER_BLOCK[ecl.value][version.value]\nraw_codewords = version.raw_data_mods // 8\nshort_blocks_count = ec_blocks_count - (raw_codewords % ec_blocks_count)\nshort_block_size = raw_codewords // ec_blocks_count\nblocks = Array(Array(UInt8)).new(ec_blocks_count)\ngen_poly = self.generator_polynomial(block_ecc_size)\nk = 0\nec_blocks_count.times do |i|\n  data_size = (short_block_size - block_ecc_size) + (i >= short_blocks_count ? 1 : 0)\n  data = codewords[k, data_size].to_a\n  k = k + data_size\n  ec_codewords = self.poly_modulo(data, gen_poly)\n  if i < short_blocks_count\n    data.push(0)\n  end\n  data.concat(ec_codewords)\n  blocks.push(data)\nend\nresult = Array(UInt8).new(raw_codewords)\n(short_block_size + 1).times do |i|\n  blocks.each_with_index do |block, j|\n    if (i != (short_block_size - block_ecc_size)) || j >= short_blocks_count\n      result.push(block[i])\n    end\n  end\nend\nresult\n"}}]},{"html_id":"goban/Goban/Segment","path":"Goban/Segment.html","kind":"struct","full_name":"Goban::Segment","name":"Segment","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/segment.cr","line_number":4,"url":null},{"filename":"src/goban/segment/mode.cr","line_number":1,"url":null},{"filename":"src/goban/segment/optimizer.cr","line_number":1,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"class_methods":[{"html_id":"alphanumeric(text:String)-class-method","name":"alphanumeric","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":41,"url":null},"def":{"name":"alphanumeric","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"chars = text.chars.map do |c|\n  (ALPHANUMERIC_CHARS.index(c)) || (raise(\"Alphanumeric data contains unencodable characters\"))\nend\nbit_stream = BitStream.new((chars.size * 5) + ((chars.size + 1) // 2))\nsegment = self.new(Segment::Mode::Alphanumeric, chars.size, bit_stream)\nchars.each_slice(2) do |slice|\n  if slice.size == 1\n    val = slice[0]\n    size = 6\n  else\n    val = (slice[0] * 45) + slice[1]\n    size = 11\n  end\n  bit_stream.append_bits(val, size)\nend\nsegment\n"}},{"html_id":"bytes(text:String)-class-method","name":"bytes","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":61,"url":null},"def":{"name":"bytes","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"bytes = text.bytes\nbit_stream = BitStream.new(bytes.size * 8)\nsegment = self.new(Segment::Mode::Byte, bytes.size, bit_stream)\nbytes.each do |byte|\n  bit_stream.append_bits(byte, 8)\nend\nsegment\n"}},{"html_id":"count_total_bits(segments:Array(Segment),version:QRCode::Version)-class-method","name":"count_total_bits","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"version","external_name":"version","restriction":"QRCode::Version"}],"args_string":"(segments : Array(Segment), version : QRCode::Version)","args_html":"(segments : Array(<a href=\"../Goban/Segment.html\">Segment</a>), version : <a href=\"../Goban/QRCode/Version.html\">QRCode::Version</a>)","location":{"filename":"src/goban/segment.cr","line_number":105,"url":null},"def":{"name":"count_total_bits","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"version","external_name":"version","restriction":"QRCode::Version"}],"visibility":"Public","body":"result = 0\nsegments.each do |segment|\n  cci_bits_size = segment.mode.cci_bits_size(version)\n  if segment.char_count >= (1 << cci_bits_size)\n    raise(\"Segment too long\")\n  end\n  result = result + ((4 + cci_bits_size) + segment.bit_stream.size)\nend\nresult\n"}},{"html_id":"kanji(text:String)-class-method","name":"kanji","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":72,"url":null},"def":{"name":"kanji","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"bytes = text.encode(\"SHIFT_JIS\")\nif (bytes.size % 2) == 0\nelse\n  raise(\"Kanji data contains unencodable characters\")\nend\nbit_stream = BitStream.new((bytes.size // 2) * 13)\nsegment = self.new(Segment::Mode::Kanji, text.size, bit_stream)\n(bytes.each_slice(2)).each do |byte_pair|\n  if (!((64..252).includes?(byte_pair[1]))) || (byte_pair[1] == 127)\n    raise(\"Kanji data contains unencodable characters\")\n  end\n  val = (byte_pair[0].to_u16 << 8) | byte_pair[1]\n  if (33088..40956).includes?(val)\n    val = val - 33088\n  else\n    if (57408..60351).includes?(val)\n      val = val - 49472\n    else\n      raise(\"Kanji data contains unencodable characters\")\n    end\n  end\n  val = ((val >> 8) * 192) + (val & 255)\n  bit_stream.append_bits(val, 13)\nend\nsegment\n"}},{"html_id":"numeric(text:String)-class-method","name":"numeric","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":27,"url":null},"def":{"name":"numeric","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"digits = text.chars\nif digits.all?(&.ascii_number?)\nelse\n  raise(\"Numeric data contains non-numeric characters\")\nend\nbit_stream = BitStream.new((digits.size * 3) + ((digits.size + 2) // 3))\nsegment = self.new(Segment::Mode::Numeric, digits.size, bit_stream)\ndigits.each_slice(3) do |slice|\n  val = slice.join.to_u32\n  bit_stream.append_bits(val, (slice.size * 3) + 1)\nend\nsegment\n"}}],"constructors":[{"html_id":"new(mode:Goban::Segment::Mode,char_count:Int32,bit_stream:Goban::BitStream)-class-method","name":"new","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"::Goban::Segment::Mode"},{"name":"char_count","external_name":"char_count","restriction":"::Int32"},{"name":"bit_stream","external_name":"bit_stream","restriction":"::Goban::BitStream"}],"args_string":"(mode : Goban::Segment::Mode, char_count : Int32, bit_stream : Goban::BitStream)","args_html":"(mode : <a href=\"../Goban/Segment/Mode.html\">Goban::Segment::Mode</a>, char_count : Int32, bit_stream : <a href=\"../Goban/BitStream.html\">Goban::BitStream</a>)","location":{"filename":"src/goban/segment.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"mode","external_name":"mode","restriction":"::Goban::Segment::Mode"},{"name":"char_count","external_name":"char_count","restriction":"::Int32"},{"name":"bit_stream","external_name":"bit_stream","restriction":"::Goban::BitStream"}],"visibility":"Public","body":"_ = allocate\n_.initialize(mode, char_count, bit_stream)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(mode:Mode,text:String)-class-method","name":"new","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"Mode"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(mode : Mode, text : String)","args_html":"(mode : <a href=\"../Goban/Segment/Mode.html\">Mode</a>, text : String)","location":{"filename":"src/goban/segment.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"mode","external_name":"mode","restriction":"Mode"},{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"case mode\nwhen .numeric?\n  self.numeric(text)\nwhen .alphanumeric?\n  self.alphanumeric(text)\nwhen .byte?\n  self.bytes(text)\nwhen .kanji?\n  self.kanji(text)\nelse\n  raise(\"Unsupported mode\")\nend"}}],"instance_methods":[{"html_id":"bit_stream:BitStream-instance-method","name":"bit_stream","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":7,"url":null},"def":{"name":"bit_stream","return_type":"BitStream","visibility":"Public","body":"@bit_stream"}},{"html_id":"char_count:Int32-instance-method","name":"char_count","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":6,"url":null},"def":{"name":"char_count","return_type":"Int32","visibility":"Public","body":"@char_count"}},{"html_id":"mode:Mode-instance-method","name":"mode","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":5,"url":null},"def":{"name":"mode","return_type":"Mode","visibility":"Public","body":"@mode"}}],"types":[{"html_id":"goban/Goban/Segment/Mode","path":"Goban/Segment/Mode.html","kind":"enum","full_name":"Goban::Segment::Mode","name":"Mode","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/segment/mode.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"ECI","name":"ECI","value":"7_u8"},{"id":"Numeric","name":"Numeric","value":"1_u8"},{"id":"Alphanumeric","name":"Alphanumeric","value":"2_u8"},{"id":"Byte","name":"Byte","value":"4_u8"},{"id":"Kanji","name":"Kanji","value":"8_u8"},{"id":"StructuredAppend","name":"StructuredAppend","value":"3_u8"},{"id":"Invalid","name":"Invalid","value":"255_u8"}],"namespace":{"html_id":"goban/Goban/Segment","kind":"struct","full_name":"Goban::Segment","name":"Segment"},"instance_methods":[{"html_id":"alphanumeric?-instance-method","name":"alphanumeric?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":5,"url":null},"def":{"name":"alphanumeric?","visibility":"Public","body":"self == Alphanumeric"}},{"html_id":"byte?-instance-method","name":"byte?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":6,"url":null},"def":{"name":"byte?","visibility":"Public","body":"self == Byte"}},{"html_id":"cci_bits_size(ver:QRCode::Version)-instance-method","name":"cci_bits_size","doc":"Number of character count indicator bits for this mode","summary":"<p>Number of character count indicator bits for this mode</p>","abstract":false,"args":[{"name":"ver","external_name":"ver","restriction":"QRCode::Version"}],"args_string":"(ver : QRCode::Version)","args_html":"(ver : <a href=\"../../Goban/QRCode/Version.html\">QRCode::Version</a>)","location":{"filename":"src/goban/segment/mode.cr","line_number":12,"url":null},"def":{"name":"cci_bits_size","args":[{"name":"ver","external_name":"ver","restriction":"QRCode::Version"}],"visibility":"Public","body":"case self\nwhen Numeric\n  values = {10, 12, 14}\nwhen Alphanumeric\n  values = {9, 11, 13}\nwhen Byte\n  values = {8, 16, 16}\nwhen Kanji\n  values = {8, 10, 12}\nelse\n  raise(\"Incompatible mode\")\nend\nif (1..9).includes?(ver)\n  values[0]\nelse\n  if (10..26).includes?(ver)\n    values[1]\n  else\n    if (27..40).includes?(ver)\n      values[2]\n    else\n      raise(\"Invalid version object\")\n    end\n  end\nend\n"}},{"html_id":"eci?-instance-method","name":"eci?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":3,"url":null},"def":{"name":"eci?","visibility":"Public","body":"self == ECI"}},{"html_id":"invalid?-instance-method","name":"invalid?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":9,"url":null},"def":{"name":"invalid?","visibility":"Public","body":"self == Invalid"}},{"html_id":"kanji?-instance-method","name":"kanji?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":7,"url":null},"def":{"name":"kanji?","visibility":"Public","body":"self == Kanji"}},{"html_id":"numeric?-instance-method","name":"numeric?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":4,"url":null},"def":{"name":"numeric?","visibility":"Public","body":"self == Numeric"}},{"html_id":"structured_append?-instance-method","name":"structured_append?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":8,"url":null},"def":{"name":"structured_append?","visibility":"Public","body":"self == StructuredAppend"}}]},{"html_id":"goban/Goban/Segment/Optimizer","path":"Goban/Segment/Optimizer.html","kind":"module","full_name":"Goban::Segment::Optimizer","name":"Optimizer","abstract":false,"locations":[{"filename":"src/goban/segment/optimizer.cr","line_number":2,"url":null}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/Segment/Optimizer","kind":"module","full_name":"Goban::Segment::Optimizer","name":"Optimizer"}],"namespace":{"html_id":"goban/Goban/Segment","kind":"struct","full_name":"Goban::Segment","name":"Segment"},"instance_methods":[{"html_id":"make_optimized_segments(text:String,ecl:QRCode::ECLevel)-instance-method","name":"make_optimized_segments","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"QRCode::ECLevel"}],"args_string":"(text : String, ecl : QRCode::ECLevel)","args_html":"(text : String, ecl : <a href=\"../../Goban/QRCode/ECLevel.html\">QRCode::ECLevel</a>)","location":{"filename":"src/goban/segment/optimizer.cr","line_number":5,"url":null},"def":{"name":"make_optimized_segments","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"QRCode::ECLevel"}],"visibility":"Public","body":"chars = text.chars\nsegments, version = nil, nil\nused_bits = 0\n(QRCode::Version::MIN..QRCode::Version::MAX).each do |v|\n  v = QRCode::Version.new(v)\n  if ((v == 1) || (v == 10)) || (v == 27)\n    char_modes = compute_char_modes(chars, v)\n    segments = make_segments(text, char_modes)\n  end\n  if segments\n  else\n    raise(\"Segment optimization failed\")\n  end\n  cap_bits = (v.max_data_codewords(ecl)) * 8\n  used_bits = Segment.count_total_bits(segments, v)\n  if used_bits <= cap_bits\n    version = v\n    break\n  end\nend\nif segments && version\nelse\n  raise(\"Text too long\")\nend\n{segments, version}\n"}}]}]}]}]}}