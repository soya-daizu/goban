crystal_doc_search_index_callback({"repository_name":"goban","body":"# Goban\n\nA fast and efficient QR Code encoder library written purely in Crystal. It uses significantly fewer heap allocations than other implementations in Crystal, and it is more feature-complete with support for Kanji mode encoding.\n\nThe implementation is based on [ISO/IEC 18004:2015](https://www.iso.org/standard/62021.html)/[JIS [X 0510:2018](https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS+X+0510%3A2018) standard and is independent of other implementations for the most part. However, the optimal text segmentation algorithm is made possible thanks to the following article: [Optimal text segmentation for QR Codes](https://www.nayuki.io/page/optimal-text-segmentation-for-qr-codes).\n\nThe name comes from the board game [Go](<https://en.wikipedia.org/wiki/Go_(game)>), which inspired the QR Code inventor to come up with a fast and accurate matrix barcode to read. 碁盤(Goban) literally means [Go board](https://en.wikipedia.org/wiki/Go_equipment#Board) in Japanese.\n\n## Benchmark\n\nComparing it/s and heap allocations between Goban and [spider-gazelle/qr-code](https://github.com/spider-gazelle/qr-code):\n\n```crystal\nrequire \"benchmark\"\nrequire \"qr-code\"\nrequire \"goban\"\n\nBenchmark.ips do |x|\n  x.report(\"qr-code\") { QR.new(\"Hello World!\", level: :h) }\n  x.report(\"goban\") { Goban::QR.encode_string(\"Hello World!\", Goban::ECC::Level::High) }\nend\n```\n\n```\nqr-code   3.39k (295.26µs) (± 1.40%)   149kB/op   2.13× slower\n  goban   7.20k (138.80µs) (± 1.99%)  2.71kB/op        fastest\n```\n\n## Features\n\n- [x] Encoding a sequence of text segments\n  - [x] Numeric mode\n  - [x] Alphanumeric mode\n  - [x] Byte mode\n  - [x] Kanji mode\n- [x] Building optimized text segments from a string\n- [x] Error correction coding using Reed-Solomon Codes\n- [x] Data masking with all 8 mask patterns\n- [x] Support for all QR Code versions from 1 to 40\n- [ ] Structured append of symbols\n- [ ] Micro QR Code (In development)\n- [ ] rMQR Code (Not a part of ISO/IEC 18004:2015 standard but planned)\n\nGoban will not support the generation of QR Code Model 1 symbols as it is considered obsolete.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     goban:\n       github: soya-daizu/goban\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nA simple example to generate a QR Code for the given string and output to the console:\n\n```crystal\nrequire \"goban\"\n\nqr = Goban::QR.encode_string(\"Hello World!\", Goban::ECC::Level::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████\n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██\n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████\n#    ██          ██    ██████████  ██  ████\n#    ██  ██████  ██    ██  ██          ██████\n#    ██  ██████  ██  ██  ██  ██  ██    ██████\n#    ██  ██████  ██  ██████  ██    ██    ██\n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██\n```\n\n### Using exporters to generate a PNG and SVG image\n\nTo generate a PNG image, add [stumpy_png](https://github.com/stumpycr/stumpy_png) as a dependency in your shard.yml, and `require \"goban/exporters/png\"` to use `Goban::PNGExporter`:\n\n```crystal\nrequire \"goban/exporters/png\"\n\nqr = Goban::QR.encode_string(\"Hello World!\")\nputs \"Exporting with targeted size: 500\"\nsize = Goban::PNGExporter.export(qr, \"output.png\", 500)\nputs \"Actual QR Code size: #{size}\"\n```\n\n`Goban::SVGExporter` requires no external dependency and can be used like below:\n\n```crystal\nrequire \"goban/exporters/svg\"\n\nqr = Goban::QR.encode_string(\"Hello World!\")\n# Get SVG string\nputs Goban::SVGExporter.svg_string(qr, 4)\n# or export as a file\nGoban::SVGExporter.export(qr, \"test.svg\")\n```\n\n### About the automatic text segmentation\n\nThe `Goban::QR.encode_string()` method encodes a string to an optimized sequence of text segments where each segment is encoded in one of the following encoding modes:\n\n| Mode | Supported Characters |\n| --- | --- |\n| Numeric | 0-9 |\n| Alphanumeric | 0-9 A-Z \\s $ % \\* + - . / : |\n| Byte | Any UTF-8 characters |\n| Kanji | Any Shift-JIS characters |\n\nThe `Byte` mode supports the widest range of characters but it is inefficient and produces longer data bits, meaning that when comparing the two QR Code symbols, one encoded entirely in the `Byte` mode and the other encoded in the appropriate mode for each character\\*, the former one can be more challenging to scan and decode than the other given that both symbols are printed in the same size.\n\n\\* Because each text segment includes additional header bits to indicate its encoding mode, simply encoding each character in the supported mode that has the smallest character set may not always produce the most optimal segments. Goban addresses this by using the technique of dynamic programming.\n\nFinding out the optimal segmentation requires some processing, so if you are generating thousands of QR Codes with all the same limited sets of characters, you may want to hard-code the text segments and apply the characters to those to generate the QR Codes.\n\nThis can be done by using the `Goban::QR.encode_segments()` method, which is the lower-level method used by the `Goban::QR.encode_string()` method.\n\n```crystal\nsegments = [\n  Goban::Segment.kanji(\"こんにち\"),\n  Goban::Segment.byte(\"wa\"),\n  Goban::Segment.kanji(\"、世界！\"),\n  Goban::Segment.alphanumeric(\" 123\"),\n]\n# Note that when using this method, you have to manually assign the version (= size) of the QR Code.\nqr = Goban::QR.encode_segments(segments, Goban::ECC::Level::Low, Goban::QR::Version.new(2))\n```\n\nThe optimal segments and version to hard-code can be figured out by using the `Goban::Segment::Optimizer.make_optimized_segments()` method.\n\n## API Documentations\n\nThe API docs for the current master branch are available from the link below:\n\n[API docs](https://soya-daizu.github.io/goban/)\n\nYou may want to first look at the `Goban::QR` or one of the exporters (`Goban::PNGExporter` and `Goban::SVGExporters`) to understand how to use this library.\n\n## Contributing\n\n1. Fork it (<https://github.com/soya-daizu/goban/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [soya_daizu](https://github.com/soya-daizu) - creator and maintainer\n","program":{"html_id":"goban/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"goban","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"goban/Goban","path":"Goban.html","kind":"module","full_name":"Goban","name":"Goban","abstract":false,"locations":[{"filename":"src/goban.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban.cr#L3"},{"filename":"src/goban/bitstream.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L1"},{"filename":"src/goban/constants.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/constants.cr#L1"},{"filename":"src/goban/exporters/png.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/png.cr#L3"},{"filename":"src/goban/exporters/svg.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/svg.cr#L1"},{"filename":"src/goban/mqr.cr","line_number":4,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L4"},{"filename":"src/goban/qr.cr","line_number":4,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L4"},{"filename":"src/goban/segment.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L3"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALPHANUMERIC_CHARS","name":"ALPHANUMERIC_CHARS","value":"\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\""},{"id":"ECC_CODEWORDS_MQR","name":"ECC_CODEWORDS_MQR","value":"{ {-1, 2, -1, -1, -1}, {-1, -1, 5, 6, 8}, {-1, -1, 6, 8, 10}, {-1, -1, -1, -1, 14} }"},{"id":"ECC_CODEWORDS_PER_BLOCK","name":"ECC_CODEWORDS_PER_BLOCK","value":"{ {-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, {-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28}, {-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, {-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30} }"},{"id":"ERROR_CORRECTION_BLOCKS","name":"ERROR_CORRECTION_BLOCKS","value":"{ {-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25}, {-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49}, {-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68}, {-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81} }"},{"id":"GF256_INVMAP","name":"GF256_INVMAP","value":"StaticArray(UInt8, 256).new(0)"},{"id":"GF256_MAP","name":"GF256_MAP","value":"StaticArray(UInt8, 256).new(1)","doc":"Tables of galois field values","summary":"<p>Tables of galois field values</p>"},{"id":"VERSION","name":"VERSION","value":"\"1.2.0\""}],"types":[{"html_id":"goban/Goban/BitStream","path":"Goban/BitStream.html","kind":"struct","full_name":"Goban::BitStream","name":"BitStream","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"goban/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"goban/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"goban/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/bitstream.cr","line_number":4,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L4"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PAD0","name":"PAD0","value":"236"},{"id":"PAD1","name":"PAD1","value":"17"}],"included_modules":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"An array data structure that holds bits.\nBased on the `BitArray` object of the standard library.","summary":"<p>An array data structure that holds bits.</p>","constructors":[{"html_id":"new(size:Int)-class-method","name":"new","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int"}],"args_string":"(size : Int)","args_html":"(size : Int)","location":{"filename":"src/goban/bitstream.cr","line_number":19,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L19"},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:BitStream)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"BitStream"}],"args_string":"(other : BitStream)","args_html":"(other : <a href=\"../Goban/BitStream.html\">BitStream</a>)","location":{"filename":"src/goban/bitstream.cr","line_number":116,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L116"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"BitStream"}],"visibility":"Public","body":"min_size = Math.min(size, other.size)\n0.upto(min_size - 1) do |i|\n  if self[i] != other[i]\n    return nil\n  end\nend\nsize <=> other.size\n"}},{"html_id":"bits:Pointer(UInt8)-instance-method","name":"bits","doc":"Pointer to the underlying UInt8 representation.","summary":"<p>Pointer to the underlying UInt8 representation.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":9,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L9"},"def":{"name":"bits","return_type":"Pointer(UInt8)","visibility":"Public","body":"@bits"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Size of the array.","summary":"<p>Size of the array.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":11,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L11"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"tail_idx:Int32-instance-method","name":"tail_idx","doc":"Current tail index of the array. This increases as\nmore bits are added to itself.","summary":"<p>Current tail index of the array.</p>","abstract":false,"location":{"filename":"src/goban/bitstream.cr","line_number":14,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L14"},"def":{"name":"tail_idx","visibility":"Public","body":"@tail_idx"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/goban/bitstream.cr","line_number":101,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/bitstream.cr#L101"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"(io << \"Goban::BitStream(@tail_idx=\") << @tail_idx\nio << \", @bits=[\"\nidx = 0\neach_slice(4) do |bits|\n  if idx == 0\n  else\n    io << ' '\n  end\n  bits.each do |bit|\n    if idx == @tail_idx\n      io << '\\''\n    end\n    io << (bit ? '1' : '0')\n    idx = idx + 1\n  end\nend\nio << \"])\"\n"}}]},{"html_id":"goban/Goban/ECC","path":"Goban/ECC.html","kind":"module","full_name":"Goban::ECC","name":"ECC","abstract":false,"locations":[{"filename":"src/goban/ecc/level.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/level.cr#L1"},{"filename":"src/goban/ecc/rsgenerator.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/rsgenerator.cr#L1"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"types":[{"html_id":"goban/Goban/ECC/Level","path":"Goban/ECC/Level.html","kind":"enum","full_name":"Goban::ECC::Level","name":"Level","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/ecc/level.cr","line_number":14,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/level.cr#L14"}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Low","name":"Low","value":"0_u8"},{"id":"Medium","name":"Medium","value":"1_u8"},{"id":"Quartile","name":"Quartile","value":"2_u8"},{"id":"High","name":"High","value":"3_u8"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"doc":"Error correction level of the QR Code.\nQR Code symbols include redundant bits based on the selected error\ncorrection level, so that even if some part the symbol is not readable,\nthe decoder can recover the loss for up to:\n\n- 7% for `Low`\n- 15% for `Medium`\n- 25% for `Quartile`\n- 30% for `High`\n\nNote that choosing a higher error correction level requires more redundant\nbits, meaning that the resulting QR Code symbol can get larger.","summary":"<p>Error correction level of the QR Code.</p>","instance_methods":[{"html_id":"high?-instance-method","name":"high?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":18,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/level.cr#L18"},"def":{"name":"high?","visibility":"Public","body":"self == High"}},{"html_id":"low?-instance-method","name":"low?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":15,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/level.cr#L15"},"def":{"name":"low?","visibility":"Public","body":"self == Low"}},{"html_id":"medium?-instance-method","name":"medium?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":16,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/level.cr#L16"},"def":{"name":"medium?","visibility":"Public","body":"self == Medium"}},{"html_id":"quartile?-instance-method","name":"quartile?","abstract":false,"location":{"filename":"src/goban/ecc/level.cr","line_number":17,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/level.cr#L17"},"def":{"name":"quartile?","visibility":"Public","body":"self == Quartile"}}]},{"html_id":"goban/Goban/ECC/RSGenerator","path":"Goban/ECC/RSGenerator.html","kind":"module","full_name":"Goban::ECC::RSGenerator","name":"RSGenerator","abstract":false,"locations":[{"filename":"src/goban/ecc/rsgenerator.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/rsgenerator.cr#L3"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/ECC/RSGenerator","kind":"module","full_name":"Goban::ECC::RSGenerator","name":"RSGenerator"}],"namespace":{"html_id":"goban/Goban/ECC","kind":"module","full_name":"Goban::ECC","name":"ECC"},"doc":"Module for generating redundant Reed-Solomon error correction bits.","summary":"<p>Module for generating redundant Reed-Solomon error correction bits.</p>","instance_methods":[{"html_id":"add_ec_codewords(codewords:Slice(UInt8),version:QR::Version,ecl:Level)-instance-method","name":"add_ec_codewords","abstract":false,"args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"args_string":"(codewords : Slice(UInt8), version : QR::Version, ecl : Level)","args_html":"(codewords : Slice(UInt8), version : <a href=\"../../Goban/QR/Version.html\">QR::Version</a>, ecl : <a href=\"../../Goban/ECC/Level.html\">Level</a>)","location":{"filename":"src/goban/ecc/rsgenerator.cr","line_number":6,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/ecc/rsgenerator.cr#L6"},"def":{"name":"add_ec_codewords","args":[{"name":"codewords","external_name":"codewords","restriction":"Slice(UInt8)"},{"name":"version","external_name":"version","restriction":"QR::Version"},{"name":"ecl","external_name":"ecl","restriction":"Level"}],"visibility":"Public","body":"if codewords.size != (version.max_data_codewords(ecl))\n  raise(\"Codewords size mismatch\")\nend\nec_blocks_count = ERROR_CORRECTION_BLOCKS[ecl.value][version.value]\nblock_ecc_size = ECC_CODEWORDS_PER_BLOCK[ecl.value][version.value]\nraw_codewords = version.raw_data_mods_count // 8\nshort_blocks_count = ec_blocks_count - (raw_codewords % ec_blocks_count)\nshort_block_size = raw_codewords // ec_blocks_count\nblocks = Array(Array(UInt8)).new(ec_blocks_count)\ngen_poly = self.get_generator_polynomial(block_ecc_size)\nk = 0\nec_blocks_count.times do |i|\n  data_size = (short_block_size - block_ecc_size) + (i >= short_blocks_count ? 1 : 0)\n  data = codewords[k, data_size].to_a\n  k = k + data_size\n  ec_codewords = self.poly_modulo(data, gen_poly)\n  if i < short_blocks_count\n    data.push(0)\n  end\n  data.concat(ec_codewords)\n  blocks.push(data)\nend\nresult = Array(UInt8).new(raw_codewords)\n(short_block_size + 1).times do |i|\n  blocks.each_with_index do |block, j|\n    if (i != (short_block_size - block_ecc_size)) || j >= short_blocks_count\n      result.push(block[i])\n    end\n  end\nend\nresult\n"}}]}]},{"html_id":"goban/Goban/MQR","path":"Goban/MQR.html","kind":"struct","full_name":"Goban::MQR","name":"MQR","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/mqr.cr","line_number":7,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L7"},{"filename":"src/goban/mqr/version.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L1"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Object that represents an encoded QR Code symbol.\nTODO: Finish Micro QR implementation","summary":"<p>Object that represents an encoded QR Code symbol.</p>","class_methods":[{"html_id":"encode_segments(segments:Array(Segment),ecl:ECLevel,version:Version|Int)-class-method","name":"encode_segments","doc":"Creates a new QR Code object for the given data segments, error correction level, and QR Code\nversion that is large enough to contain all the data in the segments. Note that this method\ndoes not check the data length before encoding, so it will just raise `Index out of bounds`\nerror if the data does not fit within the given version.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nsegments = [\n  Goban::Segment.alphanumeric(\"HELLO WORLD\"),\n  Goban::Segment.byte(\"!\"),\n]\nqr = Goban::QR.encode_segments(segments, Goban::QR::ECLevel::Low, Goban::QR::Version.new(1))\nqr.print_to_console\n# => ██████████████    ██  ████  ██████████████\n#    ██          ██    ██████    ██          ██\n#    ██  ██████  ██  ████  ████  ██  ██████  ██\n#    ██  ██████  ██    ██  ██    ██  ██████  ██\n#    ██  ██████  ██      ██  ██  ██  ██████  ██\n#    ██          ██          ██  ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                    ████  ████\n#    ██████  ████████████████  ████      ██\n#        ██    ██                    ██      ██\n#      ████  ██  ████████    ██████  ████\n#      ██  ██  ██  ████████    ██  ██  ██████\n#        ██  ██████  ██      ██  ██████  ██  ██\n#                    ██  ████  ██        ██  ██\n#    ██████████████  ████████    ████  ████\n#    ██          ██  ████  ████    ██  ██\n#    ██  ██████  ██  ████████    ██████████████\n#    ██  ██████  ██        ██  ██████      ██\n#    ██  ██████  ██  ██      ██  ████  ██    ██\n#    ██          ██  ████████          ██  ████\n#    ██████████████  ██      ██  ████        ██\n```\n\nWhen constructing your own segments, note that it may not result in the segments that has the\nshortest data length even if for each character in the source string you choose an encoding type\nwith the smallest character set that supports that supports it.","summary":"<p>Creates a new QR Code object for the given data segments, error correction level, and QR Code version that is large enough to contain all the data in the segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECLevel"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"args_string":"(segments : Array(Segment), ecl : ECLevel, version : Version | Int)","args_html":"(segments : Array(<a href=\"../Goban/Segment.html\">Segment</a>), ecl : ECLevel, version : <a href=\"../Goban/MQR/Version.html\">Version</a> | Int)","location":{"filename":"src/goban/mqr.cr","line_number":132,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L132"},"def":{"name":"encode_segments","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECLevel"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"visibility":"Public","body":"version = Version.new(version.to_i)\nbit_stream = BitStream.new((version.max_data_codewords(ecl)) * 8)\nsegments.each do |segment|\n  bit_stream.append_segment_bits(segment, version)\nend\nbit_stream.append_terminator_bits(version, ecl)\nbit_stream.append_padding_bits\ndata_codewords = RSGenerator.add_ec_codewords(bit_stream.to_bytes, version, ecl)\ncanvas = Canvas.new(version, ecl)\ncanvas.draw_function_patterns\ncanvas.draw_data_codewords(data_codewords)\ncanvas.apply_best_mask\nself.new(version, ecl, canvas)\n"}},{"html_id":"encode_string(text:String,ecl:ECLevel=ECLevel::Medium)-class-method","name":"encode_string","doc":"Creates a new QR Code object for the given string and error correction level.\nSetting a higher error correction level makes the QR Code symbol mode resistant\nto loss of pixels, but it requires more redundant bits, resulting in a larger\nsymbol size.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nqr = Goban::QR.encode_string(\"Hello World!\", Goban::QR::ECLevel::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████\n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██\n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████\n#    ██          ██    ██████████  ██  ████\n#    ██  ██████  ██    ██  ██          ██████\n#    ██  ██████  ██  ██  ██  ██  ██    ██████\n#    ██  ██████  ██  ██████  ██    ██    ██\n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██\n```\n\nQR Code data under the hood is encoded in one or more encoding types, such as Numeric,\nAlphanumeric, Byte, and Kanji. Each encoding type has a different set of characters\nsupported. While Byte mode can express arbitrary types of data (usually interpreted as UTF-8\ntext, thus it can express any Unicode characters), it often uses more bits to represent a single\ncodepoint compared to other encoding types which have a limited set of characters supported,\nresulting in larger data size and a more challenging QR Code to scan.\n\nThis string encoding uses an algorithm to figure out the best segmentation of the encoding\ntypes for the given string to make the resulting data size as small as possible. Here are the\nexamples:\n\n```\n# These examples are the optimal segmentations when the ECLevel is Medium.\n# Note that the Segment object shown in these examples are not the actual Segment object used\n# in the Goban's codebase but they are just pseudo objects.\n\n\"0123456789\" # => [Segment(\"0123456789\", mode: Numeric)]\n\"ABCDEF\"     # => [Segment(\"ABCDEF\", mode: Alphanumeric)]\n\"012345A\"    # => [Segment(\"012345A\", mode: Alphanumeric)]\n\"0123456A\"   # => [Segment(\"0123456\", mode: Numeric), Segment(\"A\", mode: Alphanumeric)]\n\"こんにちwa、世界！ 123\"\n# => [\n#   Segment(\"こんにち\", mode: Kanji),\n#   Segment(\"wa\", mode: Byte),\n#   Segment(\"、世界！\", mode: Kanji),\n#   Segment(\" 123\", mode: Alphanumeric)\n# ]\n```\n\nIf the type of characters used in your data strings is always the same, you may want to consider\nbuilding data segments by yourself so that Goban doesn't have to do extra processing to figure\nit out every single time. See `#encode_segments` for how to create QR Codes by manually creating\nencoding segments.","summary":"<p>Creates a new QR Code object for the given string and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECLevel::Medium","external_name":"ecl","restriction":"ECLevel"}],"args_string":"(text : String, ecl : ECLevel = ECLevel::Medium)","args_html":"(text : String, ecl : ECLevel = <span class=\"t\">ECLevel</span><span class=\"t\">::</span><span class=\"t\">Medium</span>)","location":{"filename":"src/goban/mqr.cr","line_number":88,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L88"},"def":{"name":"encode_string","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECLevel::Medium","external_name":"ecl","restriction":"ECLevel"}],"visibility":"Public","body":"segments, version = Segment::Optimizer.make_optimized_segments(text, ecl)\nself.encode_segments(segments, ecl, version)\n"}}],"constructors":[{"html_id":"new(version:Goban::MQR::Version,ecl:Goban::ECC::Level,canvas:Goban::QR::Canvas)-class-method","name":"new","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"::Goban::MQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"::Goban::ECC::Level"},{"name":"canvas","external_name":"canvas","restriction":"::Goban::QR::Canvas"}],"args_string":"(version : Goban::MQR::Version, ecl : Goban::ECC::Level, canvas : Goban::QR::Canvas)","args_html":"(version : <a href=\"../Goban/MQR/Version.html\">Goban::MQR::Version</a>, ecl : <a href=\"../Goban/ECC/Level.html\">Goban::ECC::Level</a>, canvas : <a href=\"../Goban/QR/Canvas.html\">Goban::QR::Canvas</a>)","location":{"filename":"src/goban/mqr.cr","line_number":19,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L19"},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":"::Goban::MQR::Version"},{"name":"ecl","external_name":"ecl","restriction":"::Goban::ECC::Level"},{"name":"canvas","external_name":"canvas","restriction":"::Goban::QR::Canvas"}],"visibility":"Public","body":"_ = allocate\n_.initialize(version, ecl, canvas)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"canvas:QR::Canvas-instance-method","name":"canvas","doc":"Returns the canvas of the QR Code symbol. Canvas contains information about\neach single module (pixel) in the symbol.","summary":"<p>Returns the canvas of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":15,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L15"},"def":{"name":"canvas","return_type":"QR::Canvas","visibility":"Public","body":"@canvas"}},{"html_id":"ecl:ECC::Level-instance-method","name":"ecl","doc":"Error correction level of the QR Code symbol.","summary":"<p>Error correction level of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":12,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L12"},"def":{"name":"ecl","return_type":"ECC::Level","visibility":"Public","body":"@ecl"}},{"html_id":"print_to_console-instance-method","name":"print_to_console","doc":"Prints the QR Code symbol as a text in the console. To generate the actual image file,\nuse `PNGExporter` or write your own exporter by reading each modules in `#canvas`.","summary":"<p>Prints the QR Code symbol as a text in the console.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":153,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L153"},"def":{"name":"print_to_console","visibility":"Public","body":"@canvas.print_to_console"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Length of a side in the symbol.","summary":"<p>Length of a side in the symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":17,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L17"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"version:Version-instance-method","name":"version","doc":"Version of the QR Code symbol. Version in QR Code does not refer to its revision,\nbut simply indicates the size format of the QR Code symbol.","summary":"<p>Version of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/mqr.cr","line_number":10,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr.cr#L10"},"def":{"name":"version","return_type":"Version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/MQR/Version","path":"Goban/MQR/Version.html","kind":"struct","full_name":"Goban::MQR::Version","name":"Version","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/mqr/version.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L5"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX","name":"MAX","value":"4_u8"},{"id":"MIN","name":"MIN","value":"1_u8"}],"included_modules":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"goban/Goban/MQR","kind":"struct","full_name":"Goban::MQR","name":"MQR"},"doc":"Represents a version number of the Micro QR Code symbol.\nPossible versions range from 1 to 4, and the higher the number,\nthe large the size of the final Micro QR Code symbol.","summary":"<p>Represents a version number of the Micro QR Code symbol.</p>","constructors":[{"html_id":"new(value:Int)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"}],"args_string":"(value : Int)","args_html":"(value : Int)","location":{"filename":"src/goban/mqr/version.cr","line_number":13,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L13"},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:Int)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","args_html":"(other : Int)","location":{"filename":"src/goban/mqr/version.cr","line_number":18,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L18"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Int"}],"visibility":"Public","body":"@value <=> other"}},{"html_id":"max_data_codewords(ecl:ECC::Level)-instance-method","name":"max_data_codewords","doc":"Maximum number of codewords that can be contained in the Micro QR Code\nsymbol of this version.","summary":"<p>Maximum number of codewords that can be contained in the Micro QR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/mqr/version.cr","line_number":49,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L49"},"def":{"name":"max_data_codewords","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"raw_max_data_codewords = raw_data_mods_count // 8\necc_codewords = ECC_CODEWORDS_MQR[ecl.value][@value]\nraw_max_data_codewords - ecc_codewords\n"}},{"html_id":"symbol_size-instance-method","name":"symbol_size","doc":"Size of the Micro QR Code symbol for this version.","summary":"<p>Size of the Micro QR Code symbol for this version.</p>","abstract":false,"location":{"filename":"src/goban/mqr/version.cr","line_number":27,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L27"},"def":{"name":"symbol_size","visibility":"Public","body":"(2 * @value) + 9"}},{"html_id":"to_i-instance-method","name":"to_i","abstract":false,"location":{"filename":"src/goban/mqr/version.cr","line_number":22,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L22"},"def":{"name":"to_i","visibility":"Public","body":"value"}},{"html_id":"value:UInt8-instance-method","name":"value","abstract":false,"location":{"filename":"src/goban/mqr/version.cr","line_number":11,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/mqr/version.cr#L11"},"def":{"name":"value","return_type":"UInt8","visibility":"Public","body":"@value"}}]}]},{"html_id":"goban/Goban/PNGExporter","path":"Goban/PNGExporter.html","kind":"module","full_name":"Goban::PNGExporter","name":"PNGExporter","abstract":false,"ancestors":[{"html_id":"goban/StumpyPNG","kind":"module","full_name":"StumpyPNG","name":"StumpyPNG"},{"html_id":"goban/StumpyCore","kind":"module","full_name":"StumpyCore","name":"StumpyCore"}],"locations":[{"filename":"src/goban/exporters/png.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/png.cr#L5"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"goban/StumpyPNG","kind":"module","full_name":"StumpyPNG","name":"StumpyPNG"}],"extended_modules":[{"html_id":"goban/Goban/PNGExporter","kind":"module","full_name":"Goban::PNGExporter","name":"PNGExporter"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Helper module to generate PNG image for the QR Code object. Requires `stumpy_png` as a dependency.","summary":"<p>Helper module to generate PNG image for the QR Code object.</p>","instance_methods":[{"html_id":"export(qr:QR,path:String,mod_size:Int,blank_mods:Int)-instance-method","name":"export","doc":"Generates a PNG image with the given module size and blank modules, and exportes to the\ngiven path.\n\n`mod_size` refers to the number of pixels used for each module in the QR Code symbol,\nand `blank_mods` is the size of the white border around the symbol.","summary":"<p>Generates a PNG image with the given module size and blank modules, and exportes to the given path.</p>","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"path","external_name":"path","restriction":"String"},{"name":"mod_size","external_name":"mod_size","restriction":"Int"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"args_string":"(qr : QR, path : String, mod_size : Int, blank_mods : Int)","args_html":"(qr : <a href=\"../Goban/QR.html\">QR</a>, path : String, mod_size : Int, blank_mods : Int)","location":{"filename":"src/goban/exporters/png.cr","line_number":22,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/png.cr#L22"},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"path","external_name":"path","restriction":"String"},{"name":"mod_size","external_name":"mod_size","restriction":"Int"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"visibility":"Public","body":"blank_size = blank_mods * mod_size\nsize = (qr.size * mod_size) + (blank_size * 2)\ndark_color = RGBA.from_rgb_n(0, 0, 0, 8)\nlight_color = RGBA.from_rgb_n(255, 255, 255, 8)\ncanvas = Canvas.new(size, size, light_color)\nqr.size.times do |x|\n  qr.size.times do |y|\n    if qr.canvas.get_module(x, y)\n    else\n      next\n    end\n    canvas_x = (mod_size * x) + blank_size\n    canvas_y = (mod_size * y) + blank_size\n    mod_size.times do |i|\n      mod_size.times do |j|\n        canvas[canvas_x + i, canvas_y + j] = dark_color\n      end\n    end\n  end\nend\nStumpyPNG.write(canvas, path)\nsize\n"}},{"html_id":"export(qr:QR,path:String,target_size:Int)-instance-method","name":"export","doc":"Generates a PNG image with the given target size and exports to the given path.\nNote that the size of the resulting image may not be equal to the target size specified.","summary":"<p>Generates a PNG image with the given target size and exports to the given path.</p>","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"path","external_name":"path","restriction":"String"},{"name":"target_size","external_name":"target_size","restriction":"Int"}],"args_string":"(qr : QR, path : String, target_size : Int)","args_html":"(qr : <a href=\"../Goban/QR.html\">QR</a>, path : String, target_size : Int)","location":{"filename":"src/goban/exporters/png.cr","line_number":11,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/png.cr#L11"},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"path","external_name":"path","restriction":"String"},{"name":"target_size","external_name":"target_size","restriction":"Int"}],"visibility":"Public","body":"size = qr.size + (4 * 2)\nratio = target_size / size\nself.export(qr, path, ratio.round.to_i, 4)\n"}}]},{"html_id":"goban/Goban/QR","path":"Goban/QR.html","kind":"struct","full_name":"Goban::QR","name":"QR","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr.cr","line_number":6,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L6"},{"filename":"src/goban/qr/canvas.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L1"},{"filename":"src/goban/qr/mask.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/mask.cr#L1"},{"filename":"src/goban/qr/version.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L1"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Object that represents an encoded QR Code symbol.","summary":"<p>Object that represents an encoded QR Code symbol.</p>","class_methods":[{"html_id":"encode_segments(segments:Array(Segment),ecl:ECC::Level,version:Version|Int)-class-method","name":"encode_segments","doc":"Creates a new QR Code object for the given data segments, error correction level, and QR Code\nversion that is large enough to contain all the data in the segments. Note that this method\ndoes not check the data length before encoding, so it will just raise `Index out of bounds`\nerror if the data does not fit within the given version.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nsegments = [\n  Goban::Segment.alphanumeric(\"HELLO WORLD\"),\n  Goban::Segment.byte(\"!\"),\n]\nqr = Goban::QR.encode_segments(segments, Goban::ECC::Level::Low, Goban::QR::Version.new(1))\nqr.print_to_console\n# => ██████████████    ██  ████  ██████████████\n#    ██          ██    ██████    ██          ██\n#    ██  ██████  ██  ████  ████  ██  ██████  ██\n#    ██  ██████  ██    ██  ██    ██  ██████  ██\n#    ██  ██████  ██      ██  ██  ██  ██████  ██\n#    ██          ██          ██  ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                    ████  ████\n#    ██████  ████████████████  ████      ██\n#        ██    ██                    ██      ██\n#      ████  ██  ████████    ██████  ████\n#      ██  ██  ██  ████████    ██  ██  ██████\n#        ██  ██████  ██      ██  ██████  ██  ██\n#                    ██  ████  ██        ██  ██\n#    ██████████████  ████████    ████  ████\n#    ██          ██  ████  ████    ██  ██\n#    ██  ██████  ██  ████████    ██████████████\n#    ██  ██████  ██        ██  ██████      ██\n#    ██  ██████  ██  ██      ██  ████  ██    ██\n#    ██          ██  ████████          ██  ████\n#    ██████████████  ██      ██  ████        ██\n```\n\nWhen constructing your own segments, note that it may not result in the segments that has the\nshortest data length even if for each character in the source string you choose an encoding type\nwith the smallest character set that supports that supports it.","summary":"<p>Creates a new QR Code object for the given data segments, error correction level, and QR Code version that is large enough to contain all the data in the segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"args_string":"(segments : Array(Segment), ecl : ECC::Level, version : Version | Int)","args_html":"(segments : Array(<a href=\"../Goban/Segment.html\">Segment</a>), ecl : <a href=\"../Goban/ECC/Level.html\">ECC::Level</a>, version : <a href=\"../Goban/QR/Version.html\">Version</a> | Int)","location":{"filename":"src/goban/qr.cr","line_number":131,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L131"},"def":{"name":"encode_segments","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"},{"name":"version","external_name":"version","restriction":"Version | Int"}],"visibility":"Public","body":"version = Version.new(version.to_i)\nbit_stream = BitStream.new((version.max_data_codewords(ecl)) * 8)\nsegments.each do |segment|\n  bit_stream.append_segment_bits(segment, version)\nend\nbit_stream.append_terminator_bits(version, ecl)\nbit_stream.append_padding_bits\ndata_codewords = ECC::RSGenerator.add_ec_codewords(bit_stream.to_bytes, version, ecl)\ncanvas = Canvas.new(version, ecl)\ncanvas.draw_function_patterns\ncanvas.draw_data_codewords(data_codewords)\ncanvas.apply_best_mask\nself.new(version, ecl, canvas)\n"}},{"html_id":"encode_string(text:String,ecl:ECC::Level=ECC::Level::Medium)-class-method","name":"encode_string","doc":"Creates a new QR Code object for the given string and error correction level.\nSetting a higher error correction level makes the QR Code symbol mode resistant\nto loss of pixels, but it requires more redundant bits, resulting in a larger\nsymbol size.\nUse `PNGExporter` to generate the PNG image from the QR Code object generated.\n\n```\nqr = Goban::QR.encode_string(\"Hello World!\", Goban::ECC::Level::Low)\nqr.print_to_console\n# => ██████████████  ████    ██  ██████████████\n#    ██          ██    ██    ██  ██          ██\n#    ██  ██████  ██  ██  ██  ██  ██  ██████  ██\n#    ██  ██████  ██  ██    ██    ██  ██████  ██\n#    ██  ██████  ██  ██████      ██  ██████  ██\n#    ██          ██              ██          ██\n#    ██████████████  ██  ██  ██  ██████████████\n#                      ████\n#    ████████    ██  ██  ██    ██    ██████  ██\n#    ██████████    ██  ██    ██████████████  ██\n#        ██    ████    ██    ████  ██      ████\n#    ████  ██      ██████    ██    ██  ██  ██\n#    ████  ██████████  ██████  ████          ██\n#                    ████████    ████    ██  ██\n#    ██████████████      ██    ████████\n#    ██          ██    ██████████  ██  ████\n#    ██  ██████  ██    ██  ██          ██████\n#    ██  ██████  ██  ██  ██  ██  ██    ██████\n#    ██  ██████  ██  ██████  ██    ██    ██\n#    ██          ██  ██    ██  ████████      ██\n#    ██████████████  ██    ██  ██████    ██\n```\n\nQR Code data under the hood is encoded in one or more encoding types, such as Numeric,\nAlphanumeric, Byte, and Kanji. Each encoding type has a different set of characters\nsupported. While Byte mode can express arbitrary types of data (usually interpreted as UTF-8\ntext, thus it can express any Unicode characters), it often uses more bits to represent a single\ncodepoint compared to other encoding types which have a limited set of characters supported,\nresulting in larger data size and a more challenging QR Code to scan.\n\nThis string encoding uses an algorithm to figure out the best segmentation of the encoding\ntypes for the given string to make the resulting data size as small as possible. Here are the\nexamples:\n\n```\n# These examples are the optimal segmentations when the EC Level is Medium.\n# Note that the Segment object shown in these examples are not the actual Segment object used\n# in the Goban's codebase but they are just pseudo objects.\n\n\"0123456789\" # => [Segment(\"0123456789\", mode: Numeric)]\n\"ABCDEF\"     # => [Segment(\"ABCDEF\", mode: Alphanumeric)]\n\"012345A\"    # => [Segment(\"012345A\", mode: Alphanumeric)]\n\"0123456A\"   # => [Segment(\"0123456\", mode: Numeric), Segment(\"A\", mode: Alphanumeric)]\n\"こんにちwa、世界！ 123\"\n# => [\n#   Segment(\"こんにち\", mode: Kanji),\n#   Segment(\"wa\", mode: Byte),\n#   Segment(\"、世界！\", mode: Kanji),\n#   Segment(\" 123\", mode: Alphanumeric)\n# ]\n```\n\nIf the type of characters used in your data strings is always the same, you may want to consider\nbuilding data segments by yourself so that Goban doesn't have to do extra processing to figure\nit out every single time. See `#encode_segments` for how to create QR Codes by manually creating\nencoding segments.","summary":"<p>Creates a new QR Code object for the given string and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(text : String, ecl : ECC::Level = ECC::Level::Medium)","args_html":"(text : String, ecl : <a href=\"../Goban/ECC/Level.html\">ECC::Level</a> = <span class=\"t\">ECC</span><span class=\"t\">::</span><span class=\"t\">Level</span><span class=\"t\">::</span><span class=\"t\">Medium</span>)","location":{"filename":"src/goban/qr.cr","line_number":87,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L87"},"def":{"name":"encode_string","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","default_value":"ECC::Level::Medium","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"segments, version = Segment::Optimizer.make_optimized_segments(text, ecl)\nself.encode_segments(segments, ecl, version)\n"}}],"constructors":[{"html_id":"new(version:Goban::QR::Version,ecl:Goban::ECC::Level,canvas:Goban::QR::Canvas)-class-method","name":"new","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"::Goban::QR::Version"},{"name":"ecl","external_name":"ecl","restriction":"::Goban::ECC::Level"},{"name":"canvas","external_name":"canvas","restriction":"::Goban::QR::Canvas"}],"args_string":"(version : Goban::QR::Version, ecl : Goban::ECC::Level, canvas : Goban::QR::Canvas)","args_html":"(version : <a href=\"../Goban/QR/Version.html\">Goban::QR::Version</a>, ecl : <a href=\"../Goban/ECC/Level.html\">Goban::ECC::Level</a>, canvas : <a href=\"../Goban/QR/Canvas.html\">Goban::QR::Canvas</a>)","location":{"filename":"src/goban/qr.cr","line_number":18,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L18"},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":"::Goban::QR::Version"},{"name":"ecl","external_name":"ecl","restriction":"::Goban::ECC::Level"},{"name":"canvas","external_name":"canvas","restriction":"::Goban::QR::Canvas"}],"visibility":"Public","body":"_ = allocate\n_.initialize(version, ecl, canvas)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"canvas:Canvas-instance-method","name":"canvas","doc":"Returns the canvas of the QR Code symbol. Canvas contains information about\neach single module (pixel) in the symbol.","summary":"<p>Returns the canvas of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":14,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L14"},"def":{"name":"canvas","return_type":"Canvas","visibility":"Public","body":"@canvas"}},{"html_id":"ecl:ECC::Level-instance-method","name":"ecl","doc":"Error correction level of the QR Code symbol.","summary":"<p>Error correction level of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":11,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L11"},"def":{"name":"ecl","return_type":"ECC::Level","visibility":"Public","body":"@ecl"}},{"html_id":"print_to_console-instance-method","name":"print_to_console","doc":"Prints the QR Code symbol as a text in the console. To generate the actual image file,\nuse `PNGExporter` or write your own exporter by reading each modules in `#canvas`.","summary":"<p>Prints the QR Code symbol as a text in the console.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":152,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L152"},"def":{"name":"print_to_console","visibility":"Public","body":"@canvas.print_to_console"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Length of a side in the symbol.","summary":"<p>Length of a side in the symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":16,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L16"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"version:Version-instance-method","name":"version","doc":"Version of the QR Code symbol. Version in QR Code does not refer to its revision,\nbut simply indicates the size format of the QR Code symbol.","summary":"<p>Version of the QR Code symbol.</p>","abstract":false,"location":{"filename":"src/goban/qr.cr","line_number":9,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr.cr#L9"},"def":{"name":"version","return_type":"Version","visibility":"Public","body":"@version"}}],"types":[{"html_id":"goban/Goban/QR/Canvas","path":"Goban/QR/Canvas.html","kind":"struct","full_name":"Goban::QR::Canvas","name":"Canvas","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr/canvas.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L3"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"doc":"Holds information about each modules in a QR Code symbol.","summary":"<p>Holds information about each modules in a QR Code symbol.</p>","constructors":[{"html_id":"new(version:Version,ecl:ECC::Level)-class-method","name":"new","doc":"Creates a blank canvas with the given version and error correction level.","summary":"<p>Creates a blank canvas with the given version and error correction level.</p>","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"Version"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(version : Version, ecl : ECC::Level)","args_html":"(version : <a href=\"../../Goban/QR/Version.html\">Version</a>, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/qr/canvas.cr","line_number":12,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L12"},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":"Version"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"_ = allocate\n_.initialize(version, ecl)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"get_module(x:Int,y:Int):Bool-instance-method","name":"get_module","doc":"Returns whether a module at the given coordinate is dark or not.","summary":"<p>Returns whether a module at the given coordinate is dark or not.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int) : Bool","args_html":"(x : Int, y : Int) : Bool","location":{"filename":"src/goban/qr/canvas.cr","line_number":206,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L206"},"def":{"name":"get_module","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"return_type":"Bool","visibility":"Public","body":"@modules[(y * @size) + x]"}},{"html_id":"mask:Mask-instance-method","name":"mask","doc":"Returns the mask applied to the canvas.","summary":"<p>Returns the mask applied to the canvas.</p>","abstract":false,"location":{"filename":"src/goban/qr/canvas.cr","line_number":9,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L9"},"def":{"name":"mask","return_type":"Mask","visibility":"Public","body":"@mask"}},{"html_id":"module_reserved?(x:Int,y:Int)-instance-method","name":"module_reserved?","doc":"Returns whether a module at the given coordinate is reserved for\nit being a part of function patterns.","summary":"<p>Returns whether a module at the given coordinate is reserved for it being a part of function patterns.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/goban/qr/canvas.cr","line_number":212,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L212"},"def":{"name":"module_reserved?","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"@reserved_modules[(y * @size) + x]"}},{"html_id":"modules:Array(Bool)-instance-method","name":"modules","doc":"Returns the array of modules drawn on the canvas.","summary":"<p>Returns the array of modules drawn on the canvas.</p>","abstract":false,"location":{"filename":"src/goban/qr/canvas.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L5"},"def":{"name":"modules","return_type":"Array(Bool)","visibility":"Public","body":"@modules"}},{"html_id":"print_to_console-instance-method","name":"print_to_console","doc":"Prints the modules on the canvas as a text in the console.","summary":"<p>Prints the modules on the canvas as a text in the console.</p>","abstract":false,"location":{"filename":"src/goban/qr/canvas.cr","line_number":217,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L217"},"def":{"name":"print_to_console","visibility":"Public","body":"@size.times do |y|\n  @size.times do |x|\n    print(get_module(x, y) ? \"██\" : \"  \")\n  end\n  print('\\n')\nend\nprint('\\n')\n"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Length of the canvas's side.","summary":"<p>Length of the canvas's side.</p>","abstract":false,"location":{"filename":"src/goban/qr/canvas.cr","line_number":7,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/canvas.cr#L7"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}}]},{"html_id":"goban/Goban/QR/Mask","path":"Goban/QR/Mask.html","kind":"struct","full_name":"Goban::QR::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr/mask.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/mask.cr#L3"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"doc":"Represents a mask pattern that can be applied to a canvas.","summary":"<p>Represents a mask pattern that can be applied to a canvas.</p>","constructors":[{"html_id":"new(value:UInt8)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"::UInt8"}],"args_string":"(value : UInt8)","args_html":"(value : UInt8)","location":{"filename":"src/goban/qr/mask.cr","line_number":7,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/mask.cr#L7"},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"::UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"value:UInt8-instance-method","name":"value","doc":"Mask identifier. Valid values are integers from 0 to 7.","summary":"<p>Mask identifier.</p>","abstract":false,"location":{"filename":"src/goban/qr/mask.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/mask.cr#L5"},"def":{"name":"value","return_type":"UInt8","visibility":"Public","body":"@value"}}]},{"html_id":"goban/Goban/QR/Version","path":"Goban/QR/Version.html","kind":"struct","full_name":"Goban::QR::Version","name":"Version","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/qr/version.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L5"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX","name":"MAX","value":"40_u8"},{"id":"MIN","name":"MIN","value":"1_u8"}],"included_modules":[{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"goban/Goban/QR","kind":"struct","full_name":"Goban::QR","name":"QR"},"doc":"Represents a version number of the QR Code symbol.\nPossible versions range from 1 to 40, and the higher the number,\nthe large the size of the final QR Code symbol.","summary":"<p>Represents a version number of the QR Code symbol.</p>","constructors":[{"html_id":"new(value:Int)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int"}],"args_string":"(value : Int)","args_html":"(value : Int)","location":{"filename":"src/goban/qr/version.cr","line_number":13,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L13"},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:Int)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","args_html":"(other : Int)","location":{"filename":"src/goban/qr/version.cr","line_number":18,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L18"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Int"}],"visibility":"Public","body":"@value <=> other"}},{"html_id":"max_data_codewords(ecl:ECC::Level)-instance-method","name":"max_data_codewords","doc":"Maximum number of codewords that can be contained in the QR Code\nsymbol of this version.","summary":"<p>Maximum number of codewords that can be contained in the QR Code symbol of this version.</p>","abstract":false,"args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(ecl : ECC::Level)","args_html":"(ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>)","location":{"filename":"src/goban/qr/version.cr","line_number":78,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L78"},"def":{"name":"max_data_codewords","args":[{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"visibility":"Public","body":"raw_max_data_codewords = raw_data_mods_count // 8\necc_codewords = ECC_CODEWORDS_PER_BLOCK[ecl.value][@value] * ERROR_CORRECTION_BLOCKS[ecl.value][@value]\nraw_max_data_codewords - ecc_codewords\n"}},{"html_id":"symbol_size-instance-method","name":"symbol_size","doc":"Size of the QR Code symbol for this version.","summary":"<p>Size of the QR Code symbol for this version.</p>","abstract":false,"location":{"filename":"src/goban/qr/version.cr","line_number":27,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L27"},"def":{"name":"symbol_size","visibility":"Public","body":"(4 * @value) + 17"}},{"html_id":"to_i-instance-method","name":"to_i","abstract":false,"location":{"filename":"src/goban/qr/version.cr","line_number":22,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L22"},"def":{"name":"to_i","visibility":"Public","body":"value"}},{"html_id":"value:UInt8-instance-method","name":"value","abstract":false,"location":{"filename":"src/goban/qr/version.cr","line_number":11,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/qr/version.cr#L11"},"def":{"name":"value","return_type":"UInt8","visibility":"Public","body":"@value"}}]}]},{"html_id":"goban/Goban/Segment","path":"Goban/Segment.html","kind":"struct","full_name":"Goban::Segment","name":"Segment","abstract":false,"superclass":{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"goban/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/segment.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L5"},{"filename":"src/goban/segment/mode.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L1"},{"filename":"src/goban/segment/optimizer.cr","line_number":1,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/optimizer.cr#L1"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"doc":"Represents a segment of QR Code data that holds its data bits and encoding type.","summary":"<p>Represents a segment of QR Code data that holds its data bits and encoding type.</p>","class_methods":[{"html_id":"alphanumeric(text:String)-class-method","name":"alphanumeric","doc":"Shorthand method for creating a Alphanumeric mode segment.","summary":"<p>Shorthand method for creating a Alphanumeric mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":44,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L44"},"def":{"name":"alphanumeric","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"chars = text.chars.map do |c|\n  (ALPHANUMERIC_CHARS.index(c)) || (raise(\"Alphanumeric data contains unencodable characters\"))\nend\nbit_stream = BitStream.new((chars.size * 5) + ((chars.size + 1) // 2))\nsegment = self.new(Segment::Mode::Alphanumeric, chars.size, bit_stream)\nchars.each_slice(2) do |slice|\n  if slice.size == 1\n    val = slice[0]\n    size = 6\n  else\n    val = (slice[0] * 45) + slice[1]\n    size = 11\n  end\n  bit_stream.append_bits(val, size)\nend\nsegment\n"}},{"html_id":"byte(text:String)-class-method","name":"byte","doc":"Shorthand method for creating a Byte mode segment.","summary":"<p>Shorthand method for creating a Byte mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":67,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L67"},"def":{"name":"byte","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"bytes = text.bytes\nbit_stream = BitStream.new(bytes.size * 8)\nsegment = self.new(Segment::Mode::Byte, bytes.size, bit_stream)\nbytes.each do |byte|\n  bit_stream.append_bits(byte, 8)\nend\nsegment\n"}},{"html_id":"count_total_bits(segments:Array(Segment),version:QR::Version)-class-method","name":"count_total_bits","doc":"Count number of bits in the given list of segments.","summary":"<p>Count number of bits in the given list of segments.</p>","abstract":false,"args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"version","external_name":"version","restriction":"QR::Version"}],"args_string":"(segments : Array(Segment), version : QR::Version)","args_html":"(segments : Array(<a href=\"../Goban/Segment.html\">Segment</a>), version : <a href=\"../Goban/QR/Version.html\">QR::Version</a>)","location":{"filename":"src/goban/segment.cr","line_number":113,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L113"},"def":{"name":"count_total_bits","args":[{"name":"segments","external_name":"segments","restriction":"Array(Segment)"},{"name":"version","external_name":"version","restriction":"QR::Version"}],"visibility":"Public","body":"result = 0\nsegments.each do |segment|\n  cci_bits_size = segment.mode.cci_bits_size(version)\n  if segment.char_count >= (1 << cci_bits_size)\n    raise(\"Segment too long\")\n  end\n  result = result + ((4 + cci_bits_size) + segment.bit_stream.size)\nend\nresult\n"}},{"html_id":"kanji(text:String)-class-method","name":"kanji","doc":"Shorthand method for creating a Kanji mode segment.","summary":"<p>Shorthand method for creating a Kanji mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":79,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L79"},"def":{"name":"kanji","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"bytes = text.encode(\"SHIFT_JIS\")\nif (bytes.size % 2) == 0\nelse\n  raise(\"Kanji data contains unencodable characters\")\nend\nbit_stream = BitStream.new((bytes.size // 2) * 13)\nsegment = self.new(Segment::Mode::Kanji, text.size, bit_stream)\n(bytes.each_slice(2)).each do |byte_pair|\n  if (!((64..252).includes?(byte_pair[1]))) || (byte_pair[1] == 127)\n    raise(\"Kanji data contains unencodable characters\")\n  end\n  val = (byte_pair[0].to_u16 << 8) | byte_pair[1]\n  if (33088..40956).includes?(val)\n    val = val - 33088\n  else\n    if (57408..60351).includes?(val)\n      val = val - 49472\n    else\n      raise(\"Kanji data contains unencodable characters\")\n    end\n  end\n  val = ((val >> 8) * 192) + (val & 255)\n  bit_stream.append_bits(val, 13)\nend\nsegment\n"}},{"html_id":"numeric(text:String)-class-method","name":"numeric","doc":"Shorthand method for creating a Numeric mode segment.","summary":"<p>Shorthand method for creating a Numeric mode segment.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/goban/segment.cr","line_number":29,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L29"},"def":{"name":"numeric","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"digits = text.chars\nif digits.all?(&.ascii_number?)\nelse\n  raise(\"Numeric data contains non-numeric characters\")\nend\nbit_stream = BitStream.new((digits.size * 3) + ((digits.size + 2) // 3))\nsegment = self.new(Segment::Mode::Numeric, digits.size, bit_stream)\ndigits.each_slice(3) do |slice|\n  val = slice.join.to_u32\n  bit_stream.append_bits(val, (slice.size * 3) + 1)\nend\nsegment\n"}}],"constructors":[{"html_id":"new(mode:Goban::Segment::Mode,char_count:Int32,bit_stream:Goban::BitStream)-class-method","name":"new","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"::Goban::Segment::Mode"},{"name":"char_count","external_name":"char_count","restriction":"::Int32"},{"name":"bit_stream","external_name":"bit_stream","restriction":"::Goban::BitStream"}],"args_string":"(mode : Goban::Segment::Mode, char_count : Int32, bit_stream : Goban::BitStream)","args_html":"(mode : <a href=\"../Goban/Segment/Mode.html\">Goban::Segment::Mode</a>, char_count : Int32, bit_stream : <a href=\"../Goban/BitStream.html\">Goban::BitStream</a>)","location":{"filename":"src/goban/segment.cr","line_number":10,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L10"},"def":{"name":"new","args":[{"name":"mode","external_name":"mode","restriction":"::Goban::Segment::Mode"},{"name":"char_count","external_name":"char_count","restriction":"::Int32"},{"name":"bit_stream","external_name":"bit_stream","restriction":"::Goban::BitStream"}],"visibility":"Public","body":"_ = allocate\n_.initialize(mode, char_count, bit_stream)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(mode:Mode,text:String)-class-method","name":"new","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"Mode"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(mode : Mode, text : String)","args_html":"(mode : <a href=\"../Goban/Segment/Mode.html\">Mode</a>, text : String)","location":{"filename":"src/goban/segment.cr","line_number":13,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L13"},"def":{"name":"new","args":[{"name":"mode","external_name":"mode","restriction":"Mode"},{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"case mode\nwhen .numeric?\n  self.numeric(text)\nwhen .alphanumeric?\n  self.alphanumeric(text)\nwhen .byte?\n  self.byte(text)\nwhen .kanji?\n  self.kanji(text)\nelse\n  raise(\"Unsupported mode\")\nend"}}],"instance_methods":[{"html_id":"bit_stream:BitStream-instance-method","name":"bit_stream","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":8,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L8"},"def":{"name":"bit_stream","return_type":"BitStream","visibility":"Public","body":"@bit_stream"}},{"html_id":"char_count:Int32-instance-method","name":"char_count","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":7,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L7"},"def":{"name":"char_count","return_type":"Int32","visibility":"Public","body":"@char_count"}},{"html_id":"mode:Mode-instance-method","name":"mode","abstract":false,"location":{"filename":"src/goban/segment.cr","line_number":6,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment.cr#L6"},"def":{"name":"mode","return_type":"Mode","visibility":"Public","body":"@mode"}}],"types":[{"html_id":"goban/Goban/Segment/Mode","path":"Goban/Segment/Mode.html","kind":"enum","full_name":"Goban::Segment::Mode","name":"Mode","abstract":false,"ancestors":[{"html_id":"goban/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"goban/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"goban/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"goban/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/goban/segment/mode.cr","line_number":3,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L3"}],"repository_name":"goban","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"ECI","name":"ECI","value":"7_u8"},{"id":"Numeric","name":"Numeric","value":"1_u8"},{"id":"Alphanumeric","name":"Alphanumeric","value":"2_u8"},{"id":"Byte","name":"Byte","value":"4_u8"},{"id":"Kanji","name":"Kanji","value":"8_u8"},{"id":"StructuredAppend","name":"StructuredAppend","value":"3_u8"},{"id":"Undefined","name":"Undefined","value":"255_u8"}],"namespace":{"html_id":"goban/Goban/Segment","kind":"struct","full_name":"Goban::Segment","name":"Segment"},"doc":"Represents a encoding mode of a data segment.","summary":"<p>Represents a encoding mode of a data segment.</p>","instance_methods":[{"html_id":"alphanumeric?-instance-method","name":"alphanumeric?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":6,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L6"},"def":{"name":"alphanumeric?","visibility":"Public","body":"self == Alphanumeric"}},{"html_id":"byte?-instance-method","name":"byte?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":7,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L7"},"def":{"name":"byte?","visibility":"Public","body":"self == Byte"}},{"html_id":"eci?-instance-method","name":"eci?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":4,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L4"},"def":{"name":"eci?","visibility":"Public","body":"self == ECI"}},{"html_id":"kanji?-instance-method","name":"kanji?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":8,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L8"},"def":{"name":"kanji?","visibility":"Public","body":"self == Kanji"}},{"html_id":"numeric?-instance-method","name":"numeric?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L5"},"def":{"name":"numeric?","visibility":"Public","body":"self == Numeric"}},{"html_id":"structured_append?-instance-method","name":"structured_append?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":9,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L9"},"def":{"name":"structured_append?","visibility":"Public","body":"self == StructuredAppend"}},{"html_id":"undefined?-instance-method","name":"undefined?","abstract":false,"location":{"filename":"src/goban/segment/mode.cr","line_number":10,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/mode.cr#L10"},"def":{"name":"undefined?","visibility":"Public","body":"self == Undefined"}}]},{"html_id":"goban/Goban/Segment/Optimizer","path":"Goban/Segment/Optimizer.html","kind":"module","full_name":"Goban::Segment::Optimizer","name":"Optimizer","abstract":false,"locations":[{"filename":"src/goban/segment/optimizer.cr","line_number":4,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/optimizer.cr#L4"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/Segment/Optimizer","kind":"module","full_name":"Goban::Segment::Optimizer","name":"Optimizer"}],"namespace":{"html_id":"goban/Goban/Segment","kind":"struct","full_name":"Goban::Segment","name":"Segment"},"doc":"Module for optimizing segmentations of the different encoding modes\nfor the given text string.","summary":"<p>Module for optimizing segmentations of the different encoding modes for the given text string.</p>","instance_methods":[{"html_id":"make_optimized_segments(text:String,ecl:ECC::Level):Tuple(Array(Segment),QR::Version)-instance-method","name":"make_optimized_segments","doc":"Returns a tuple of the optimized segments and QR Code version\nfor the given text and error correction level.","summary":"<p>Returns a tuple of the optimized segments and QR Code version for the given text and error correction level.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"args_string":"(text : String, ecl : ECC::Level) : Tuple(Array(Segment), QR::Version)","args_html":"(text : String, ecl : <a href=\"../../Goban/ECC/Level.html\">ECC::Level</a>) : Tuple(Array(<a href=\"../../Goban/Segment.html\">Segment</a>), <a href=\"../../Goban/QR/Version.html\">QR::Version</a>)","location":{"filename":"src/goban/segment/optimizer.cr","line_number":9,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/segment/optimizer.cr#L9"},"def":{"name":"make_optimized_segments","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ecl","external_name":"ecl","restriction":"ECC::Level"}],"return_type":"Tuple(Array(Segment), QR::Version)","visibility":"Public","body":"chars = text.chars\nsegments, version = nil, nil\nused_bits = 0\n{(1..9), (10..26), (27..40)}.each do |group|\n  v = QR::Version.new(group.end)\n  char_modes = compute_char_modes(chars, v)\n  segments = make_segments(text, char_modes)\n  cap_bits = (v.max_data_codewords(ecl)) * 8\n  begin\n    used_bits = Segment.count_total_bits(segments, v)\n  rescue e\n    if e.message == \"Segment too long\"\n      next\n    end\n    raise(e)\n  end\n  if used_bits <= cap_bits\n    group.each do |i|\n      sml_v = QR::Version.new(i)\n      sml_cap_bits = (sml_v.max_data_codewords(ecl)) * 8\n      if used_bits <= sml_cap_bits\n        version = sml_v\n        break\n      end\n    end\n    break\n  end\nend\nif segments && version\nelse\n  raise(\"Text too long\")\nend\n{segments, version}\n"}}]}]},{"html_id":"goban/Goban/SVGExporter","path":"Goban/SVGExporter.html","kind":"module","full_name":"Goban::SVGExporter","name":"SVGExporter","abstract":false,"locations":[{"filename":"src/goban/exporters/svg.cr","line_number":2,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/svg.cr#L2"}],"repository_name":"goban","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"goban/Goban/SVGExporter","kind":"module","full_name":"Goban::SVGExporter","name":"SVGExporter"}],"namespace":{"html_id":"goban/Goban","kind":"module","full_name":"Goban","name":"Goban"},"instance_methods":[{"html_id":"export(qr:QR,path:String)-instance-method","name":"export","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(qr : QR, path : String)","args_html":"(qr : <a href=\"../Goban/QR.html\">QR</a>, path : String)","location":{"filename":"src/goban/exporters/svg.cr","line_number":5,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/svg.cr#L5"},"def":{"name":"export","args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"string = svg_string(qr, 4)\nFile.write(path, string)\n"}},{"html_id":"svg_string(qr:QR,blank_mods:Int)-instance-method","name":"svg_string","abstract":false,"args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"args_string":"(qr : QR, blank_mods : Int)","args_html":"(qr : <a href=\"../Goban/QR.html\">QR</a>, blank_mods : Int)","location":{"filename":"src/goban/exporters/svg.cr","line_number":10,"url":"https://github.com/soya-daizu/goban/blob/master/src/goban/exporters/svg.cr#L10"},"def":{"name":"svg_string","args":[{"name":"qr","external_name":"qr","restriction":"QR"},{"name":"blank_mods","external_name":"blank_mods","restriction":"Int"}],"visibility":"Public","body":"parts = [] of String\nqr.size.times do |x|\n  qr.size.times do |y|\n    if qr.canvas.get_module(x, y)\n    else\n      next\n    end\n    parts.push(\"M#{x + blank_mods},#{y + blank_mods}h1v1h-1z\")\n  end\nend\nreturn \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 #{qr.size + (blank_mods * 2)} #{qr.size + (blank_mods * 2)}\\\" stroke=\\\"none\\\"><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#fff\\\"/><path d=\\\"#{parts.join(' ')}\\\" fill=\\\"#000\\\"/></svg>\"\n"}}]}]}]}})